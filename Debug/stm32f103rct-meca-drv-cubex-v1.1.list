
stm32f103rct-meca-drv-cubex-v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f620  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800f810  0800f810  0001f810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff68  0800ff68  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800ff68  0800ff68  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ff68  0800ff68  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff68  0800ff68  0001ff68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff6c  0800ff6c  0001ff6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ff70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003414  20000200  08010170  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003614  08010170  00023614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb58  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c0c  00000000  00000000  0003edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd8  00000000  00000000  000439d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015d9  00000000  00000000  000455a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea65  00000000  00000000  00046b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000211bf  00000000  00000000  000655e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeb5e  00000000  00000000  000867a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a50  00000000  00000000  00135304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013dd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000200 	.word	0x20000200
 800020c:	00000000 	.word	0x00000000
 8000210:	0800f7f8 	.word	0x0800f7f8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000204 	.word	0x20000204
 800022c:	0800f7f8 	.word	0x0800f7f8

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	; 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fmul>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d06f      	beq.n	8000f44 <__aeabi_fmul+0xf8>
 8000e64:	441a      	add	r2, r3
 8000e66:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6a:	0240      	lsls	r0, r0, #9
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e72:	d01e      	beq.n	8000eb2 <__aeabi_fmul+0x66>
 8000e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e80:	fba0 3101 	umull	r3, r1, r0, r1
 8000e84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e8c:	bf3e      	ittt	cc
 8000e8e:	0049      	lslcc	r1, r1, #1
 8000e90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e94:	005b      	lslcc	r3, r3, #1
 8000e96:	ea40 0001 	orr.w	r0, r0, r1
 8000e9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e9e:	2afd      	cmp	r2, #253	; 0xfd
 8000ea0:	d81d      	bhi.n	8000ede <__aeabi_fmul+0x92>
 8000ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ea6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eaa:	bf08      	it	eq
 8000eac:	f020 0001 	biceq.w	r0, r0, #1
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eba:	bf08      	it	eq
 8000ebc:	0249      	lsleq	r1, r1, #9
 8000ebe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ec6:	3a7f      	subs	r2, #127	; 0x7f
 8000ec8:	bfc2      	ittt	gt
 8000eca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ece:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed2:	4770      	bxgt	lr
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	3a01      	subs	r2, #1
 8000ede:	dc5d      	bgt.n	8000f9c <__aeabi_fmul+0x150>
 8000ee0:	f112 0f19 	cmn.w	r2, #25
 8000ee4:	bfdc      	itt	le
 8000ee6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eea:	4770      	bxle	lr
 8000eec:	f1c2 0200 	rsb	r2, r2, #0
 8000ef0:	0041      	lsls	r1, r0, #1
 8000ef2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ef6:	f1c2 0220 	rsb	r2, r2, #32
 8000efa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000efe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f02:	f140 0000 	adc.w	r0, r0, #0
 8000f06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f0a:	bf08      	it	eq
 8000f0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f10:	4770      	bx	lr
 8000f12:	f092 0f00 	teq	r2, #0
 8000f16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0040      	lsleq	r0, r0, #1
 8000f1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f22:	3a01      	subeq	r2, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fmul+0xce>
 8000f26:	ea40 000c 	orr.w	r0, r0, ip
 8000f2a:	f093 0f00 	teq	r3, #0
 8000f2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0049      	lsleq	r1, r1, #1
 8000f36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3a:	3b01      	subeq	r3, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fmul+0xe6>
 8000f3e:	ea41 010c 	orr.w	r1, r1, ip
 8000f42:	e78f      	b.n	8000e64 <__aeabi_fmul+0x18>
 8000f44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	bf18      	it	ne
 8000f4e:	ea93 0f0c 	teqne	r3, ip
 8000f52:	d00a      	beq.n	8000f6a <__aeabi_fmul+0x11e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1d8      	bne.n	8000f12 <__aeabi_fmul+0xc6>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	4770      	bx	lr
 8000f6a:	f090 0f00 	teq	r0, #0
 8000f6e:	bf17      	itett	ne
 8000f70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f74:	4608      	moveq	r0, r1
 8000f76:	f091 0f00 	teqne	r1, #0
 8000f7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f7e:	d014      	beq.n	8000faa <__aeabi_fmul+0x15e>
 8000f80:	ea92 0f0c 	teq	r2, ip
 8000f84:	d101      	bne.n	8000f8a <__aeabi_fmul+0x13e>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d10f      	bne.n	8000faa <__aeabi_fmul+0x15e>
 8000f8a:	ea93 0f0c 	teq	r3, ip
 8000f8e:	d103      	bne.n	8000f98 <__aeabi_fmul+0x14c>
 8000f90:	024b      	lsls	r3, r1, #9
 8000f92:	bf18      	it	ne
 8000f94:	4608      	movne	r0, r1
 8000f96:	d108      	bne.n	8000faa <__aeabi_fmul+0x15e>
 8000f98:	ea80 0001 	eor.w	r0, r0, r1
 8000f9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fa8:	4770      	bx	lr
 8000faa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_fdiv>:
 8000fb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fbc:	bf1e      	ittt	ne
 8000fbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fc2:	ea92 0f0c 	teqne	r2, ip
 8000fc6:	ea93 0f0c 	teqne	r3, ip
 8000fca:	d069      	beq.n	80010a0 <__aeabi_fdiv+0xec>
 8000fcc:	eba2 0203 	sub.w	r2, r2, r3
 8000fd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fd4:	0249      	lsls	r1, r1, #9
 8000fd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fda:	d037      	beq.n	800104c <__aeabi_fdiv+0x98>
 8000fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fe4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fe8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fec:	428b      	cmp	r3, r1
 8000fee:	bf38      	it	cc
 8000ff0:	005b      	lslcc	r3, r3, #1
 8000ff2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ff6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	bf24      	itt	cs
 8000ffe:	1a5b      	subcs	r3, r3, r1
 8001000:	ea40 000c 	orrcs.w	r0, r0, ip
 8001004:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001008:	bf24      	itt	cs
 800100a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800100e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001012:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001016:	bf24      	itt	cs
 8001018:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800101c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001020:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001024:	bf24      	itt	cs
 8001026:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800102a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	bf18      	it	ne
 8001032:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001036:	d1e0      	bne.n	8000ffa <__aeabi_fdiv+0x46>
 8001038:	2afd      	cmp	r2, #253	; 0xfd
 800103a:	f63f af50 	bhi.w	8000ede <__aeabi_fmul+0x92>
 800103e:	428b      	cmp	r3, r1
 8001040:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001044:	bf08      	it	eq
 8001046:	f020 0001 	biceq.w	r0, r0, #1
 800104a:	4770      	bx	lr
 800104c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001050:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001054:	327f      	adds	r2, #127	; 0x7f
 8001056:	bfc2      	ittt	gt
 8001058:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800105c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001060:	4770      	bxgt	lr
 8001062:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	3a01      	subs	r2, #1
 800106c:	e737      	b.n	8000ede <__aeabi_fmul+0x92>
 800106e:	f092 0f00 	teq	r2, #0
 8001072:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001076:	bf02      	ittt	eq
 8001078:	0040      	lsleq	r0, r0, #1
 800107a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800107e:	3a01      	subeq	r2, #1
 8001080:	d0f9      	beq.n	8001076 <__aeabi_fdiv+0xc2>
 8001082:	ea40 000c 	orr.w	r0, r0, ip
 8001086:	f093 0f00 	teq	r3, #0
 800108a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800108e:	bf02      	ittt	eq
 8001090:	0049      	lsleq	r1, r1, #1
 8001092:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001096:	3b01      	subeq	r3, #1
 8001098:	d0f9      	beq.n	800108e <__aeabi_fdiv+0xda>
 800109a:	ea41 010c 	orr.w	r1, r1, ip
 800109e:	e795      	b.n	8000fcc <__aeabi_fdiv+0x18>
 80010a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010a4:	ea92 0f0c 	teq	r2, ip
 80010a8:	d108      	bne.n	80010bc <__aeabi_fdiv+0x108>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	f47f af7d 	bne.w	8000faa <__aeabi_fmul+0x15e>
 80010b0:	ea93 0f0c 	teq	r3, ip
 80010b4:	f47f af70 	bne.w	8000f98 <__aeabi_fmul+0x14c>
 80010b8:	4608      	mov	r0, r1
 80010ba:	e776      	b.n	8000faa <__aeabi_fmul+0x15e>
 80010bc:	ea93 0f0c 	teq	r3, ip
 80010c0:	d104      	bne.n	80010cc <__aeabi_fdiv+0x118>
 80010c2:	024b      	lsls	r3, r1, #9
 80010c4:	f43f af4c 	beq.w	8000f60 <__aeabi_fmul+0x114>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e76e      	b.n	8000faa <__aeabi_fmul+0x15e>
 80010cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d0:	bf18      	it	ne
 80010d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010d6:	d1ca      	bne.n	800106e <__aeabi_fdiv+0xba>
 80010d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010dc:	f47f af5c 	bne.w	8000f98 <__aeabi_fmul+0x14c>
 80010e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010e4:	f47f af3c 	bne.w	8000f60 <__aeabi_fmul+0x114>
 80010e8:	e75f      	b.n	8000faa <__aeabi_fmul+0x15e>
 80010ea:	bf00      	nop

080010ec <__gesf2>:
 80010ec:	f04f 3cff 	mov.w	ip, #4294967295
 80010f0:	e006      	b.n	8001100 <__cmpsf2+0x4>
 80010f2:	bf00      	nop

080010f4 <__lesf2>:
 80010f4:	f04f 0c01 	mov.w	ip, #1
 80010f8:	e002      	b.n	8001100 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__cmpsf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001104:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001108:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	bf18      	it	ne
 8001112:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001116:	d011      	beq.n	800113c <__cmpsf2+0x40>
 8001118:	b001      	add	sp, #4
 800111a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800111e:	bf18      	it	ne
 8001120:	ea90 0f01 	teqne	r0, r1
 8001124:	bf58      	it	pl
 8001126:	ebb2 0003 	subspl.w	r0, r2, r3
 800112a:	bf88      	it	hi
 800112c:	17c8      	asrhi	r0, r1, #31
 800112e:	bf38      	it	cc
 8001130:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001134:	bf18      	it	ne
 8001136:	f040 0001 	orrne.w	r0, r0, #1
 800113a:	4770      	bx	lr
 800113c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001140:	d102      	bne.n	8001148 <__cmpsf2+0x4c>
 8001142:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001146:	d105      	bne.n	8001154 <__cmpsf2+0x58>
 8001148:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800114c:	d1e4      	bne.n	8001118 <__cmpsf2+0x1c>
 800114e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001152:	d0e1      	beq.n	8001118 <__cmpsf2+0x1c>
 8001154:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_cfrcmple>:
 800115c:	4684      	mov	ip, r0
 800115e:	4608      	mov	r0, r1
 8001160:	4661      	mov	r1, ip
 8001162:	e7ff      	b.n	8001164 <__aeabi_cfcmpeq>

08001164 <__aeabi_cfcmpeq>:
 8001164:	b50f      	push	{r0, r1, r2, r3, lr}
 8001166:	f7ff ffc9 	bl	80010fc <__cmpsf2>
 800116a:	2800      	cmp	r0, #0
 800116c:	bf48      	it	mi
 800116e:	f110 0f00 	cmnmi.w	r0, #0
 8001172:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001174 <__aeabi_fcmpeq>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff fff4 	bl	8001164 <__aeabi_cfcmpeq>
 800117c:	bf0c      	ite	eq
 800117e:	2001      	moveq	r0, #1
 8001180:	2000      	movne	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmplt>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffea 	bl	8001164 <__aeabi_cfcmpeq>
 8001190:	bf34      	ite	cc
 8001192:	2001      	movcc	r0, #1
 8001194:	2000      	movcs	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmple>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffe0 	bl	8001164 <__aeabi_cfcmpeq>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpge>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffd2 	bl	800115c <__aeabi_cfrcmple>
 80011b8:	bf94      	ite	ls
 80011ba:	2001      	movls	r0, #1
 80011bc:	2000      	movhi	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_fcmpgt>:
 80011c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c8:	f7ff ffc8 	bl	800115c <__aeabi_cfrcmple>
 80011cc:	bf34      	ite	cc
 80011ce:	2001      	movcc	r0, #1
 80011d0:	2000      	movcs	r0, #0
 80011d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d6:	bf00      	nop

080011d8 <__aeabi_f2iz>:
 80011d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011e0:	d30f      	bcc.n	8001202 <__aeabi_f2iz+0x2a>
 80011e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ea:	d90d      	bls.n	8001208 <__aeabi_f2iz+0x30>
 80011ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011f8:	fa23 f002 	lsr.w	r0, r3, r2
 80011fc:	bf18      	it	ne
 80011fe:	4240      	negne	r0, r0
 8001200:	4770      	bx	lr
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	4770      	bx	lr
 8001208:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800120c:	d101      	bne.n	8001212 <__aeabi_f2iz+0x3a>
 800120e:	0242      	lsls	r2, r0, #9
 8001210:	d105      	bne.n	800121e <__aeabi_f2iz+0x46>
 8001212:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001216:	bf08      	it	eq
 8001218:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800121c:	4770      	bx	lr
 800121e:	f04f 0000 	mov.w	r0, #0
 8001222:	4770      	bx	lr

08001224 <__aeabi_d2lz>:
 8001224:	b538      	push	{r3, r4, r5, lr}
 8001226:	4605      	mov	r5, r0
 8001228:	460c      	mov	r4, r1
 800122a:	2200      	movs	r2, #0
 800122c:	2300      	movs	r3, #0
 800122e:	4628      	mov	r0, r5
 8001230:	4621      	mov	r1, r4
 8001232:	f7ff fc3d 	bl	8000ab0 <__aeabi_dcmplt>
 8001236:	b928      	cbnz	r0, 8001244 <__aeabi_d2lz+0x20>
 8001238:	4628      	mov	r0, r5
 800123a:	4621      	mov	r1, r4
 800123c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001240:	f000 b80a 	b.w	8001258 <__aeabi_d2ulz>
 8001244:	4628      	mov	r0, r5
 8001246:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800124a:	f000 f805 	bl	8001258 <__aeabi_d2ulz>
 800124e:	4240      	negs	r0, r0
 8001250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001254:	bd38      	pop	{r3, r4, r5, pc}
 8001256:	bf00      	nop

08001258 <__aeabi_d2ulz>:
 8001258:	b5d0      	push	{r4, r6, r7, lr}
 800125a:	2200      	movs	r2, #0
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <__aeabi_d2ulz+0x34>)
 800125e:	4606      	mov	r6, r0
 8001260:	460f      	mov	r7, r1
 8001262:	f7ff f9b3 	bl	80005cc <__aeabi_dmul>
 8001266:	f7ff fc73 	bl	8000b50 <__aeabi_d2uiz>
 800126a:	4604      	mov	r4, r0
 800126c:	f7ff f934 	bl	80004d8 <__aeabi_ui2d>
 8001270:	2200      	movs	r2, #0
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <__aeabi_d2ulz+0x38>)
 8001274:	f7ff f9aa 	bl	80005cc <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4630      	mov	r0, r6
 800127e:	4639      	mov	r1, r7
 8001280:	f7fe ffec 	bl	800025c <__aeabi_dsub>
 8001284:	f7ff fc64 	bl	8000b50 <__aeabi_d2uiz>
 8001288:	4621      	mov	r1, r4
 800128a:	bdd0      	pop	{r4, r6, r7, pc}
 800128c:	3df00000 	.word	0x3df00000
 8001290:	41f00000 	.word	0x41f00000
 8001294:	00000000 	.word	0x00000000

08001298 <adc_conv>:

extern ADC_HandleTypeDef hadc1;


void adc_conv()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09c      	sub	sp, #112	; 0x70
 800129c:	af00      	add	r7, sp, #0

	uint16_t value;
	float out;
	char sbuff[100];

	HAL_ADC_Start(&hadc1);
 800129e:	482e      	ldr	r0, [pc, #184]	; (8001358 <adc_conv+0xc0>)
 80012a0:	f003 fac0 	bl	8004824 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	482b      	ldr	r0, [pc, #172]	; (8001358 <adc_conv+0xc0>)
 80012aa:	f003 fb95 	bl	80049d8 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 80012ae:	482a      	ldr	r0, [pc, #168]	; (8001358 <adc_conv+0xc0>)
 80012b0:	f003 fc98 	bl	8004be4 <HAL_ADC_GetValue>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	HAL_ADC_Stop(&hadc1);
 80012ba:	4827      	ldr	r0, [pc, #156]	; (8001358 <adc_conv+0xc0>)
 80012bc:	f003 fb60 	bl	8004980 <HAL_ADC_Stop>
	// calculateor
	// v * (7. 5 / (30 + 7.5)) = value / 4096 * 3.3V
	// v = value / 4096 * 3.3V / (0.2)
	// v = value / 4096 * 3.3 / 5

	out = (float) value* 1.0;
 80012c0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd69 	bl	8000d9c <__aeabi_ui2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	66bb      	str	r3, [r7, #104]	; 0x68
	out = ( out /  4096.0 ) * 3.3 * 5;
 80012ce:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80012d0:	f7ff f924 	bl	800051c <__aeabi_f2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <adc_conv+0xc4>)
 80012da:	f7ff faa1 	bl	8000820 <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001350 <adc_conv+0xb8>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff f96e 	bl	80005cc <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <adc_conv+0xc8>)
 80012fe:	f7ff f965 	bl	80005cc <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fc41 	bl	8000b90 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	66bb      	str	r3, [r7, #104]	; 0x68

	sprintf(sbuff,"{\"batt\": %d }\n", (int)( out * 100)  );
 8001312:	4914      	ldr	r1, [pc, #80]	; (8001364 <adc_conv+0xcc>)
 8001314:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001316:	f7ff fd99 	bl	8000e4c <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5b 	bl	80011d8 <__aeabi_f2iz>
 8001322:	4602      	mov	r2, r0
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4910      	ldr	r1, [pc, #64]	; (8001368 <adc_conv+0xd0>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00a ffd5 	bl	800c2d8 <siprintf>
	USART1_Send_ArrayU8_DMA( (uint8_t *) sbuff, strlen(sbuff));
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ff87 	bl	8000244 <strlen>
 8001336:	4602      	mov	r2, r0
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f002 f8b7 	bl	80034b0 <USART1_Send_ArrayU8_DMA>


}
 8001342:	bf00      	nop
 8001344:	3770      	adds	r7, #112	; 0x70
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	66666666 	.word	0x66666666
 8001354:	400a6666 	.word	0x400a6666
 8001358:	200003c4 	.word	0x200003c4
 800135c:	40b00000 	.word	0x40b00000
 8001360:	40140000 	.word	0x40140000
 8001364:	42c80000 	.word	0x42c80000
 8001368:	0800f810 	.word	0x0800f810

0800136c <Motion_Set_Pwm>:
    }
}


void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4623      	mov	r3, r4
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	4603      	mov	r3, r0
 8001380:	80bb      	strh	r3, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001392:	dd0a      	ble.n	80013aa <Motion_Set_Pwm+0x3e>
 8001394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139c:	da05      	bge.n	80013aa <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4619      	mov	r1, r3
 80013a4:	2000      	movs	r0, #0
 80013a6:	f001 ffe7 	bl	8003378 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 80013aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ae:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80013b2:	dd0a      	ble.n	80013ca <Motion_Set_Pwm+0x5e>
 80013b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013bc:	da05      	bge.n	80013ca <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 80013be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013c2:	4619      	mov	r1, r3
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 ffd7 	bl	8003378 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 80013ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013ce:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80013d2:	dd0a      	ble.n	80013ea <Motion_Set_Pwm+0x7e>
 80013d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013dc:	da05      	bge.n	80013ea <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 80013de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e2:	4619      	mov	r1, r3
 80013e4:	2002      	movs	r0, #2
 80013e6:	f001 ffc7 	bl	8003378 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 80013ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013ee:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80013f2:	dd0a      	ble.n	800140a <Motion_Set_Pwm+0x9e>
 80013f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fc:	da05      	bge.n	800140a <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 80013fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001402:	4619      	mov	r1, r3
 8001404:	2003      	movs	r0, #3
 8001406:	f001 ffb7 	bl	8003378 <Motor_Set_Pwm>
    }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}

08001412 <Motion_Stop>:


void Motion_Stop()
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
    Motion_Set_Speed(0, 0, 0, 0);
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	f04f 0000 	mov.w	r0, #0
 8001426:	f000 f807 	bl	8001438 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 800142a:	2004      	movs	r0, #4
 800142c:	f000 fc38 	bl	8001ca0 <PID_Clear_Motor>
    Motor_Stop();
 8001430:	f001 ff8e 	bl	8003350 <Motor_Stop>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <Motion_Set_Speed>:


// speed_mX=[-1000, 1000], 单位为：mm/s
void Motion_Set_Speed(float speed_m1, float speed_m2, float speed_m3, float speed_m4)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
    motor_data.speed_set[0] = speed_m1;
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <Motion_Set_Speed+0x58>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6213      	str	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <Motion_Set_Speed+0x58>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	6253      	str	r3, [r2, #36]	; 0x24
    motor_data.speed_set[2] = speed_m3;
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <Motion_Set_Speed+0x58>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6293      	str	r3, [r2, #40]	; 0x28
    motor_data.speed_set[3] = speed_m4;
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <Motion_Set_Speed+0x58>)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	62d3      	str	r3, [r2, #44]	; 0x2c

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
 8001462:	e00c      	b.n	800147e <Motion_Set_Speed+0x46>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] );
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <Motion_Set_Speed+0x58>)
 8001468:	3308      	adds	r3, #8
 800146a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fca0 	bl	8001db8 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	3301      	adds	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d9ef      	bls.n	8001464 <Motion_Set_Speed+0x2c>
    }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000254 	.word	0x20000254

08001494 <Motion_Get_Speed>:



void Motion_Get_Speed(car_data_t* car)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    int i = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    float speed_mm[MAX_MOTOR] = {0};
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 80014ae:	f000 f8cd 	bl	800164c <Motion_Get_Circle_MM>
 80014b2:	6238      	str	r0, [r7, #32]
    float circle_pulse = ENCODER_JGA25_370_130;  // 11 * 46 * 4
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <Motion_Get_Speed+0x194>)
 80014b6:	61fb      	str	r3, [r7, #28]
    float robot_APB = Motion_Get_APB();
 80014b8:	f000 f8be 	bl	8001638 <Motion_Get_APB>
 80014bc:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder(); //get encode off set
 80014be:	f000 f8cf 	bl	8001660 <Motion_Get_Encoder>

    for (i = 0; i < 4; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	e01e      	b.n	8001506 <Motion_Get_Speed+0x72>
    {
		speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <Motion_Get_Speed+0x198>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	2264      	movs	r2, #100	; 0x64
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc64 	bl	8000da4 <__aeabi_i2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	6a39      	ldr	r1, [r7, #32]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fcb3 	bl	8000e4c <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	69f9      	ldr	r1, [r7, #28]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd62 	bl	8000fb4 <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	3328      	adds	r3, #40	; 0x28
 80014fa:	443b      	add	r3, r7
 80014fc:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3301      	adds	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	2b03      	cmp	r3, #3
 800150a:	dddd      	ble.n	80014c8 <Motion_Get_Speed+0x34>
		//  100 comes from because we use 10ms loop check
    }

	car->car_Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fb92 	bl	8000c3c <__addsf3>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fb8b 	bl	8000c3c <__addsf3>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff fb84 	bl	8000c3c <__addsf3>
 8001534:	4603      	mov	r3, r0
 8001536:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fd3a 	bl	8000fb4 <__aeabi_fdiv>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe48 	bl	80011d8 <__aeabi_f2iz>
 8001548:	4603      	mov	r3, r0
 800154a:	b21a      	sxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	801a      	strh	r2, [r3, #0]
	car->car_Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb6e 	bl	8000c38 <__aeabi_fsub>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f7ff fb67 	bl	8000c38 <__aeabi_fsub>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f7ff fb62 	bl	8000c3c <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800157e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fd16 	bl	8000fb4 <__aeabi_fdiv>
 8001588:	4603      	mov	r3, r0
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe24 	bl	80011d8 <__aeabi_f2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	805a      	strh	r2, [r3, #2]
	car->car_Vz = -(speed_mm[0] - speed_mm[1] + speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb4a 	bl	8000c38 <__aeabi_fsub>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f7ff fb45 	bl	8000c3c <__addsf3>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f7ff fb3c 	bl	8000c38 <__aeabi_fsub>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015c6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fcf2 	bl	8000fb4 <__aeabi_fdiv>
 80015d0:	4603      	mov	r3, r0
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fced 	bl	8000fb4 <__aeabi_fdiv>
 80015da:	4603      	mov	r3, r0
 80015dc:	4914      	ldr	r1, [pc, #80]	; (8001630 <Motion_Get_Speed+0x19c>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fc34 	bl	8000e4c <__aeabi_fmul>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fdf6 	bl	80011d8 <__aeabi_f2iz>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	809a      	strh	r2, [r3, #4]


	for (i = 0; i < MAX_MOTOR; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	e00c      	b.n	8001614 <Motion_Get_Speed+0x180>
	{
		motor_data.speed_mm_s[i] = speed_mm[i];  // real speed mm speed
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	3328      	adds	r3, #40	; 0x28
 8001600:	443b      	add	r3, r7
 8001602:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001606:	490b      	ldr	r1, [pc, #44]	; (8001634 <Motion_Get_Speed+0x1a0>)
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < MAX_MOTOR; i++)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	2b03      	cmp	r3, #3
 8001618:	ddef      	ble.n	80015fa <Motion_Get_Speed+0x166>
	}
	PID_Calc_Motor(&motor_data);
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <Motion_Get_Speed+0x1a0>)
 800161c:	f000 fb18 	bl	8001c50 <PID_Calc_Motor>


}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	44fd0000 	.word	0x44fd0000
 800162c:	2000023c 	.word	0x2000023c
 8001630:	447a0000 	.word	0x447a0000
 8001634:	20000254 	.word	0x20000254

08001638 <Motion_Get_APB>:

float Motion_Get_APB(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
    return MECANUM_APB;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <Motion_Get_APB+0x10>)
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	432f0000 	.word	0x432f0000

0800164c <Motion_Get_Circle_MM>:

float Motion_Get_Circle_MM(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM; // 204.203f
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <Motion_Get_Circle_MM+0x10>)
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	434c33f8 	.word	0x434c33f8

08001660 <Motion_Get_Encoder>:


void Motion_Get_Encoder(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

	Encoder_Get_ALL(g_Encoder_All_Now);
 8001666:	4813      	ldr	r0, [pc, #76]	; (80016b4 <Motion_Get_Encoder+0x54>)
 8001668:	f001 fe1a 	bl	80032a0 <Encoder_Get_ALL>
    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 800166c:	2300      	movs	r3, #0
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	e017      	b.n	80016a2 <Motion_Get_Encoder+0x42>
    {
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <Motion_Get_Encoder+0x54>)
 8001676:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <Motion_Get_Encoder+0x58>)
 800167e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	1a8a      	subs	r2, r1, r2
 8001686:	490d      	ldr	r1, [pc, #52]	; (80016bc <Motion_Get_Encoder+0x5c>)
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4908      	ldr	r1, [pc, #32]	; (80016b4 <Motion_Get_Encoder+0x54>)
 8001692:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <Motion_Get_Encoder+0x58>)
 8001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3301      	adds	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d9e4      	bls.n	8001672 <Motion_Get_Encoder+0x12>

    }

}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000021c 	.word	0x2000021c
 80016b8:	2000022c 	.word	0x2000022c
 80016bc:	2000023c 	.word	0x2000023c

080016c0 <Motion_Ctrl>:
float speed_R1_setup = 0;
float speed_R2_setup = 0;

// 控制小车运动
void Motion_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 80016c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016c4:	b08a      	sub	sp, #40	; 0x28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	80fb      	strh	r3, [r7, #6]
 80016cc:	460b      	mov	r3, r1
 80016ce:	80bb      	strh	r3, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	807b      	strh	r3, [r7, #2]
//
//	#define ENCODER_JGA25_370_130  (2024.0f) //46(ratio) * 11 * 4
//	#define ENCODER_JGA25_370_60  (4532.0f)  //103(ratio) * 11 * 4


		float robot_APB = MECANUM_APB; // 177.5 (rotation ratio)
 80016d4:	4bb8      	ldr	r3, [pc, #736]	; (80019b8 <Motion_Ctrl+0x2f8>)
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24

		speed_lr = V_y;
 80016d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb61 	bl	8000da4 <__aeabi_i2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4ab5      	ldr	r2, [pc, #724]	; (80019bc <Motion_Ctrl+0x2fc>)
 80016e6:	6013      	str	r3, [r2, #0]
        speed_fb = V_x;
 80016e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fb59 	bl	8000da4 <__aeabi_i2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4ab2      	ldr	r2, [pc, #712]	; (80019c0 <Motion_Ctrl+0x300>)
 80016f6:	6013      	str	r3, [r2, #0]

        float rot = V_z;
 80016f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb51 	bl	8000da4 <__aeabi_i2f>
 8001702:	4603      	mov	r3, r0
 8001704:	623b      	str	r3, [r7, #32]
        speed_spin = ( ( rot / 180.0f ) * 3.14159 ) * robot_APB;
 8001706:	49af      	ldr	r1, [pc, #700]	; (80019c4 <Motion_Ctrl+0x304>)
 8001708:	6a38      	ldr	r0, [r7, #32]
 800170a:	f7ff fc53 	bl	8000fb4 <__aeabi_fdiv>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff03 	bl	800051c <__aeabi_f2d>
 8001716:	a3a6      	add	r3, pc, #664	; (adr r3, 80019b0 <Motion_Ctrl+0x2f0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff56 	bl	80005cc <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800172a:	f7fe fef7 	bl	800051c <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff49 	bl	80005cc <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fa25 	bl	8000b90 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	4a9f      	ldr	r2, [pc, #636]	; (80019c8 <Motion_Ctrl+0x308>)
 800174a:	6013      	str	r3, [r2, #0]

        float theta = ( ( rot / 180.0f ) * 3.14159 );
 800174c:	499d      	ldr	r1, [pc, #628]	; (80019c4 <Motion_Ctrl+0x304>)
 800174e:	6a38      	ldr	r0, [r7, #32]
 8001750:	f7ff fc30 	bl	8000fb4 <__aeabi_fdiv>
 8001754:	4603      	mov	r3, r0
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fee0 	bl	800051c <__aeabi_f2d>
 800175c:	a394      	add	r3, pc, #592	; (adr r3, 80019b0 <Motion_Ctrl+0x2f0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ff33 	bl	80005cc <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa0f 	bl	8000b90 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	61fb      	str	r3, [r7, #28]

        if (V_x == 0 && V_y == 0 && V_z == 0)
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <Motion_Ctrl+0xd4>
 800177e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <Motion_Ctrl+0xd4>
 8001786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <Motion_Ctrl+0xd4>
        {
            Motion_Stop();
 800178e:	f7ff fe40 	bl	8001412 <Motion_Stop>
            return;
 8001792:	e109      	b.n	80019a8 <Motion_Ctrl+0x2e8>
//    	float motor_2_speed = speed_R1_setup;
//    	float motor_3_speed = speed_L2_setup;
//    	float motor_4_speed = speed_R2_setup;


        float motor_1_speed = speed_fb * ( 1 + (1/cos(theta))*(ROBOT_WIDTH * tan(theta) / ( 2* ROBOT_LENGTH) ) );
 8001794:	4b8a      	ldr	r3, [pc, #552]	; (80019c0 <Motion_Ctrl+0x300>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe febf 	bl	800051c <__aeabi_f2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
 80017a2:	69f8      	ldr	r0, [r7, #28]
 80017a4:	f7fe feba 	bl	800051c <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f00c fe0a 	bl	800e3c8 <cos>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	f04f 0000 	mov.w	r0, #0
 80017bc:	4983      	ldr	r1, [pc, #524]	; (80019cc <Motion_Ctrl+0x30c>)
 80017be:	f7ff f82f 	bl	8000820 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4690      	mov	r8, r2
 80017c8:	4699      	mov	r9, r3
 80017ca:	69f8      	ldr	r0, [r7, #28]
 80017cc:	f7fe fea6 	bl	800051c <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f00c fe40 	bl	800e45c <tan>
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <Motion_Ctrl+0x310>)
 80017e2:	f7fe fef3 	bl	80005cc <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <Motion_Ctrl+0x314>)
 80017f4:	f7ff f814 	bl	8000820 <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4640      	mov	r0, r8
 80017fe:	4649      	mov	r1, r9
 8001800:	f7fe fee4 	bl	80005cc <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <Motion_Ctrl+0x30c>)
 8001812:	f7fe fd25 	bl	8000260 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4620      	mov	r0, r4
 800181c:	4629      	mov	r1, r5
 800181e:	f7fe fed5 	bl	80005cc <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f9b1 	bl	8000b90 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]
        float motor_2_speed = speed_fb * ( 1 - (1/cos(theta))*(ROBOT_WIDTH * tan(theta) / ( 2* ROBOT_LENGTH) ) );
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <Motion_Ctrl+0x300>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe70 	bl	800051c <__aeabi_f2d>
 800183c:	4604      	mov	r4, r0
 800183e:	460d      	mov	r5, r1
 8001840:	69f8      	ldr	r0, [r7, #28]
 8001842:	f7fe fe6b 	bl	800051c <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f00c fdbb 	bl	800e3c8 <cos>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	f04f 0000 	mov.w	r0, #0
 800185a:	495c      	ldr	r1, [pc, #368]	; (80019cc <Motion_Ctrl+0x30c>)
 800185c:	f7fe ffe0 	bl	8000820 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	69f8      	ldr	r0, [r7, #28]
 800186a:	f7fe fe57 	bl	800051c <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f00c fdf1 	bl	800e45c <tan>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <Motion_Ctrl+0x310>)
 8001880:	f7fe fea4 	bl	80005cc <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <Motion_Ctrl+0x314>)
 8001892:	f7fe ffc5 	bl	8000820 <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4640      	mov	r0, r8
 800189c:	4649      	mov	r1, r9
 800189e:	f7fe fe95 	bl	80005cc <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	f04f 0000 	mov.w	r0, #0
 80018aa:	4948      	ldr	r1, [pc, #288]	; (80019cc <Motion_Ctrl+0x30c>)
 80018ac:	f7fe fcd6 	bl	800025c <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fe88 	bl	80005cc <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f964 	bl	8000b90 <__aeabi_d2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	617b      	str	r3, [r7, #20]



        float motor_3_speed = speed_fb * ( 1 + (ROBOT_WIDTH * tan(theta) / ( 2* ROBOT_LENGTH) ) );
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <Motion_Ctrl+0x300>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe23 	bl	800051c <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	69f8      	ldr	r0, [r7, #28]
 80018dc:	f7fe fe1e 	bl	800051c <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f00c fdb8 	bl	800e45c <tan>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <Motion_Ctrl+0x310>)
 80018f2:	f7fe fe6b 	bl	80005cc <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <Motion_Ctrl+0x314>)
 8001904:	f7fe ff8c 	bl	8000820 <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <Motion_Ctrl+0x30c>)
 8001916:	f7fe fca3 	bl	8000260 <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fe53 	bl	80005cc <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f92f 	bl	8000b90 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	613b      	str	r3, [r7, #16]
        float motor_4_speed = speed_fb * ( 1 - (ROBOT_WIDTH * tan(theta) / ( 2* ROBOT_LENGTH) ) );
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <Motion_Ctrl+0x300>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fdee 	bl	800051c <__aeabi_f2d>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	69f8      	ldr	r0, [r7, #28]
 8001946:	f7fe fde9 	bl	800051c <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f00c fd83 	bl	800e45c <tan>
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <Motion_Ctrl+0x310>)
 800195c:	f7fe fe36 	bl	80005cc <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <Motion_Ctrl+0x314>)
 800196e:	f7fe ff57 	bl	8000820 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	4914      	ldr	r1, [pc, #80]	; (80019cc <Motion_Ctrl+0x30c>)
 800197c:	f7fe fc6e 	bl	800025c <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fe20 	bl	80005cc <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f8fc 	bl	8000b90 <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]



        //Motion_Set_Speed(motor_1_speed, motor_2_speed, motor_3_speed, motor_4_speed);
        //Motion_Set_Speed(motor_3_speed, motor_4_speed, motor_3_speed, motor_4_speed);
        Motion_Set_Speed(motor_1_speed, motor_2_speed, motor_3_speed, motor_4_speed);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	6979      	ldr	r1, [r7, #20]
 80019a2:	69b8      	ldr	r0, [r7, #24]
 80019a4:	f7ff fd48 	bl	8001438 <Motion_Set_Speed>
        //Motion_Set_Speed(0, 0, 20.0, -20.0);


}
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b0:	f01b866e 	.word	0xf01b866e
 80019b4:	400921f9 	.word	0x400921f9
 80019b8:	432f0000 	.word	0x432f0000
 80019bc:	20000284 	.word	0x20000284
 80019c0:	20000288 	.word	0x20000288
 80019c4:	43340000 	.word	0x43340000
 80019c8:	2000028c 	.word	0x2000028c
 80019cc:	3ff00000 	.word	0x3ff00000
 80019d0:	40668000 	.word	0x40668000
 80019d4:	40754000 	.word	0x40754000

080019d8 <Motion_Handle>:
	;
}


void Motion_Handle(void)
{
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 80019dc:	4812      	ldr	r0, [pc, #72]	; (8001a28 <Motion_Handle+0x50>)
 80019de:	f7ff fd59 	bl	8001494 <Motion_Get_Speed>
    Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <Motion_Handle+0x54>)
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fbf6 	bl	80011d8 <__aeabi_f2iz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b21c      	sxth	r4, r3
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <Motion_Handle+0x54>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fbef 	bl	80011d8 <__aeabi_f2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21d      	sxth	r5, r3
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <Motion_Handle+0x54>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fbe8 	bl	80011d8 <__aeabi_f2iz>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b21e      	sxth	r6, r3
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <Motion_Handle+0x54>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fbe1 	bl	80011d8 <__aeabi_f2iz>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4632      	mov	r2, r6
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fca4 	bl	800136c <Motion_Set_Pwm>
}
 8001a24:	bf00      	nop
 8001a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a28:	2000024c 	.word	0x2000024c
 8001a2c:	20000254 	.word	0x20000254

08001a30 <PID_Param_Init>:
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

// 初始化PID参数
void PID_Param_Init(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
    for (int i = 0; i < MAX_MOTOR; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	e062      	b.n	8001b02 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8001a3c:	493a      	ldr	r1, [pc, #232]	; (8001b28 <PID_Param_Init+0xf8>)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <PID_Param_Init+0xf8>)
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3308      	adds	r3, #8
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 8001a66:	4930      	ldr	r1, [pc, #192]	; (8001b28 <PID_Param_Init+0xf8>)
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	3318      	adds	r3, #24
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 8001a7c:	492a      	ldr	r1, [pc, #168]	; (8001b28 <PID_Param_Init+0xf8>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	440b      	add	r3, r1
 8001a8a:	331c      	adds	r3, #28
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <PID_Param_Init+0xf8>)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3320      	adds	r3, #32
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8001aa8:	491f      	ldr	r1, [pc, #124]	; (8001b28 <PID_Param_Init+0xf8>)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3324      	adds	r3, #36	; 0x24
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8001abe:	491a      	ldr	r1, [pc, #104]	; (8001b28 <PID_Param_Init+0xf8>)
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	330c      	adds	r3, #12
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <PID_Param_Init+0xfc>)
 8001ad0:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8001ad2:	4915      	ldr	r1, [pc, #84]	; (8001b28 <PID_Param_Init+0xf8>)
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <PID_Param_Init+0x100>)
 8001ae4:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8001ae6:	4910      	ldr	r1, [pc, #64]	; (8001b28 <PID_Param_Init+0xf8>)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3314      	adds	r3, #20
 8001af6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001afa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	dd99      	ble.n	8001a3c <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <PID_Param_Init+0x104>)
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <PID_Param_Init+0x108>)
 8001b0c:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <PID_Param_Init+0x104>)
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <PID_Param_Init+0x104>)
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <PID_Param_Init+0x10c>)
 8001b1a:	60da      	str	r2, [r3, #12]

    
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000290 	.word	0x20000290
 8001b2c:	40b9999a 	.word	0x40b9999a
 8001b30:	3e4ccccd 	.word	0x3e4ccccd
 8001b34:	20000000 	.word	0x20000000
 8001b38:	3ecccccd 	.word	0x3ecccccd
 8001b3c:	3dcccccd 	.word	0x3dcccccd

08001b40 <PID_Incre_Calc>:
    return pid->target_val; // 设置当前的目标值
}

// 增量式PID计算公式
float PID_Incre_Calc(pidx_t *pid, float actual_val)
{
 8001b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
    pid->err = pid->target_val - actual_val;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6839      	ldr	r1, [r7, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f870 	bl	8000c38 <__aeabi_fsub>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]

    /*PID算法实现*/
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689c      	ldr	r4, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68dd      	ldr	r5, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff f860 	bl	8000c38 <__aeabi_fsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f7ff f965 	bl	8000e4c <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461d      	mov	r5, r3
                    + pid->Ki * pid->err 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f7ff f95b 	bl	8000e4c <__aeabi_fmul>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff f84e 	bl	8000c3c <__addsf3>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4698      	mov	r8, r3
                    + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695d      	ldr	r5, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699e      	ldr	r6, [r3, #24]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f842 	bl	8000c3c <__addsf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f7ff f83b 	bl	8000c38 <__aeabi_fsub>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f7ff f835 	bl	8000c3c <__addsf3>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f7ff f938 	bl	8000e4c <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4640      	mov	r0, r8
 8001be2:	f7ff f82b 	bl	8000c3c <__addsf3>
 8001be6:	4603      	mov	r3, r0
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) 
 8001be8:	4619      	mov	r1, r3
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff f826 	bl	8000c3c <__addsf3>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    pid->err_last = pid->err_next;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1a      	ldr	r2, [r3, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	621a      	str	r2, [r3, #32]
    
    /*返回PWM输出值*/
    if (pid->pwm_output > (MOTOR_MAX_PULSE-MOTOR_IGNORE_PULSE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <PID_Incre_Calc+0x108>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fad8 	bl	80011c4 <__aeabi_fcmpgt>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE-MOTOR_IGNORE_PULSE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <PID_Incre_Calc+0x108>)
 8001c1e:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE-MOTOR_MAX_PULSE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4909      	ldr	r1, [pc, #36]	; (8001c4c <PID_Incre_Calc+0x10c>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff faae 	bl	8001188 <__aeabi_fcmplt>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE-MOTOR_MAX_PULSE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <PID_Incre_Calc+0x10c>)
 8001c36:	609a      	str	r2, [r3, #8]
    return pid->pwm_output;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]

}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c46:	bf00      	nop
 8001c48:	446d4000 	.word	0x446d4000
 8001c4c:	c46d4000 	.word	0xc46d4000

08001c50 <PID_Calc_Motor>:
}


// PID计算输出值
void PID_Calc_Motor(motor_data_t* motor)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

	int i;
    for (i = 0; i < MAX_MOTOR; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e016      	b.n	8001c8c <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <PID_Calc_Motor+0x4c>)
 8001c6a:	1898      	adds	r0, r3, r2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7ff ff63 	bl	8001b40 <PID_Incre_Calc>
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	3204      	adds	r2, #4
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	dde5      	ble.n	8001c5e <PID_Calc_Motor+0xe>

        if(1);
    }

}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000290 	.word	0x20000290

08001ca0 <PID_Clear_Motor>:
    }
}

// 清除PID数据
void PID_Clear_Motor(uint8_t motor_id)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR) return;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d87b      	bhi.n	8001da8 <PID_Clear_Motor+0x108>

    if (motor_id == MAX_MOTOR)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d140      	bne.n	8001d38 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e039      	b.n	8001d30 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 8001cbc:	493d      	ldr	r1, [pc, #244]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3308      	adds	r3, #8
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8001cd2:	4938      	ldr	r1, [pc, #224]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3318      	adds	r3, #24
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8001ce8:	4932      	ldr	r1, [pc, #200]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	331c      	adds	r3, #28
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8001cfe:	492d      	ldr	r1, [pc, #180]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8001d14:	4927      	ldr	r1, [pc, #156]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	3324      	adds	r3, #36	; 0x24
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	ddc2      	ble.n	8001cbc <PID_Clear_Motor+0x1c>
 8001d36:	e038      	b.n	8001daa <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8001d38:	79fa      	ldrb	r2, [r7, #7]
 8001d3a:	491e      	ldr	r1, [pc, #120]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3308      	adds	r3, #8
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	4918      	ldr	r1, [pc, #96]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	4913      	ldr	r1, [pc, #76]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	331c      	adds	r3, #28
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 8001d7a:	79fa      	ldrb	r2, [r7, #7]
 8001d7c:	490d      	ldr	r1, [pc, #52]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	3320      	adds	r3, #32
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <PID_Clear_Motor+0x114>)
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3324      	adds	r3, #36	; 0x24
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e000      	b.n	8001daa <PID_Clear_Motor+0x10a>
    if (motor_id > MAX_MOTOR) return;
 8001da8:	bf00      	nop
    }
}
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000290 	.word	0x20000290

08001db8 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR) return;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d81f      	bhi.n	8001e0a <PID_Set_Motor_Target+0x52>

    if (motor_id == MAX_MOTOR)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d112      	bne.n	8001df6 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e00b      	b.n	8001dee <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8001dd6:	490f      	ldr	r1, [pc, #60]	; (8001e14 <PID_Set_Motor_Target+0x5c>)
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	ddf0      	ble.n	8001dd6 <PID_Set_Motor_Target+0x1e>
 8001df4:	e00a      	b.n	8001e0c <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4906      	ldr	r1, [pc, #24]	; (8001e14 <PID_Set_Motor_Target+0x5c>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e000      	b.n	8001e0c <PID_Set_Motor_Target+0x54>
    if (motor_id > MAX_MOTOR) return;
 8001e0a:	bf00      	nop
    }
}
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000290 	.word	0x20000290

08001e18 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <case_insensitive_strcmp+0x16>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e056      	b.n	8001ee0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d10d      	bne.n	8001e56 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e050      	b.n	8001ee0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e04a      	b.n	8001ee0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <case_insensitive_strcmp+0xd4>)
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d103      	bne.n	8001e76 <case_insensitive_strcmp+0x5e>
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	f103 0220 	add.w	r2, r3, #32
 8001e74:	e000      	b.n	8001e78 <case_insensitive_strcmp+0x60>
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	73bb      	strb	r3, [r7, #14]
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	3301      	adds	r3, #1
 8001e82:	491a      	ldr	r1, [pc, #104]	; (8001eec <case_insensitive_strcmp+0xd4>)
 8001e84:	440b      	add	r3, r1
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d102      	bne.n	8001e96 <case_insensitive_strcmp+0x7e>
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	3320      	adds	r3, #32
 8001e94:	e000      	b.n	8001e98 <case_insensitive_strcmp+0x80>
 8001e96:	7bbb      	ldrb	r3, [r7, #14]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d0d0      	beq.n	8001e3e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	737b      	strb	r3, [r7, #13]
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a11      	ldr	r2, [pc, #68]	; (8001eec <case_insensitive_strcmp+0xd4>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d103      	bne.n	8001ebc <case_insensitive_strcmp+0xa4>
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	f103 0220 	add.w	r2, r3, #32
 8001eba:	e000      	b.n	8001ebe <case_insensitive_strcmp+0xa6>
 8001ebc:	7b7a      	ldrb	r2, [r7, #13]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	733b      	strb	r3, [r7, #12]
 8001ec4:	7b3b      	ldrb	r3, [r7, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	4908      	ldr	r1, [pc, #32]	; (8001eec <case_insensitive_strcmp+0xd4>)
 8001eca:	440b      	add	r3, r1
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <case_insensitive_strcmp+0xc4>
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	3320      	adds	r3, #32
 8001eda:	e000      	b.n	8001ede <case_insensitive_strcmp+0xc6>
 8001edc:	7b3b      	ldrb	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	0800fa30 	.word	0x0800fa30

08001ef0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2028      	movs	r0, #40	; 0x28
 8001efe:	4798      	blx	r3
 8001f00:	60f8      	str	r0, [r7, #12]
    if (node)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001f08:	2228      	movs	r2, #40	; 0x28
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f00a fadb 	bl	800c4c8 <memset>
    }

    return node;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001f28:	e037      	b.n	8001f9a <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d108      	bne.n	8001f4e <cJSON_Delete+0x32>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ffe7 	bl	8001f1c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <cJSON_Delete+0x52>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <cJSON_Delete+0x90>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6912      	ldr	r2, [r2, #16]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <cJSON_Delete+0x72>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <cJSON_Delete+0x90>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a12      	ldr	r2, [r2, #32]
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <cJSON_Delete+0x90>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
        item = next;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1c4      	bne.n	8001f2a <cJSON_Delete+0xe>
    }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000001c 	.word	0x2000001c

08001fb0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001fb4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b098      	sub	sp, #96	; 0x60
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001fda:	f7ff ffe9 	bl	8001fb0 <get_decimal_point>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <parse_number+0x36>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <parse_number+0x3a>
    {
        return false;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e0a0      	b.n	800213c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ffe:	e03d      	b.n	800207c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	440b      	add	r3, r1
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b45      	cmp	r3, #69	; 0x45
 8002012:	dc17      	bgt.n	8002044 <parse_number+0x84>
 8002014:	2b2b      	cmp	r3, #43	; 0x2b
 8002016:	db40      	blt.n	800209a <parse_number+0xda>
 8002018:	3b2b      	subs	r3, #43	; 0x2b
 800201a:	2201      	movs	r2, #1
 800201c:	409a      	lsls	r2, r3
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <parse_number+0x190>)
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <parse_number+0x88>
 8002030:	f002 0308 	and.w	r3, r2, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d111      	bne.n	8002066 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8002042:	e02a      	b.n	800209a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8002044:	2b65      	cmp	r3, #101	; 0x65
 8002046:	d128      	bne.n	800209a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6899      	ldr	r1, [r3, #8]
 8002050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002052:	440b      	add	r3, r1
 8002054:	4413      	add	r3, r2
 8002056:	7819      	ldrb	r1, [r3, #0]
 8002058:	f107 0208 	add.w	r2, r7, #8
 800205c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205e:	4413      	add	r3, r2
 8002060:	460a      	mov	r2, r1
 8002062:	701a      	strb	r2, [r3, #0]
                break;
 8002064:	e007      	b.n	8002076 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8002066:	f107 0208 	add.w	r2, r7, #8
 800206a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206c:	4413      	add	r3, r2
 800206e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002072:	701a      	strb	r2, [r3, #0]
                break;
 8002074:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8002076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002078:	3301      	adds	r3, #1
 800207a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800207c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207e:	2b3e      	cmp	r3, #62	; 0x3e
 8002080:	d80d      	bhi.n	800209e <parse_number+0xde>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <parse_number+0xde>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208e:	441a      	add	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3b3      	bcc.n	8002000 <parse_number+0x40>
        }
    }
loop_end:
 8002098:	e001      	b.n	800209e <parse_number+0xde>
                goto loop_end;
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <parse_number+0xe0>
loop_end:
 800209e:	bf00      	nop
    number_c_string[i] = '\0';
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a6:	4413      	add	r3, r2
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80020ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f00a f852 	bl	800c160 <strtod>
 80020bc:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80020c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d101      	bne.n	80020ce <parse_number+0x10e>
    {
        return false; /* parse_error */
 80020ca:	2300      	movs	r3, #0
 80020cc:	e036      	b.n	800213c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020d4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80020d8:	a31b      	add	r3, pc, #108	; (adr r3, 8002148 <parse_number+0x188>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80020e2:	f7fe fcf9 	bl	8000ad8 <__aeabi_dcmpge>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	e015      	b.n	8002122 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <parse_number+0x194>)
 80020fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002100:	f7fe fce0 	bl	8000ac4 <__aeabi_dcmple>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002110:	615a      	str	r2, [r3, #20]
 8002112:	e006      	b.n	8002122 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8002114:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002118:	f7fe fcf2 	bl	8000b00 <__aeabi_d2iz>
 800211c:	4602      	mov	r2, r0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800212e:	f107 0208 	add.w	r2, r7, #8
 8002132:	1a8a      	subs	r2, r1, r2
 8002134:	441a      	add	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	609a      	str	r2, [r3, #8]
    return true;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3760      	adds	r7, #96	; 0x60
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	f3af 8000 	nop.w
 8002148:	ffc00000 	.word	0xffc00000
 800214c:	41dfffff 	.word	0x41dfffff
 8002150:	04007fe5 	.word	0x04007fe5
 8002154:	c1e00000 	.word	0xc1e00000

08002158 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	e04c      	b.n	8002208 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b2f      	cmp	r3, #47	; 0x2f
 8002178:	d90f      	bls.n	800219a <parse_hex4+0x42>
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b39      	cmp	r3, #57	; 0x39
 8002184:	d809      	bhi.n	800219a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	3b30      	subs	r3, #48	; 0x30
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e02d      	b.n	80021f6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d90f      	bls.n	80021c6 <parse_hex4+0x6e>
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b46      	cmp	r3, #70	; 0x46
 80021b0:	d809      	bhi.n	80021c6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	3b37      	subs	r3, #55	; 0x37
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e017      	b.n	80021f6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b60      	cmp	r3, #96	; 0x60
 80021d0:	d90f      	bls.n	80021f2 <parse_hex4+0x9a>
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b66      	cmp	r3, #102	; 0x66
 80021dc:	d809      	bhi.n	80021f2 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	3b57      	subs	r3, #87	; 0x57
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e001      	b.n	80021f6 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e00c      	b.n	8002210 <parse_hex4+0xb8>
        }

        if (i < 3)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d802      	bhi.n	8002202 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d9af      	bls.n	800216e <parse_hex4+0x16>
        }
    }

    return h;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b05      	cmp	r3, #5
 8002254:	f340 80b7 	ble.w	80023c6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3302      	adds	r3, #2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff7b 	bl	8002158 <parse_hex4>
 8002262:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800226a:	d304      	bcc.n	8002276 <utf16_literal_to_utf8+0x5a>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002272:	f0c0 80aa 	bcc.w	80023ca <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800227c:	d337      	bcc.n	80022ee <utf16_literal_to_utf8+0xd2>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002284:	d233      	bcs.n	80022ee <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	3306      	adds	r3, #6
 800228a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8002290:	230c      	movs	r3, #12
 8002292:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b05      	cmp	r3, #5
 800229e:	f340 8096 	ble.w	80023ce <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b5c      	cmp	r3, #92	; 0x5c
 80022a8:	f040 8093 	bne.w	80023d2 <utf16_literal_to_utf8+0x1b6>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b75      	cmp	r3, #117	; 0x75
 80022b4:	f040 808d 	bne.w	80023d2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3302      	adds	r3, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff4b 	bl	8002158 <parse_hex4>
 80022c2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80022ca:	f0c0 8084 	bcc.w	80023d6 <utf16_literal_to_utf8+0x1ba>
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80022d4:	d27f      	bcs.n	80023d6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	029a      	lsls	r2, r3, #10
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <utf16_literal_to_utf8+0x1cc>)
 80022dc:	4013      	ands	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80022ec:	e004      	b.n	80022f8 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80022ee:	2306      	movs	r3, #6
 80022f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	2b7f      	cmp	r3, #127	; 0x7f
 80022fc:	d803      	bhi.n	8002306 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002304:	e01f      	b.n	8002346 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800230c:	d206      	bcs.n	800231c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800230e:	2302      	movs	r3, #2
 8002310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8002314:	23c0      	movs	r3, #192	; 0xc0
 8002316:	f887 3020 	strb.w	r3, [r7, #32]
 800231a:	e014      	b.n	8002346 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002322:	d206      	bcs.n	8002332 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8002324:	2303      	movs	r3, #3
 8002326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800232a:	23e0      	movs	r3, #224	; 0xe0
 800232c:	f887 3020 	strb.w	r3, [r7, #32]
 8002330:	e009      	b.n	8002346 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002338:	d24f      	bcs.n	80023da <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800233a:	2304      	movs	r3, #4
 800233c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8002340:	23f0      	movs	r3, #240	; 0xf0
 8002342:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800234a:	3b01      	subs	r3, #1
 800234c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002350:	e015      	b.n	800237e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800235a:	b2da      	uxtb	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002364:	440b      	add	r3, r1
 8002366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002378:	3b01      	subs	r3, #1
 800237a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800237e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e5      	bne.n	8002352 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8002386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800238a:	2b01      	cmp	r3, #1
 800238c:	d909      	bls.n	80023a2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	b2d9      	uxtb	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f897 2020 	ldrb.w	r2, [r7, #32]
 800239a:	430a      	orrs	r2, r1
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e007      	b.n	80023b2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ba:	441a      	add	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80023c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80023c4:	e00b      	b.n	80023de <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80023c6:	bf00      	nop
 80023c8:	e008      	b.n	80023dc <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80023ca:	bf00      	nop
 80023cc:	e006      	b.n	80023dc <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80023ce:	bf00      	nop
 80023d0:	e004      	b.n	80023dc <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80023d2:	bf00      	nop
 80023d4:	e002      	b.n	80023dc <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80023d6:	bf00      	nop
 80023d8:	e000      	b.n	80023dc <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80023da:	bf00      	nop

fail:
    return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	000ffc00 	.word	0x000ffc00

080023ec <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	3301      	adds	r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	3301      	adds	r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b22      	cmp	r3, #34	; 0x22
 8002428:	f040 8103 	bne.w	8002632 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002434:	e017      	b.n	8002466 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b5c      	cmp	r3, #92	; 0x5c
 800243c:	d110      	bne.n	8002460 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	461a      	mov	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	f080 80f1 	bcs.w	8002636 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	3301      	adds	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
                input_end++;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	3301      	adds	r3, #1
 800245e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	3301      	adds	r3, #1
 8002464:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a3a      	ldr	r2, [r7, #32]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	461a      	mov	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d203      	bcs.n	8002480 <parse_string+0x94>
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b22      	cmp	r3, #34	; 0x22
 800247e:	d1da      	bne.n	8002436 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	f080 80d3 	bcs.w	800263a <parse_string+0x24e>
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b22      	cmp	r3, #34	; 0x22
 800249a:	f040 80ce 	bne.w	800263a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4413      	add	r3, r2
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	3201      	adds	r2, #1
 80024bc:	4610      	mov	r0, r2
 80024be:	4798      	blx	r3
 80024c0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80ba 	beq.w	800263e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80024ce:	e094      	b.n	80025fa <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b5c      	cmp	r3, #92	; 0x5c
 80024d6:	d008      	beq.n	80024ea <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	1c53      	adds	r3, r2, #1
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1c59      	adds	r1, r3, #1
 80024e2:	60f9      	str	r1, [r7, #12]
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e087      	b.n	80025fa <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80024ea:	2302      	movs	r3, #2
 80024ec:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f340 80a4 	ble.w	8002642 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	3301      	adds	r3, #1
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b75      	cmp	r3, #117	; 0x75
 8002502:	f300 80a0 	bgt.w	8002646 <parse_string+0x25a>
 8002506:	2b5c      	cmp	r3, #92	; 0x5c
 8002508:	da04      	bge.n	8002514 <parse_string+0x128>
 800250a:	2b22      	cmp	r3, #34	; 0x22
 800250c:	d05c      	beq.n	80025c8 <parse_string+0x1dc>
 800250e:	2b2f      	cmp	r3, #47	; 0x2f
 8002510:	d05a      	beq.n	80025c8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8002512:	e098      	b.n	8002646 <parse_string+0x25a>
            switch (input_pointer[1])
 8002514:	3b5c      	subs	r3, #92	; 0x5c
 8002516:	2b19      	cmp	r3, #25
 8002518:	f200 8095 	bhi.w	8002646 <parse_string+0x25a>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <parse_string+0x138>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	080025c9 	.word	0x080025c9
 8002528:	08002647 	.word	0x08002647
 800252c:	08002647 	.word	0x08002647
 8002530:	08002647 	.word	0x08002647
 8002534:	08002647 	.word	0x08002647
 8002538:	08002647 	.word	0x08002647
 800253c:	0800258d 	.word	0x0800258d
 8002540:	08002647 	.word	0x08002647
 8002544:	08002647 	.word	0x08002647
 8002548:	08002647 	.word	0x08002647
 800254c:	08002599 	.word	0x08002599
 8002550:	08002647 	.word	0x08002647
 8002554:	08002647 	.word	0x08002647
 8002558:	08002647 	.word	0x08002647
 800255c:	08002647 	.word	0x08002647
 8002560:	08002647 	.word	0x08002647
 8002564:	08002647 	.word	0x08002647
 8002568:	08002647 	.word	0x08002647
 800256c:	080025a5 	.word	0x080025a5
 8002570:	08002647 	.word	0x08002647
 8002574:	08002647 	.word	0x08002647
 8002578:	08002647 	.word	0x08002647
 800257c:	080025b1 	.word	0x080025b1
 8002580:	08002647 	.word	0x08002647
 8002584:	080025bd 	.word	0x080025bd
 8002588:	080025d9 	.word	0x080025d9
                    *output_pointer++ = '\b';
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60fa      	str	r2, [r7, #12]
 8002592:	2208      	movs	r2, #8
 8002594:	701a      	strb	r2, [r3, #0]
                    break;
 8002596:	e02c      	b.n	80025f2 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60fa      	str	r2, [r7, #12]
 800259e:	220c      	movs	r2, #12
 80025a0:	701a      	strb	r2, [r3, #0]
                    break;
 80025a2:	e026      	b.n	80025f2 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60fa      	str	r2, [r7, #12]
 80025aa:	220a      	movs	r2, #10
 80025ac:	701a      	strb	r2, [r3, #0]
                    break;
 80025ae:	e020      	b.n	80025f2 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60fa      	str	r2, [r7, #12]
 80025b6:	220d      	movs	r2, #13
 80025b8:	701a      	strb	r2, [r3, #0]
                    break;
 80025ba:	e01a      	b.n	80025f2 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	60fa      	str	r2, [r7, #12]
 80025c2:	2209      	movs	r2, #9
 80025c4:	701a      	strb	r2, [r3, #0]
                    break;
 80025c6:	e014      	b.n	80025f2 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1c59      	adds	r1, r3, #1
 80025d0:	60f9      	str	r1, [r7, #12]
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	701a      	strb	r2, [r3, #0]
                    break;
 80025d6:	e00c      	b.n	80025f2 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	461a      	mov	r2, r3
 80025de:	6a39      	ldr	r1, [r7, #32]
 80025e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025e2:	f7ff fe1b 	bl	800221c <utf16_literal_to_utf8>
 80025e6:	4603      	mov	r3, r0
 80025e8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02c      	beq.n	800264a <parse_string+0x25e>
                    break;
 80025f0:	bf00      	nop
            }
            input_pointer += sequence_length;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	4413      	add	r3, r2
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80025fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	429a      	cmp	r2, r3
 8002600:	f4ff af66 	bcc.w	80024d0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2210      	movs	r2, #16
 800260e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a3a      	ldr	r2, [r7, #32]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	461a      	mov	r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	609a      	str	r2, [r3, #8]

    return true;
 800262e:	2301      	movs	r3, #1
 8002630:	e01e      	b.n	8002670 <parse_string+0x284>
        goto fail;
 8002632:	bf00      	nop
 8002634:	e00a      	b.n	800264c <parse_string+0x260>
                    goto fail;
 8002636:	bf00      	nop
 8002638:	e008      	b.n	800264c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800263a:	bf00      	nop
 800263c:	e006      	b.n	800264c <parse_string+0x260>
            goto fail; /* allocation failure */
 800263e:	bf00      	nop
 8002640:	e004      	b.n	800264c <parse_string+0x260>
                goto fail;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <parse_string+0x260>
                    goto fail;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <parse_string+0x260>
                        goto fail;
 800264a:	bf00      	nop

fail:
    if (output != NULL)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	69f8      	ldr	r0, [r7, #28]
 8002658:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	461a      	mov	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	609a      	str	r2, [r3, #8]
    }

    return false;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <buffer_skip_whitespace+0x16>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	e02c      	b.n	80026ec <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <buffer_skip_whitespace+0x2c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d306      	bcc.n	80026b2 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	e021      	b.n	80026ec <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <buffer_skip_whitespace+0x5c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <buffer_skip_whitespace+0x5c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d9e9      	bls.n	80026a8 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d104      	bne.n	80026ea <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80026ea:	687b      	ldr	r3, [r7, #4]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <skip_utf8_bom+0x1e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <skip_utf8_bom+0x1e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <skip_utf8_bom+0x22>
    {
        return NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	e01c      	b.n	8002754 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d018      	beq.n	8002752 <skip_utf8_bom+0x5a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	1d1a      	adds	r2, r3, #4
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d211      	bcs.n	8002752 <skip_utf8_bom+0x5a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4413      	add	r3, r2
 8002738:	2203      	movs	r2, #3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <skip_utf8_bom+0x64>)
 800273c:	4618      	mov	r0, r3
 800273e:	f009 fecb 	bl	800c4d8 <strncmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	1cda      	adds	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002752:	687b      	ldr	r3, [r7, #4]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	0800f858 	.word	0x0800f858

08002760 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	e00c      	b.n	8002790 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7fd fd64 	bl	8000244 <strlen>
 800277c:	4603      	mov	r3, r0
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f805 	bl	8002798 <cJSON_ParseWithLengthOpts>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08e      	sub	sp, #56	; 0x38
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80027a6:	f107 0318 	add.w	r3, r7, #24
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <cJSON_ParseWithLengthOpts+0x12c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80027c4:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <cJSON_ParseWithLengthOpts+0x12c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d042      	beq.n	8002856 <cJSON_ParseWithLengthOpts+0xbe>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03f      	beq.n	8002856 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <cJSON_ParseWithLengthOpts+0x130>)
 80027e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80027ee:	4836      	ldr	r0, [pc, #216]	; (80028c8 <cJSON_ParseWithLengthOpts+0x130>)
 80027f0:	f7ff fb7e 	bl	8001ef0 <cJSON_New_Item>
 80027f4:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02e      	beq.n	800285a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80027fc:	f107 0318 	add.w	r3, r7, #24
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff79 	bl	80026f8 <skip_utf8_bom>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff35 	bl	8002678 <buffer_skip_whitespace>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002814:	f000 f868 	bl	80028e8 <parse_value>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01f      	beq.n	800285e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00e      	beq.n	8002842 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002824:	f107 0318 	add.w	r3, r7, #24
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff25 	bl	8002678 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	429a      	cmp	r2, r3
 8002834:	d215      	bcs.n	8002862 <cJSON_ParseWithLengthOpts+0xca>
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	e031      	b.n	80028ba <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002856:	bf00      	nop
 8002858:	e004      	b.n	8002864 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800285a:	bf00      	nop
 800285c:	e002      	b.n	8002864 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002862:	bf00      	nop

fail:
    if (item != NULL)
 8002864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800286a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800286c:	f7ff fb56 	bl	8001f1c <cJSON_Delete>
    }

    if (value != NULL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d020      	beq.n	80028b8 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	429a      	cmp	r2, r3
 8002884:	d202      	bcs.n	800288c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e005      	b.n	8002898 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b01      	subs	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	441a      	add	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <cJSON_ParseWithLengthOpts+0x12c>)
 80028aa:	461a      	mov	r2, r3
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028b4:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3738      	adds	r7, #56	; 0x38
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000330 	.word	0x20000330
 80028c8:	2000001c 	.word	0x2000001c

080028cc <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff41 	bl	8002760 <cJSON_ParseWithOpts>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <parse_value+0x18>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <parse_value+0x1c>
    {
        return false; /* no input */
 8002900:	2300      	movs	r3, #0
 8002902:	e0d2      	b.n	8002aaa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01d      	beq.n	8002946 <parse_value+0x5e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d816      	bhi.n	8002946 <parse_value+0x5e>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4413      	add	r3, r2
 8002922:	2204      	movs	r2, #4
 8002924:	4963      	ldr	r1, [pc, #396]	; (8002ab4 <parse_value+0x1cc>)
 8002926:	4618      	mov	r0, r3
 8002928:	f009 fdd6 	bl	800c4d8 <strncmp>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	1d1a      	adds	r2, r3, #4
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	609a      	str	r2, [r3, #8]
        return true;
 8002942:	2301      	movs	r3, #1
 8002944:	e0b1      	b.n	8002aaa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01d      	beq.n	8002988 <parse_value+0xa0>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	1d5a      	adds	r2, r3, #5
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	d816      	bhi.n	8002988 <parse_value+0xa0>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4413      	add	r3, r2
 8002964:	2205      	movs	r2, #5
 8002966:	4954      	ldr	r1, [pc, #336]	; (8002ab8 <parse_value+0x1d0>)
 8002968:	4618      	mov	r0, r3
 800296a:	f009 fdb5 	bl	800c4d8 <strncmp>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	1d5a      	adds	r2, r3, #5
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	609a      	str	r2, [r3, #8]
        return true;
 8002984:	2301      	movs	r3, #1
 8002986:	e090      	b.n	8002aaa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <parse_value+0xe8>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	1d1a      	adds	r2, r3, #4
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d819      	bhi.n	80029d0 <parse_value+0xe8>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4413      	add	r3, r2
 80029a6:	2204      	movs	r2, #4
 80029a8:	4944      	ldr	r1, [pc, #272]	; (8002abc <parse_value+0x1d4>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f009 fd94 	bl	800c4d8 <strncmp>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	1d1a      	adds	r2, r3, #4
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	609a      	str	r2, [r3, #8]
        return true;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e06c      	b.n	8002aaa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d013      	beq.n	80029fe <parse_value+0x116>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20d      	bcs.n	80029fe <parse_value+0x116>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b22      	cmp	r3, #34	; 0x22
 80029f0:	d105      	bne.n	80029fe <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fcf9 	bl	80023ec <parse_string>
 80029fa:	4603      	mov	r3, r0
 80029fc:	e055      	b.n	8002aaa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <parse_value+0x164>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d21d      	bcs.n	8002a4c <parse_value+0x164>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8002a1e:	d00f      	beq.n	8002a40 <parse_value+0x158>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a2e:	d90d      	bls.n	8002a4c <parse_value+0x164>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b39      	cmp	r3, #57	; 0x39
 8002a3e:	d805      	bhi.n	8002a4c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fabc 	bl	8001fc0 <parse_number>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	e02e      	b.n	8002aaa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d013      	beq.n	8002a7a <parse_value+0x192>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20d      	bcs.n	8002a7a <parse_value+0x192>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4413      	add	r3, r2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b5b      	cmp	r3, #91	; 0x5b
 8002a6c:	d105      	bne.n	8002a7a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f825 	bl	8002ac0 <parse_array>
 8002a76:	4603      	mov	r3, r0
 8002a78:	e017      	b.n	8002aaa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <parse_value+0x1c0>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d20d      	bcs.n	8002aa8 <parse_value+0x1c0>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4413      	add	r3, r2
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b7b      	cmp	r3, #123	; 0x7b
 8002a9a:	d105      	bne.n	8002aa8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002a9c:	6839      	ldr	r1, [r7, #0]
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8d2 	bl	8002c48 <parse_object>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	e000      	b.n	8002aaa <parse_value+0x1c2>
    }

    return false;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	0800f82c 	.word	0x0800f82c
 8002ab8:	0800f85c 	.word	0x0800f85c
 8002abc:	0800f864 	.word	0x0800f864

08002ac0 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ada:	d301      	bcc.n	8002ae0 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002adc:	2300      	movs	r3, #0
 8002ade:	e0af      	b.n	8002c40 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b5b      	cmp	r3, #91	; 0x5b
 8002af8:	f040 8094 	bne.w	8002c24 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	f7ff fdb6 	bl	8002678 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <parse_array+0x6e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d207      	bcs.n	8002b2e <parse_array+0x6e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b5d      	cmp	r3, #93	; 0x5d
 8002b2c:	d061      	beq.n	8002bf2 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <parse_array+0x80>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d305      	bcc.n	8002b4c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	609a      	str	r2, [r3, #8]
        goto fail;
 8002b4a:	e072      	b.n	8002c32 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	3310      	adds	r3, #16
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f9c8 	bl	8001ef0 <cJSON_New_Item>
 8002b60:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d05f      	beq.n	8002c28 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	e007      	b.n	8002b88 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f7ff fd70 	bl	8002678 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	6938      	ldr	r0, [r7, #16]
 8002b9c:	f7ff fea4 	bl	80028e8 <parse_value>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d042      	beq.n	8002c2c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f7ff fd66 	bl	8002678 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <parse_array+0x10e>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d207      	bcs.n	8002bce <parse_array+0x10e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b2c      	cmp	r3, #44	; 0x2c
 8002bcc:	d0c3      	beq.n	8002b56 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02d      	beq.n	8002c30 <parse_array+0x170>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d227      	bcs.n	8002c30 <parse_array+0x170>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4413      	add	r3, r2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b5d      	cmp	r3, #93	; 0x5d
 8002bee:	d11f      	bne.n	8002c30 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002bf0:	e000      	b.n	8002bf4 <parse_array+0x134>
        goto success;
 8002bf2:	bf00      	nop
    input_buffer->depth--;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <parse_array+0x14a>
        head->prev = current_item;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]

    return true;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00d      	b.n	8002c40 <parse_array+0x180>
        goto fail;
 8002c24:	bf00      	nop
 8002c26:	e004      	b.n	8002c32 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002c28:	bf00      	nop
 8002c2a:	e002      	b.n	8002c32 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002c30:	bf00      	nop

fail:
    if (head != NULL)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7ff f96f 	bl	8001f1c <cJSON_Delete>
    }

    return false;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c62:	d301      	bcc.n	8002c68 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002c64:	2300      	movs	r3, #0
 8002c66:	e0ea      	b.n	8002e3e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80d0 	beq.w	8002e1a <parse_object+0x1d2>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	f080 80c9 	bcs.w	8002e1a <parse_object+0x1d2>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b7b      	cmp	r3, #123	; 0x7b
 8002c96:	f040 80c0 	bne.w	8002e1a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	f7ff fce7 	bl	8002678 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00e      	beq.n	8002cce <parse_object+0x86>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d208      	bcs.n	8002cce <parse_object+0x86>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b7d      	cmp	r3, #125	; 0x7d
 8002cca:	f000 808d 	beq.w	8002de8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <parse_object+0x98>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d305      	bcc.n	8002cec <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	609a      	str	r2, [r3, #8]
        goto fail;
 8002cea:	e0a1      	b.n	8002e30 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3310      	adds	r3, #16
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f8f8 	bl	8001ef0 <cJSON_New_Item>
 8002d00:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 808a 	beq.w	8002e1e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e007      	b.n	8002d2a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	f7ff fc9f 	bl	8002678 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	6938      	ldr	r0, [r7, #16]
 8002d3e:	f7ff fb55 	bl	80023ec <parse_string>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d06c      	beq.n	8002e22 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f7ff fc95 	bl	8002678 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d061      	beq.n	8002e26 <parse_object+0x1de>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d25b      	bcs.n	8002e26 <parse_object+0x1de>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b3a      	cmp	r3, #58	; 0x3a
 8002d7c:	d153      	bne.n	8002e26 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002d88:	6838      	ldr	r0, [r7, #0]
 8002d8a:	f7ff fc75 	bl	8002678 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	6938      	ldr	r0, [r7, #16]
 8002d92:	f7ff fda9 	bl	80028e8 <parse_value>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d046      	beq.n	8002e2a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	f7ff fc6b 	bl	8002678 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <parse_object+0x17c>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <parse_object+0x17c>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b2c      	cmp	r3, #44	; 0x2c
 8002dc2:	d098      	beq.n	8002cf6 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d031      	beq.n	8002e2e <parse_object+0x1e6>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d22b      	bcs.n	8002e2e <parse_object+0x1e6>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b7d      	cmp	r3, #125	; 0x7d
 8002de4:	d123      	bne.n	8002e2e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002de6:	e000      	b.n	8002dea <parse_object+0x1a2>
        goto success; /* empty object */
 8002de8:	bf00      	nop
    input_buffer->depth--;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	1e5a      	subs	r2, r3, #1
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <parse_object+0x1b8>
        head->prev = current_item;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	609a      	str	r2, [r3, #8]
    return true;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e011      	b.n	8002e3e <parse_object+0x1f6>
        goto fail; /* not an object */
 8002e1a:	bf00      	nop
 8002e1c:	e008      	b.n	8002e30 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002e1e:	bf00      	nop
 8002e20:	e006      	b.n	8002e30 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002e22:	bf00      	nop
 8002e24:	e004      	b.n	8002e30 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002e2e:	bf00      	nop

fail:
    if (head != NULL)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff f870 	bl	8001f1c <cJSON_Delete>
    }

    return false;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <get_object_item+0x1c>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <get_object_item+0x20>
    {
        return NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e033      	b.n	8002ece <get_object_item+0x88>
    }

    current_element = object->child;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d017      	beq.n	8002ea2 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002e72:	e002      	b.n	8002e7a <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <get_object_item+0x74>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <get_object_item+0x74>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f7fd f9ce 	bl	8000230 <strcmp>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ec      	bne.n	8002e74 <get_object_item+0x2e>
 8002e9a:	e00e      	b.n	8002eba <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <get_object_item+0x74>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4619      	mov	r1, r3
 8002eae:	68b8      	ldr	r0, [r7, #8]
 8002eb0:	f7fe ffb2 	bl	8001e18 <case_insensitive_strcmp>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <get_object_item+0x82>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <get_object_item+0x86>
        return NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <get_object_item+0x88>
    }

    return current_element;
 8002ecc:	697b      	ldr	r3, [r7, #20]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ffae 	bl	8002e46 <get_object_item>
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <cJSON_IsNumber+0x12>
    {
        return false;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e007      	b.n	8002f16 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <_write>:


extern UART_HandleTypeDef huart1;


int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]

	if( HAL_UART_Transmit(&huart1, ptr, len, len) == HAL_OK ) return len;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	4806      	ldr	r0, [pc, #24]	; (8002f50 <_write+0x30>)
 8002f36:	f004 fd1c 	bl	8007972 <HAL_UART_Transmit>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <_write+0x24>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	e000      	b.n	8002f46 <_write+0x26>
	    else return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000055c 	.word	0x2000055c

08002f54 <Get_CMD_Flag>:
	return New_CMD_length;
}


uint8_t Get_CMD_Flag(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
	return New_CMD_flag;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <Get_CMD_Flag+0x10>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	20000338 	.word	0x20000338

08002f68 <Set_CMD_Flag>:

void Set_CMD_Flag(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	New_CMD_flag = 1;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <Set_CMD_Flag+0x14>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000338 	.word	0x20000338

08002f80 <Clear_CMD_Flag>:

void Clear_CMD_Flag(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
	New_CMD_flag = 0;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <Clear_CMD_Flag+0x14>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000338 	.word	0x20000338

08002f98 <u_Data_Parse>:

#define CMD_SPEED 0
#define CMD_LED 1

void u_Data_Parse(uint8_t *data_buf, uint8_t num)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0b8      	sub	sp, #224	; 0xe0
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]

	char buff[200];
	memset(buff,0,sizeof(buff));
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	22c8      	movs	r2, #200	; 0xc8
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f009 fa8b 	bl	800c4c8 <memset>
	memcpy(buff, data_buf, num);
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	f107 0308 	add.w	r3, r7, #8
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f009 fb76 	bl	800c6ac <memcpy>

	// json parsing.
	cJSON *ser_json = cJSON_Parse(buff);
 8002fc0:	f107 0308 	add.w	r3, r7, #8
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fc81 	bl	80028cc <cJSON_Parse>
 8002fca:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	cJSON *name = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	if( ser_json )
 8002fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d063      	beq.n	80030a4 <u_Data_Parse+0x10c>
	{
		name = cJSON_GetObjectItemCaseSensitive(ser_json, "vx");
 8002fdc:	4988      	ldr	r1, [pc, #544]	; (8003200 <u_Data_Parse+0x268>)
 8002fde:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002fe2:	f7ff ff78 	bl	8002ed6 <cJSON_GetObjectItemCaseSensitive>
 8002fe6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (cJSON_IsNumber(name) )
 8002fea:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002fee:	f7ff ff81 	bl	8002ef4 <cJSON_IsNumber>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <u_Data_Parse+0x6a>
		{
			sercmd.vx = name->valueint;
 8002ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	; (8003204 <u_Data_Parse+0x26c>)
 8003000:	6053      	str	r3, [r2, #4]
		}
		name = cJSON_GetObjectItemCaseSensitive(ser_json, "vy");
 8003002:	4981      	ldr	r1, [pc, #516]	; (8003208 <u_Data_Parse+0x270>)
 8003004:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003008:	f7ff ff65 	bl	8002ed6 <cJSON_GetObjectItemCaseSensitive>
 800300c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (cJSON_IsNumber(name) )
 8003010:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003014:	f7ff ff6e 	bl	8002ef4 <cJSON_IsNumber>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <u_Data_Parse+0x90>
		{
			sercmd.vy = name->valueint;
 800301e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4a77      	ldr	r2, [pc, #476]	; (8003204 <u_Data_Parse+0x26c>)
 8003026:	6093      	str	r3, [r2, #8]
		}
		name = cJSON_GetObjectItemCaseSensitive(ser_json, "angle");
 8003028:	4978      	ldr	r1, [pc, #480]	; (800320c <u_Data_Parse+0x274>)
 800302a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800302e:	f7ff ff52 	bl	8002ed6 <cJSON_GetObjectItemCaseSensitive>
 8003032:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (cJSON_IsNumber(name) )
 8003036:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800303a:	f7ff ff5b 	bl	8002ef4 <cJSON_IsNumber>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <u_Data_Parse+0xb6>
		{
			sercmd.angle = name->valueint;
 8003044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <u_Data_Parse+0x26c>)
 800304c:	60d3      	str	r3, [r2, #12]
		}
		name = cJSON_GetObjectItemCaseSensitive(ser_json, "rot");
 800304e:	4970      	ldr	r1, [pc, #448]	; (8003210 <u_Data_Parse+0x278>)
 8003050:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8003054:	f7ff ff3f 	bl	8002ed6 <cJSON_GetObjectItemCaseSensitive>
 8003058:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (cJSON_IsNumber(name) )
 800305c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003060:	f7ff ff48 	bl	8002ef4 <cJSON_IsNumber>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <u_Data_Parse+0xdc>
		{
			sercmd.rot = name->valueint;
 800306a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4a64      	ldr	r2, [pc, #400]	; (8003204 <u_Data_Parse+0x26c>)
 8003072:	6113      	str	r3, [r2, #16]
		}
		name = cJSON_GetObjectItemCaseSensitive(ser_json, "cmd");
 8003074:	4967      	ldr	r1, [pc, #412]	; (8003214 <u_Data_Parse+0x27c>)
 8003076:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800307a:	f7ff ff2c 	bl	8002ed6 <cJSON_GetObjectItemCaseSensitive>
 800307e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (cJSON_IsNumber(name) )
 8003082:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003086:	f7ff ff35 	bl	8002ef4 <cJSON_IsNumber>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <u_Data_Parse+0x104>
		{
			sercmd.cmd_no = name->valueint;
 8003090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <u_Data_Parse+0x26c>)
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e003      	b.n	80030a4 <u_Data_Parse+0x10c>
		}
		else sercmd.cmd_no = 999;
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <u_Data_Parse+0x26c>)
 800309e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030a2:	601a      	str	r2, [r3, #0]
	}
	cJSON_Delete(ser_json);
 80030a4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80030a8:	f7fe ff38 	bl	8001f1c <cJSON_Delete>
	cJSON_Delete(name);
 80030ac:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80030b0:	f7fe ff34 	bl	8001f1c <cJSON_Delete>

		//end of parsing

	//speed command
	if(sercmd.cmd_no == CMD_SPEED)
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <u_Data_Parse+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d123      	bne.n	8003104 <u_Data_Parse+0x16c>
	{

		int16_t Vx_recv = sercmd.vx;
 80030bc:	4b51      	ldr	r3, [pc, #324]	; (8003204 <u_Data_Parse+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		int16_t Vy_recv = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
		int16_t Vz_recv = sercmd.angle;
 80030ca:	4b4e      	ldr	r3, [pc, #312]	; (8003204 <u_Data_Parse+0x26c>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

		DEBUG("motion: %d, %d, %d\n", Vx_recv, Vy_recv, Vz_recv);

		if (Vx_recv == 0 && Vy_recv == 0 && Vz_recv == 0)
 80030d2:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <u_Data_Parse+0x158>
 80030da:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <u_Data_Parse+0x158>
 80030e2:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <u_Data_Parse+0x158>
		{
			Motion_Stop();
 80030ea:	f7fe f992 	bl	8001412 <Motion_Stop>
			Motion_Set_Speed(0, 0, 0, sercmd.vy);
		else
			;
	}

}
 80030ee:	e083      	b.n	80031f8 <u_Data_Parse+0x260>
			Motion_Ctrl(Vx_recv, Vy_recv, Vz_recv);
 80030f0:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	; 0xd2
 80030f4:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 80030f8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fadf 	bl	80016c0 <Motion_Ctrl>
}
 8003102:	e079      	b.n	80031f8 <u_Data_Parse+0x260>
	else if( sercmd.cmd_no == CMD_LED )
 8003104:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <u_Data_Parse+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d127      	bne.n	800315c <u_Data_Parse+0x1c4>
		if(sercmd.vx == 0)
 800310c:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <u_Data_Parse+0x26c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <u_Data_Parse+0x1a0>
			if(sercmd.vy == 0)
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <u_Data_Parse+0x26c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <u_Data_Parse+0x192>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800311c:	2201      	movs	r2, #1
 800311e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003122:	483d      	ldr	r0, [pc, #244]	; (8003218 <u_Data_Parse+0x280>)
 8003124:	f002 fdf6 	bl	8005d14 <HAL_GPIO_WritePin>
}
 8003128:	e066      	b.n	80031f8 <u_Data_Parse+0x260>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800312a:	2200      	movs	r2, #0
 800312c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003130:	4839      	ldr	r0, [pc, #228]	; (8003218 <u_Data_Parse+0x280>)
 8003132:	f002 fdef 	bl	8005d14 <HAL_GPIO_WritePin>
}
 8003136:	e05f      	b.n	80031f8 <u_Data_Parse+0x260>
			if(sercmd.vy == 0)
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <u_Data_Parse+0x26c>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <u_Data_Parse+0x1b6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8003140:	2201      	movs	r2, #1
 8003142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003146:	4834      	ldr	r0, [pc, #208]	; (8003218 <u_Data_Parse+0x280>)
 8003148:	f002 fde4 	bl	8005d14 <HAL_GPIO_WritePin>
}
 800314c:	e054      	b.n	80031f8 <u_Data_Parse+0x260>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800314e:	2200      	movs	r2, #0
 8003150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003154:	4830      	ldr	r0, [pc, #192]	; (8003218 <u_Data_Parse+0x280>)
 8003156:	f002 fddd 	bl	8005d14 <HAL_GPIO_WritePin>
}
 800315a:	e04d      	b.n	80031f8 <u_Data_Parse+0x260>
	else if( sercmd.cmd_no == 3 )
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <u_Data_Parse+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d149      	bne.n	80031f8 <u_Data_Parse+0x260>
		if(sercmd.vx == 0)
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <u_Data_Parse+0x26c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10d      	bne.n	8003188 <u_Data_Parse+0x1f0>
			Motion_Set_Speed(sercmd.vy, 0, 0, 0);
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <u_Data_Parse+0x26c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd fe17 	bl	8000da4 <__aeabi_i2f>
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	f7fe f959 	bl	8001438 <Motion_Set_Speed>
}
 8003186:	e037      	b.n	80031f8 <u_Data_Parse+0x260>
		else if(sercmd.vx == 1)
 8003188:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <u_Data_Parse+0x26c>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10e      	bne.n	80031ae <u_Data_Parse+0x216>
			Motion_Set_Speed(0, sercmd.vy, 0, 0);
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <u_Data_Parse+0x26c>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fe05 	bl	8000da4 <__aeabi_i2f>
 800319a:	4601      	mov	r1, r0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f7fe f946 	bl	8001438 <Motion_Set_Speed>
}
 80031ac:	e024      	b.n	80031f8 <u_Data_Parse+0x260>
		else if(sercmd.vx == 2)
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <u_Data_Parse+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d10e      	bne.n	80031d4 <u_Data_Parse+0x23c>
			Motion_Set_Speed(0, 0, sercmd.vy, 0);
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <u_Data_Parse+0x26c>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fdf2 	bl	8000da4 <__aeabi_i2f>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f7fe f933 	bl	8001438 <Motion_Set_Speed>
}
 80031d2:	e011      	b.n	80031f8 <u_Data_Parse+0x260>
		else if(sercmd.vx == 3)
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <u_Data_Parse+0x26c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d10d      	bne.n	80031f8 <u_Data_Parse+0x260>
			Motion_Set_Speed(0, 0, 0, sercmd.vy);
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <u_Data_Parse+0x26c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fddf 	bl	8000da4 <__aeabi_i2f>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	f04f 0000 	mov.w	r0, #0
 80031f4:	f7fe f920 	bl	8001438 <Motion_Set_Speed>
}
 80031f8:	bf00      	nop
 80031fa:	37e0      	adds	r7, #224	; 0xe0
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	0800f86c 	.word	0x0800f86c
 8003204:	2000033c 	.word	0x2000033c
 8003208:	0800f870 	.word	0x0800f870
 800320c:	0800f874 	.word	0x0800f874
 8003210:	0800f87c 	.word	0x0800f87c
 8003214:	0800f880 	.word	0x0800f880
 8003218:	40010c00 	.word	0x40010c00

0800321c <Encoder_Read_CNT>:
 * @Note: 
 * @Parm: �����ID��:MOTOR_ID_M1, MOTOR_ID_M2, MOTOR_ID_M3, MOTOR_ID_M4
 * @Retval: ���ر�������������
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	81fb      	strh	r3, [r7, #14]
	switch(Motor_id)
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d829      	bhi.n	8003284 <Encoder_Read_CNT+0x68>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <Encoder_Read_CNT+0x1c>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003249 	.word	0x08003249
 800323c:	0800325b 	.word	0x0800325b
 8003240:	08003269 	.word	0x08003269
 8003244:	08003277 	.word	0x08003277
	{
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0x0000; break;
 8003248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	81fb      	strh	r3, [r7, #14]
 8003250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003254:	2200      	movs	r2, #0
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
 8003258:	e015      	b.n	8003286 <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM3 -> CNT; TIM3 -> CNT = 0x0000; break;
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <Encoder_Read_CNT+0x78>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	81fb      	strh	r3, [r7, #14]
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <Encoder_Read_CNT+0x78>)
 8003262:	2200      	movs	r2, #0
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
 8003266:	e00e      	b.n	8003286 <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M3:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0x0000; break;
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <Encoder_Read_CNT+0x7c>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	81fb      	strh	r3, [r7, #14]
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <Encoder_Read_CNT+0x7c>)
 8003270:	2200      	movs	r2, #0
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
 8003274:	e007      	b.n	8003286 <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M4:  Encoder_TIM = (short)TIM5 -> CNT; TIM5 -> CNT = 0x0000; break;
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <Encoder_Read_CNT+0x80>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	81fb      	strh	r3, [r7, #14]
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <Encoder_Read_CNT+0x80>)
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
 8003282:	e000      	b.n	8003286 <Encoder_Read_CNT+0x6a>
	default:  break;
 8003284:	bf00      	nop
	}
	return Encoder_TIM;
 8003286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00

080032a0 <Encoder_Get_ALL>:
	return 0;
}

// ��ȡ�����������ܹ�����·������������
void Encoder_Get_ALL(int* Encoder_all)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <Encoder_Get_ALL+0x38>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <Encoder_Get_ALL+0x3c>)
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3308      	adds	r3, #8
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <Encoder_Get_ALL+0x40>)
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	330c      	adds	r3, #12
 80032c8:	4a06      	ldr	r2, [pc, #24]	; (80032e4 <Encoder_Get_ALL+0x44>)
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	20000350 	.word	0x20000350
 80032dc:	20000354 	.word	0x20000354
 80032e0:	20000358 	.word	0x20000358
 80032e4:	2000035c 	.word	0x2000035c

080032e8 <Encoder_Update_Count>:

// ���±������ļ�����ֵ��
void Encoder_Update_Count(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
		g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7ff ff95 	bl	800321c <Encoder_Read_CNT>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <Encoder_Update_Count+0x58>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	4a10      	ldr	r2, [pc, #64]	; (8003340 <Encoder_Update_Count+0x58>)
 80032fe:	6013      	str	r3, [r2, #0]

		g_Encoder_M2_Now += Encoder_Read_CNT(MOTOR_ID_M2);
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff ff8b 	bl	800321c <Encoder_Read_CNT>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <Encoder_Update_Count+0x5c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <Encoder_Update_Count+0x5c>)
 8003312:	6013      	str	r3, [r2, #0]

		g_Encoder_M3_Now -= Encoder_Read_CNT(MOTOR_ID_M3);
 8003314:	2002      	movs	r0, #2
 8003316:	f7ff ff81 	bl	800321c <Encoder_Read_CNT>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <Encoder_Update_Count+0x60>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	4a08      	ldr	r2, [pc, #32]	; (8003348 <Encoder_Update_Count+0x60>)
 8003326:	6013      	str	r3, [r2, #0]

		g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 8003328:	2003      	movs	r0, #3
 800332a:	f7ff ff77 	bl	800321c <Encoder_Read_CNT>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <Encoder_Update_Count+0x64>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <Encoder_Update_Count+0x64>)
 800333a:	6013      	str	r3, [r2, #0]

}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000350 	.word	0x20000350
 8003344:	20000354 	.word	0x20000354
 8003348:	20000358 	.word	0x20000358
 800334c:	2000035c 	.word	0x2000035c

08003350 <Motor_Stop>:
}



void Motor_Stop()
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	PWM_M1 =0;
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <Motor_Stop+0x24>)
 8003356:	2200      	movs	r2, #0
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_M2 =0;
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <Motor_Stop+0x24>)
 800335c:	2200      	movs	r2, #0
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_M3 = 0;
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <Motor_Stop+0x24>)
 8003362:	2200      	movs	r2, #0
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_M4 = 0;
 8003366:	4b03      	ldr	r3, [pc, #12]	; (8003374 <Motor_Stop+0x24>)
 8003368:	2200      	movs	r2, #0
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40013400 	.word	0x40013400

08003378 <Motor_Set_Pwm>:


void Motor_Set_Pwm(uint8_t id, int16_t pwm)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	460a      	mov	r2, r1
 8003382:	71fb      	strb	r3, [r7, #7]
 8003384:	4613      	mov	r3, r2
 8003386:	80bb      	strh	r3, [r7, #4]
    //int16_t pulse = Motor_Ignore_Dead_Zone(pwm);

	int16_t pulse = pwm;
 8003388:	88bb      	ldrh	r3, [r7, #4]
 800338a:	81fb      	strh	r3, [r7, #14]


    if (pulse >= MOTOR_MAX_PULSE)
 800338c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003390:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003394:	4293      	cmp	r3, r2
 8003396:	dd02      	ble.n	800339e <Motor_Set_Pwm+0x26>
        pulse = MOTOR_MAX_PULSE;
 8003398:	f240 33e7 	movw	r3, #999	; 0x3e7
 800339c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 800339e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033a2:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <Motor_Set_Pwm+0x128>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	da02      	bge.n	80033ae <Motor_Set_Pwm+0x36>
        pulse = -MOTOR_MAX_PULSE;
 80033a8:	f64f 4319 	movw	r3, #64537	; 0xfc19
 80033ac:	81fb      	strh	r3, [r7, #14]

    switch (id)
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d86f      	bhi.n	8003494 <Motor_Set_Pwm+0x11c>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <Motor_Set_Pwm+0x44>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033cd 	.word	0x080033cd
 80033c0:	080033ff 	.word	0x080033ff
 80033c4:	08003431 	.word	0x08003431
 80033c8:	08003463 	.word	0x08003463
    {
    case MOTOR_ID_M1:
    {
        if (pulse >= 0)  // + value direction
 80033cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db09      	blt.n	80033e8 <Motor_Set_Pwm+0x70>
        {
            PWM_M1 = pulse;   //PWM PC6
 80033d4:	4a33      	ldr	r2, [pc, #204]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 80033d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033da:	6353      	str	r3, [r2, #52]	; 0x34
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80033dc:	2201      	movs	r2, #1
 80033de:	2110      	movs	r1, #16
 80033e0:	4831      	ldr	r0, [pc, #196]	; (80034a8 <Motor_Set_Pwm+0x130>)
 80033e2:	f002 fc97 	bl	8005d14 <HAL_GPIO_WritePin>
        else              // - value direction
        {
        	PWM_M1 = -pulse;
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
        }
        break;
 80033e6:	e056      	b.n	8003496 <Motor_Set_Pwm+0x11e>
        	PWM_M1 = -pulse;
 80033e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ec:	425a      	negs	r2, r3
 80033ee:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 80033f0:	635a      	str	r2, [r3, #52]	; 0x34
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80033f2:	2200      	movs	r2, #0
 80033f4:	2110      	movs	r1, #16
 80033f6:	482c      	ldr	r0, [pc, #176]	; (80034a8 <Motor_Set_Pwm+0x130>)
 80033f8:	f002 fc8c 	bl	8005d14 <HAL_GPIO_WritePin>
        break;
 80033fc:	e04b      	b.n	8003496 <Motor_Set_Pwm+0x11e>
    }

    case MOTOR_ID_M2:
    {
    	 if (pulse >= 0)  // + value direction
 80033fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003402:	2b00      	cmp	r3, #0
 8003404:	db09      	blt.n	800341a <Motor_Set_Pwm+0xa2>
		{
			PWM_M2 = pulse;   //PWM PC7
 8003406:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 8003408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800340c:	6393      	str	r3, [r2, #56]	; 0x38

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800340e:	2200      	movs	r2, #0
 8003410:	2120      	movs	r1, #32
 8003412:	4825      	ldr	r0, [pc, #148]	; (80034a8 <Motor_Set_Pwm+0x130>)
 8003414:	f002 fc7e 	bl	8005d14 <HAL_GPIO_WritePin>
		else              // - value direction
		{
			PWM_M2 = -pulse;
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
		}
		break;
 8003418:	e03d      	b.n	8003496 <Motor_Set_Pwm+0x11e>
			PWM_M2 = -pulse;
 800341a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800341e:	425a      	negs	r2, r3
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8003424:	2201      	movs	r2, #1
 8003426:	2120      	movs	r1, #32
 8003428:	481f      	ldr	r0, [pc, #124]	; (80034a8 <Motor_Set_Pwm+0x130>)
 800342a:	f002 fc73 	bl	8005d14 <HAL_GPIO_WritePin>
		break;
 800342e:	e032      	b.n	8003496 <Motor_Set_Pwm+0x11e>
    }


    case MOTOR_ID_M3:
    {
    	if (pulse >= 0)  // + value direction
 8003430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db09      	blt.n	800344c <Motor_Set_Pwm+0xd4>
		{
			PWM_M3 = pulse;   //PWM PC8
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 800343a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343e:	63d3      	str	r3, [r2, #60]	; 0x3c

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8003440:	2201      	movs	r2, #1
 8003442:	2101      	movs	r1, #1
 8003444:	4819      	ldr	r0, [pc, #100]	; (80034ac <Motor_Set_Pwm+0x134>)
 8003446:	f002 fc65 	bl	8005d14 <HAL_GPIO_WritePin>
		else              // - value direction
		{
			PWM_M3 = -pulse;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		}
        break;
 800344a:	e024      	b.n	8003496 <Motor_Set_Pwm+0x11e>
			PWM_M3 = -pulse;
 800344c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003450:	425a      	negs	r2, r3
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003456:	2200      	movs	r2, #0
 8003458:	2101      	movs	r1, #1
 800345a:	4814      	ldr	r0, [pc, #80]	; (80034ac <Motor_Set_Pwm+0x134>)
 800345c:	f002 fc5a 	bl	8005d14 <HAL_GPIO_WritePin>
        break;
 8003460:	e019      	b.n	8003496 <Motor_Set_Pwm+0x11e>
    }
    case MOTOR_ID_M4:
    {
    	if (pulse >= 0)  // + value direction
 8003462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db09      	blt.n	800347e <Motor_Set_Pwm+0x106>
		{
			PWM_M4 = pulse;   //PWM PC9
 800346a:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 800346c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003472:	2200      	movs	r2, #0
 8003474:	2102      	movs	r1, #2
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <Motor_Set_Pwm+0x134>)
 8003478:	f002 fc4c 	bl	8005d14 <HAL_GPIO_WritePin>
		{
			PWM_M4 = -pulse;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

		}
        break;
 800347c:	e00b      	b.n	8003496 <Motor_Set_Pwm+0x11e>
			PWM_M4 = -pulse;
 800347e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003482:	425a      	negs	r2, r3
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <Motor_Set_Pwm+0x12c>)
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8003488:	2201      	movs	r2, #1
 800348a:	2102      	movs	r1, #2
 800348c:	4807      	ldr	r0, [pc, #28]	; (80034ac <Motor_Set_Pwm+0x134>)
 800348e:	f002 fc41 	bl	8005d14 <HAL_GPIO_WritePin>
        break;
 8003492:	e000      	b.n	8003496 <Motor_Set_Pwm+0x11e>
    }

    default:
        break;
 8003494:	bf00      	nop
    }
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	fffffc1a 	.word	0xfffffc1a
 80034a4:	40013400 	.word	0x40013400
 80034a8:	40011000 	.word	0x40011000
 80034ac:	40010c00 	.word	0x40010c00

080034b0 <USART1_Send_ArrayU8_DMA>:
	}
}


void USART1_Send_ArrayU8_DMA(uint8_t *BufferPtr, uint16_t Length)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
	if (!Length) return;
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d013      	beq.n	80034ea <USART1_Send_ArrayU8_DMA+0x3a>

	if (BufferPtr)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d011      	beq.n	80034ec <USART1_Send_ArrayU8_DMA+0x3c>
	{
		memcpy(g_dma_buff, BufferPtr, (Length > MAX_LEN ? MAX_LEN : Length));
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	bf28      	it	cs
 80034ce:	2364      	movcs	r3, #100	; 0x64
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4807      	ldr	r0, [pc, #28]	; (80034f4 <USART1_Send_ArrayU8_DMA+0x44>)
 80034d8:	f009 f8e8 	bl	800c6ac <memcpy>
		HAL_UART_Transmit_DMA(&huart1, g_dma_buff, Length);
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	461a      	mov	r2, r3
 80034e0:	4904      	ldr	r1, [pc, #16]	; (80034f4 <USART1_Send_ArrayU8_DMA+0x44>)
 80034e2:	4805      	ldr	r0, [pc, #20]	; (80034f8 <USART1_Send_ArrayU8_DMA+0x48>)
 80034e4:	f004 faee 	bl	8007ac4 <HAL_UART_Transmit_DMA>
 80034e8:	e000      	b.n	80034ec <USART1_Send_ArrayU8_DMA+0x3c>
	if (!Length) return;
 80034ea:	bf00      	nop
	}
}
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000360 	.word	0x20000360
 80034f8:	2000055c 	.word	0x2000055c

080034fc <HAL_UART_RxCpltCallback>:
//	}
//}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_UART_RxCpltCallback+0x84>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d133      	bne.n	8003576 <HAL_UART_RxCpltCallback+0x7a>

		if(m_rx_data != '\n')
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_UART_RxCpltCallback+0x88>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b0a      	cmp	r3, #10
 8003514:	d00b      	beq.n	800352e <HAL_UART_RxCpltCallback+0x32>
		{
			RxBuf[m_rxbufcnt++] = m_rx_data;
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	b2d1      	uxtb	r1, r2
 800351e:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003520:	7011      	strb	r1, [r2, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_UART_RxCpltCallback+0x88>)
 8003526:	7819      	ldrb	r1, [r3, #0]
 8003528:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_UART_RxCpltCallback+0x90>)
 800352a:	5499      	strb	r1, [r3, r2]
 800352c:	e01e      	b.n	800356c <HAL_UART_RxCpltCallback+0x70>
		}
		else
		{
			RxBuf[m_rxbufcnt++] = '\n';
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	b2d1      	uxtb	r1, r2
 8003536:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003538:	7011      	strb	r1, [r2, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_UART_RxCpltCallback+0x90>)
 800353e:	210a      	movs	r1, #10
 8003540:	5499      	strb	r1, [r3, r2]

			memcpy(MainBuf, RxBuf, m_rxbufcnt);
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4910      	ldr	r1, [pc, #64]	; (800358c <HAL_UART_RxCpltCallback+0x90>)
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <HAL_UART_RxCpltCallback+0x94>)
 800354c:	f009 f8ae 	bl	800c6ac <memcpy>
			MainBuf_rx_no = m_rxbufcnt;
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_UART_RxCpltCallback+0x98>)
 8003556:	701a      	strb	r2, [r3, #0]
			Set_CMD_Flag();
 8003558:	f7ff fd06 	bl	8002f68 <Set_CMD_Flag>

			memset(RxBuf, 0, sizeof(RxBuf));
 800355c:	2232      	movs	r2, #50	; 0x32
 800355e:	2100      	movs	r1, #0
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <HAL_UART_RxCpltCallback+0x90>)
 8003562:	f008 ffb1 	bl	800c4c8 <memset>
			m_rxbufcnt = 0;
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_UART_RxCpltCallback+0x8c>)
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, &m_rx_data, 1);
 800356c:	2201      	movs	r2, #1
 800356e:	4905      	ldr	r1, [pc, #20]	; (8003584 <HAL_UART_RxCpltCallback+0x88>)
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <HAL_UART_RxCpltCallback+0x9c>)
 8003572:	f004 fa81 	bl	8007a78 <HAL_UART_Receive_IT>

	}
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40013800 	.word	0x40013800
 8003584:	20000695 	.word	0x20000695
 8003588:	2000062e 	.word	0x2000062e
 800358c:	200005fc 	.word	0x200005fc
 8003590:	20000630 	.word	0x20000630
 8003594:	20000694 	.word	0x20000694
 8003598:	2000055c 	.word	0x2000055c

0800359c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035a0:	f001 f824 	bl	80045ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a4:	f000 f8b0 	bl	8003708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035a8:	f000 fb8e 	bl	8003cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80035ac:	f000 fb6e 	bl	8003c8c <MX_DMA_Init>
  MX_TIM8_Init();
 80035b0:	f000 fa96 	bl	8003ae0 <MX_TIM8_Init>
  MX_TIM5_Init();
 80035b4:	f000 fa40 	bl	8003a38 <MX_TIM5_Init>
  MX_TIM4_Init();
 80035b8:	f000 f9ea 	bl	8003990 <MX_TIM4_Init>
  MX_TIM3_Init();
 80035bc:	f000 f994 	bl	80038e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80035c0:	f000 f93e 	bl	8003840 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80035c4:	f000 fb38 	bl	8003c38 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80035c8:	f000 f8fc 	bl	80037c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80035cc:	2100      	movs	r1, #0
 80035ce:	4836      	ldr	r0, [pc, #216]	; (80036a8 <main+0x10c>)
 80035d0:	f003 fa8e 	bl	8006af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80035d4:	2104      	movs	r1, #4
 80035d6:	4834      	ldr	r0, [pc, #208]	; (80036a8 <main+0x10c>)
 80035d8:	f003 fa8a 	bl	8006af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80035dc:	2108      	movs	r1, #8
 80035de:	4832      	ldr	r0, [pc, #200]	; (80036a8 <main+0x10c>)
 80035e0:	f003 fa86 	bl	8006af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80035e4:	210c      	movs	r1, #12
 80035e6:	4830      	ldr	r0, [pc, #192]	; (80036a8 <main+0x10c>)
 80035e8:	f003 fa82 	bl	8006af0 <HAL_TIM_PWM_Start>

  //Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
  Motor_Set_Pwm(MOTOR_ID_M1, 0);
 80035ec:	2100      	movs	r1, #0
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7ff fec2 	bl	8003378 <Motor_Set_Pwm>
  Motor_Set_Pwm(MOTOR_ID_M2, 0);
 80035f4:	2100      	movs	r1, #0
 80035f6:	2001      	movs	r0, #1
 80035f8:	f7ff febe 	bl	8003378 <Motor_Set_Pwm>
  Motor_Set_Pwm(MOTOR_ID_M3, 0);
 80035fc:	2100      	movs	r1, #0
 80035fe:	2002      	movs	r0, #2
 8003600:	f7ff feba 	bl	8003378 <Motor_Set_Pwm>
  Motor_Set_Pwm(MOTOR_ID_M4, 0);
 8003604:	2100      	movs	r1, #0
 8003606:	2003      	movs	r0, #3
 8003608:	f7ff feb6 	bl	8003378 <Motor_Set_Pwm>


  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800360c:	213c      	movs	r1, #60	; 0x3c
 800360e:	4827      	ldr	r0, [pc, #156]	; (80036ac <main+0x110>)
 8003610:	f003 fbca 	bl	8006da8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003614:	213c      	movs	r1, #60	; 0x3c
 8003616:	4826      	ldr	r0, [pc, #152]	; (80036b0 <main+0x114>)
 8003618:	f003 fbc6 	bl	8006da8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800361c:	213c      	movs	r1, #60	; 0x3c
 800361e:	4825      	ldr	r0, [pc, #148]	; (80036b4 <main+0x118>)
 8003620:	f003 fbc2 	bl	8006da8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8003624:	213c      	movs	r1, #60	; 0x3c
 8003626:	4824      	ldr	r0, [pc, #144]	; (80036b8 <main+0x11c>)
 8003628:	f003 fbbe 	bl	8006da8 <HAL_TIM_Encoder_Start>

//  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
//  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
//  HAL_UART_Receive_DMA(&huart1, RxBuf, RxBuf_SIZE);

  HAL_UART_Receive_IT(&huart1, &m_rx_data, 1);
 800362c:	2201      	movs	r2, #1
 800362e:	4923      	ldr	r1, [pc, #140]	; (80036bc <main+0x120>)
 8003630:	4823      	ldr	r0, [pc, #140]	; (80036c0 <main+0x124>)
 8003632:	f004 fa21 	bl	8007a78 <HAL_UART_Receive_IT>


  //start_init
  PID_Param_Init();
 8003636:	f7fe f9fb 	bl	8001a30 <PID_Param_Init>
  Motion_Ctrl(0, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	2000      	movs	r0, #0
 8003640:	f7fe f83e 	bl	80016c0 <Motion_Ctrl>
  //MPU9250_Init(0);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003644:	f005 f902 	bl	800884c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003648:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <main+0x128>)
 800364a:	2100      	movs	r1, #0
 800364c:	481e      	ldr	r0, [pc, #120]	; (80036c8 <main+0x12c>)
 800364e:	f005 f963 	bl	8008918 <osThreadNew>
 8003652:	4603      	mov	r3, r0
 8003654:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <main+0x130>)
 8003656:	6013      	str	r3, [r2, #0]

  /* creation of task_speed */
  task_speedHandle = osThreadNew(start_task_speed, NULL, &task_speed_attributes);
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <main+0x134>)
 800365a:	2100      	movs	r1, #0
 800365c:	481d      	ldr	r0, [pc, #116]	; (80036d4 <main+0x138>)
 800365e:	f005 f95b 	bl	8008918 <osThreadNew>
 8003662:	4603      	mov	r3, r0
 8003664:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <main+0x13c>)
 8003666:	6013      	str	r3, [r2, #0]

  /* creation of task_control */
  task_controlHandle = osThreadNew(start_task_control, NULL, &task_control_attributes);
 8003668:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <main+0x140>)
 800366a:	2100      	movs	r1, #0
 800366c:	481c      	ldr	r0, [pc, #112]	; (80036e0 <main+0x144>)
 800366e:	f005 f953 	bl	8008918 <osThreadNew>
 8003672:	4603      	mov	r3, r0
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <main+0x148>)
 8003676:	6013      	str	r3, [r2, #0]

  /* creation of task_mpu */
  task_mpuHandle = osThreadNew(start_task_mpu, NULL, &task_mpu_attributes);
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <main+0x14c>)
 800367a:	2100      	movs	r1, #0
 800367c:	481b      	ldr	r0, [pc, #108]	; (80036ec <main+0x150>)
 800367e:	f005 f94b 	bl	8008918 <osThreadNew>
 8003682:	4603      	mov	r3, r0
 8003684:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <main+0x154>)
 8003686:	6013      	str	r3, [r2, #0]

  /* creation of task_report */
  task_reportHandle = osThreadNew(start_task_report, NULL, &task_report_attributes);
 8003688:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <main+0x158>)
 800368a:	2100      	movs	r1, #0
 800368c:	481a      	ldr	r0, [pc, #104]	; (80036f8 <main+0x15c>)
 800368e:	f005 f943 	bl	8008918 <osThreadNew>
 8003692:	4603      	mov	r3, r0
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <main+0x160>)
 8003696:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003698:	f005 f90a 	bl	80088b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  enc_counter = TIM5->CNT;
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <main+0x164>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <main+0x168>)
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e7f9      	b.n	800369c <main+0x100>
 80036a8:	20000514 	.word	0x20000514
 80036ac:	200003f4 	.word	0x200003f4
 80036b0:	2000043c 	.word	0x2000043c
 80036b4:	20000484 	.word	0x20000484
 80036b8:	200004cc 	.word	0x200004cc
 80036bc:	20000695 	.word	0x20000695
 80036c0:	2000055c 	.word	0x2000055c
 80036c4:	0800f8dc 	.word	0x0800f8dc
 80036c8:	08003dd1 	.word	0x08003dd1
 80036cc:	200005e8 	.word	0x200005e8
 80036d0:	0800f900 	.word	0x0800f900
 80036d4:	08003de7 	.word	0x08003de7
 80036d8:	200005ec 	.word	0x200005ec
 80036dc:	0800f924 	.word	0x0800f924
 80036e0:	08003e0d 	.word	0x08003e0d
 80036e4:	200005f0 	.word	0x200005f0
 80036e8:	0800f948 	.word	0x0800f948
 80036ec:	08003e41 	.word	0x08003e41
 80036f0:	200005f4 	.word	0x200005f4
 80036f4:	0800f96c 	.word	0x0800f96c
 80036f8:	08003e53 	.word	0x08003e53
 80036fc:	200005f8 	.word	0x200005f8
 8003700:	40000c00 	.word	0x40000c00
 8003704:	20000696 	.word	0x20000696

08003708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b096      	sub	sp, #88	; 0x58
 800370c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003712:	2228      	movs	r2, #40	; 0x28
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f008 fed6 	bl	800c4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371c:	f107 031c 	add.w	r3, r7, #28
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	611a      	str	r2, [r3, #16]
 800373a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800373c:	2301      	movs	r3, #1
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003746:	2300      	movs	r3, #0
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800374a:	2301      	movs	r3, #1
 800374c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374e:	2302      	movs	r3, #2
 8003750:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003756:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003758:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800375c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003762:	4618      	mov	r0, r3
 8003764:	f002 faee 	bl	8005d44 <HAL_RCC_OscConfig>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800376e:	f000 fb8d 	bl	8003e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003772:	230f      	movs	r3, #15
 8003774:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003776:	2302      	movs	r3, #2
 8003778:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800377e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f002 fd5a 	bl	8006248 <HAL_RCC_ClockConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800379a:	f000 fb77 	bl	8003e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800379e:	2302      	movs	r3, #2
 80037a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80037a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80037a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f002 ff0a 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80037b6:	f000 fb69 	bl	8003e8c <Error_Handler>
  }
}
 80037ba:	bf00      	nop
 80037bc:	3758      	adds	r7, #88	; 0x58
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <MX_ADC1_Init+0x74>)
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <MX_ADC1_Init+0x78>)
 80037d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <MX_ADC1_Init+0x74>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <MX_ADC1_Init+0x74>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <MX_ADC1_Init+0x74>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <MX_ADC1_Init+0x74>)
 80037ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80037f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <MX_ADC1_Init+0x74>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <MX_ADC1_Init+0x74>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <MX_ADC1_Init+0x74>)
 8003802:	f000 ff25 	bl	8004650 <HAL_ADC_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800380c:	f000 fb3e 	bl	8003e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003810:	2305      	movs	r3, #5
 8003812:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003814:	2301      	movs	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <MX_ADC1_Init+0x74>)
 8003822:	f001 f9eb 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800382c:	f000 fb2e 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200003c4 	.word	0x200003c4
 800383c:	40012400 	.word	0x40012400

08003840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f008 fe3a 	bl	800c4c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <MX_TIM2_Init+0xa4>)
 800385e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003864:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <MX_TIM2_Init+0xa4>)
 8003866:	2200      	movs	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <MX_TIM2_Init+0xa4>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <MX_TIM2_Init+0xa4>)
 8003872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <MX_TIM2_Init+0xa4>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <MX_TIM2_Init+0xa4>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003884:	2303      	movs	r3, #3
 8003886:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003898:	2300      	movs	r3, #0
 800389a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	4619      	mov	r1, r3
 80038ae:	480d      	ldr	r0, [pc, #52]	; (80038e4 <MX_TIM2_Init+0xa4>)
 80038b0:	f003 f9d8 	bl	8006c64 <HAL_TIM_Encoder_Init>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80038ba:	f000 fae7 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4806      	ldr	r0, [pc, #24]	; (80038e4 <MX_TIM2_Init+0xa4>)
 80038cc:	f003 ff32 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80038d6:	f000 fad9 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	3730      	adds	r7, #48	; 0x30
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200003f4 	.word	0x200003f4

080038e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f008 fde6 	bl	800c4c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <MX_TIM3_Init+0xa4>)
 8003908:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800390a:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <MX_TIM3_Init+0xa0>)
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800391c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391e:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003926:	2200      	movs	r2, #0
 8003928:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800392a:	2303      	movs	r3, #3
 800392c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003932:	2301      	movs	r3, #1
 8003934:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003942:	2301      	movs	r3, #1
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003946:	2300      	movs	r3, #0
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	4619      	mov	r1, r3
 8003954:	480c      	ldr	r0, [pc, #48]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003956:	f003 f985 	bl	8006c64 <HAL_TIM_Encoder_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003960:	f000 fa94 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4805      	ldr	r0, [pc, #20]	; (8003988 <MX_TIM3_Init+0xa0>)
 8003972:	f003 fedf 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800397c:	f000 fa86 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003980:	bf00      	nop
 8003982:	3730      	adds	r7, #48	; 0x30
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000043c 	.word	0x2000043c
 800398c:	40000400 	.word	0x40000400

08003990 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	; 0x30
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003996:	f107 030c 	add.w	r3, r7, #12
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f008 fd92 	bl	800c4c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039ae:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <MX_TIM4_Init+0xa4>)
 80039b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039d2:	2303      	movs	r3, #3
 80039d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039ea:	2301      	movs	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	4619      	mov	r1, r3
 80039fc:	480c      	ldr	r0, [pc, #48]	; (8003a30 <MX_TIM4_Init+0xa0>)
 80039fe:	f003 f931 	bl	8006c64 <HAL_TIM_Encoder_Init>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003a08:	f000 fa40 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <MX_TIM4_Init+0xa0>)
 8003a1a:	f003 fe8b 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003a24:	f000 fa32 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	3730      	adds	r7, #48	; 0x30
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000484 	.word	0x20000484
 8003a34:	40000800 	.word	0x40000800

08003a38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f008 fd3e 	bl	800c4c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003a56:	4a21      	ldr	r2, [pc, #132]	; (8003adc <MX_TIM5_Init+0xa4>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003a66:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a74:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a82:	2301      	movs	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a92:	2301      	movs	r3, #1
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a96:	2300      	movs	r3, #0
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480c      	ldr	r0, [pc, #48]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003aa6:	f003 f8dd 	bl	8006c64 <HAL_TIM_Encoder_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003ab0:	f000 f9ec 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <MX_TIM5_Init+0xa0>)
 8003ac2:	f003 fe37 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003acc:	f000 f9de 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ad0:	bf00      	nop
 8003ad2:	3730      	adds	r7, #48	; 0x30
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200004cc 	.word	0x200004cc
 8003adc:	40000c00 	.word	0x40000c00

08003ae0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b092      	sub	sp, #72	; 0x48
 8003ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
 8003b00:	615a      	str	r2, [r3, #20]
 8003b02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	2220      	movs	r2, #32
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 fcdc 	bl	800c4c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b10:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b12:	4a48      	ldr	r2, [pc, #288]	; (8003c34 <MX_TIM8_Init+0x154>)
 8003b14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8003b16:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b18:	2247      	movs	r2, #71	; 0x47
 8003b1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1c:	4b44      	ldr	r3, [pc, #272]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8003b22:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b30:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b36:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003b3c:	483c      	ldr	r0, [pc, #240]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b3e:	f002 ff87 	bl	8006a50 <HAL_TIM_PWM_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003b48:	f000 f9a0 	bl	8003e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4835      	ldr	r0, [pc, #212]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b5c:	f003 fdea 	bl	8007734 <HAL_TIMEx_MasterConfigSynchronization>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003b66:	f000 f991 	bl	8003e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b6a:	2360      	movs	r3, #96	; 0x60
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000-1;
 8003b6e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4827      	ldr	r0, [pc, #156]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003b92:	f003 fa9f 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8003b9c:	f000 f976 	bl	8003e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4821      	ldr	r0, [pc, #132]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003baa:	f003 fa93 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 8003bb4:	f000 f96a 	bl	8003e8c <Error_Handler>
  }
  sConfigOC.Pulse = 999;
 8003bb8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	481a      	ldr	r0, [pc, #104]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003bc8:	f003 fa84 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003bd2:	f000 f95b 	bl	8003e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	220c      	movs	r2, #12
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4814      	ldr	r0, [pc, #80]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003be0:	f003 fa78 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003bea:	f000 f94f 	bl	8003e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4807      	ldr	r0, [pc, #28]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003c12:	f003 fdfb 	bl	800780c <HAL_TIMEx_ConfigBreakDeadTime>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8003c1c:	f000 f936 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003c20:	4803      	ldr	r0, [pc, #12]	; (8003c30 <MX_TIM8_Init+0x150>)
 8003c22:	f000 fabb 	bl	800419c <HAL_TIM_MspPostInit>

}
 8003c26:	bf00      	nop
 8003c28:	3748      	adds	r7, #72	; 0x48
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000514 	.word	0x20000514
 8003c34:	40013400 	.word	0x40013400

08003c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <MX_USART1_UART_Init+0x50>)
 8003c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c5e:	220c      	movs	r2, #12
 8003c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <MX_USART1_UART_Init+0x4c>)
 8003c70:	f003 fe2f 	bl	80078d2 <HAL_UART_Init>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c7a:	f000 f907 	bl	8003e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2000055c 	.word	0x2000055c
 8003c88:	40013800 	.word	0x40013800

08003c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <MX_DMA_Init+0x38>)
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <MX_DMA_Init+0x38>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6153      	str	r3, [r2, #20]
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <MX_DMA_Init+0x38>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2105      	movs	r1, #5
 8003cae:	200e      	movs	r0, #14
 8003cb0:	f001 f9ed 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003cb4:	200e      	movs	r0, #14
 8003cb6:	f001 fa06 	bl	80050c6 <HAL_NVIC_EnableIRQ>

}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cdc:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	4a37      	ldr	r2, [pc, #220]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003ce2:	f043 0310 	orr.w	r3, r3, #16
 8003ce6:	6193      	str	r3, [r2, #24]
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf4:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	4a31      	ldr	r2, [pc, #196]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003cfa:	f043 0320 	orr.w	r3, r3, #32
 8003cfe:	6193      	str	r3, [r2, #24]
 8003d00:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	6193      	str	r3, [r2, #24]
 8003d18:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d24:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d2a:	f043 0308 	orr.w	r3, r3, #8
 8003d2e:	6193      	str	r3, [r2, #24]
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <MX_GPIO_Init+0xf8>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f243 0130 	movw	r1, #12336	; 0x3030
 8003d42:	4820      	ldr	r0, [pc, #128]	; (8003dc4 <MX_GPIO_Init+0xfc>)
 8003d44:	f001 ffe6 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f64c 4133 	movw	r1, #52275	; 0xcc33
 8003d4e:	481e      	ldr	r0, [pc, #120]	; (8003dc8 <MX_GPIO_Init+0x100>)
 8003d50:	f001 ffe0 	bl	8005d14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003d54:	2200      	movs	r2, #0
 8003d56:	2104      	movs	r1, #4
 8003d58:	481c      	ldr	r0, [pc, #112]	; (8003dcc <MX_GPIO_Init+0x104>)
 8003d5a:	f001 ffdb 	bl	8005d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8003d5e:	f243 0330 	movw	r3, #12336	; 0x3030
 8003d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	4619      	mov	r1, r3
 8003d76:	4813      	ldr	r0, [pc, #76]	; (8003dc4 <MX_GPIO_Init+0xfc>)
 8003d78:	f001 fe38 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB14 PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8003d7c:	f64c 4333 	movw	r3, #52275	; 0xcc33
 8003d80:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d82:	2301      	movs	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	4619      	mov	r1, r3
 8003d94:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <MX_GPIO_Init+0x100>)
 8003d96:	f001 fe29 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da6:	2302      	movs	r3, #2
 8003da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003daa:	f107 0310 	add.w	r3, r7, #16
 8003dae:	4619      	mov	r1, r3
 8003db0:	4806      	ldr	r0, [pc, #24]	; (8003dcc <MX_GPIO_Init+0x104>)
 8003db2:	f001 fe1b 	bl	80059ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003db6:	bf00      	nop
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40010c00 	.word	0x40010c00
 8003dcc:	40011400 	.word	0x40011400

08003dd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  adc_conv();
 8003dd8:	f7fd fa5e 	bl	8001298 <adc_conv>
	  osDelay(1000);
 8003ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de0:	f004 fe44 	bl	8008a6c <osDelay>
	  adc_conv();
 8003de4:	e7f8      	b.n	8003dd8 <StartDefaultTask+0x8>

08003de6 <start_task_speed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_speed */
void start_task_speed(void *argument)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_speed */
  /* Infinite loop */
  uint32_t lastWakeTime = xTaskGetTickCount();
 8003dee:	f005 ffaf 	bl	8009d50 <xTaskGetTickCount>
 8003df2:	4603      	mov	r3, r0
 8003df4:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  // App_Delay_ms(10);
	  vTaskDelayUntil(&lastWakeTime, 10);
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	210a      	movs	r1, #10
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f005 fdd9 	bl	80099b4 <vTaskDelayUntil>
	  Encoder_Update_Count();
 8003e02:	f7ff fa71 	bl	80032e8 <Encoder_Update_Count>
	  Motion_Handle();
 8003e06:	f7fd fde7 	bl	80019d8 <Motion_Handle>
  {
 8003e0a:	e7f4      	b.n	8003df6 <start_task_speed+0x10>

08003e0c <start_task_control>:
* @retval None
*/
//sgkim
/* USER CODE END Header_start_task_control */
void start_task_control(void *argument)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_control */
  /* Infinite loop */
  //while (System_Enable())
  for(;;)
  {
	  if (Get_CMD_Flag())
 8003e14:	f7ff f89e 	bl	8002f54 <Get_CMD_Flag>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <start_task_control+0x22>
	  {
		  u_Data_Parse( MainBuf, MainBuf_rx_no );
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <start_task_control+0x2c>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4805      	ldr	r0, [pc, #20]	; (8003e3c <start_task_control+0x30>)
 8003e26:	f7ff f8b7 	bl	8002f98 <u_Data_Parse>
		  Clear_CMD_Flag();
 8003e2a:	f7ff f8a9 	bl	8002f80 <Clear_CMD_Flag>
	  }
	  osDelay(1);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f004 fe1c 	bl	8008a6c <osDelay>
	  if (Get_CMD_Flag())
 8003e34:	e7ee      	b.n	8003e14 <start_task_control+0x8>
 8003e36:	bf00      	nop
 8003e38:	20000694 	.word	0x20000694
 8003e3c:	20000630 	.word	0x20000630

08003e40 <start_task_mpu>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_mpu */
void start_task_mpu(void *argument)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
//		//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13 );
//	}
//
 	while (1)
	{
		osDelay(1000);
 8003e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e4c:	f004 fe0e 	bl	8008a6c <osDelay>
 8003e50:	e7fa      	b.n	8003e48 <start_task_mpu+0x8>

08003e52 <start_task_report>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_report */
void start_task_report(void *argument)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_report */
    /* Infinite loop */
	osDelay(40);
 8003e5a:	2028      	movs	r0, #40	; 0x28
 8003e5c:	f004 fe06 	bl	8008a6c <osDelay>
//		App_Delay_ms(1);
//	}

	for(;;)
	{
		osDelay(1);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f004 fe03 	bl	8008a6c <osDelay>
 8003e66:	e7fb      	b.n	8003e60 <start_task_report+0xe>

08003e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e7a:	f000 fbcd 	bl	8004618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00

08003e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e90:	b672      	cpsid	i
}
 8003e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e94:	e7fe      	b.n	8003e94 <Error_Handler+0x8>
	...

08003e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_MspInit+0x68>)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_MspInit+0x68>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6193      	str	r3, [r2, #24]
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_MspInit+0x68>)
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_MspInit+0x68>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <HAL_MspInit+0x68>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	61d3      	str	r3, [r2, #28]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_MspInit+0x68>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	210f      	movs	r1, #15
 8003ed2:	f06f 0001 	mvn.w	r0, #1
 8003ed6:	f001 f8da 	bl	800508e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_MspInit+0x6c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_MspInit+0x6c>)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40010000 	.word	0x40010000

08003f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0310 	add.w	r3, r7, #16
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_ADC_MspInit+0x6c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d121      	bne.n	8003f6c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_ADC_MspInit+0x70>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <HAL_ADC_MspInit+0x70>)
 8003f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f32:	6193      	str	r3, [r2, #24]
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_ADC_MspInit+0x70>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_ADC_MspInit+0x70>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <HAL_ADC_MspInit+0x70>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_ADC_MspInit+0x70>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f58:	2320      	movs	r3, #32
 8003f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f60:	f107 0310 	add.w	r3, r7, #16
 8003f64:	4619      	mov	r1, r3
 8003f66:	4805      	ldr	r0, [pc, #20]	; (8003f7c <HAL_ADC_MspInit+0x74>)
 8003f68:	f001 fd40 	bl	80059ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f6c:	bf00      	nop
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40012400 	.word	0x40012400
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010800 	.word	0x40010800

08003f80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b090      	sub	sp, #64	; 0x40
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d14f      	bne.n	8004040 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	61d3      	str	r3, [r2, #28]
 8003fac:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb8:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a61      	ldr	r2, [pc, #388]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	4b5f      	ldr	r3, [pc, #380]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd0:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	4a5b      	ldr	r2, [pc, #364]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	6193      	str	r3, [r2, #24]
 8003fdc:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4852      	ldr	r0, [pc, #328]	; (8004148 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ffe:	f001 fcf5 	bl	80059ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004002:	2308      	movs	r3, #8
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004006:	2300      	movs	r3, #0
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004012:	4619      	mov	r1, r3
 8004014:	484d      	ldr	r0, [pc, #308]	; (800414c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004016:	f001 fce9 	bl	80059ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800401a:	4b4d      	ldr	r3, [pc, #308]	; (8004150 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800402e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004038:	4a45      	ldr	r2, [pc, #276]	; (8004150 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800403e:	e07c      	b.n	800413a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a43      	ldr	r2, [pc, #268]	; (8004154 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d124      	bne.n	8004094 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800404a:	4b3e      	ldr	r3, [pc, #248]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4a3d      	ldr	r2, [pc, #244]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	61d3      	str	r3, [r2, #28]
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	4b38      	ldr	r3, [pc, #224]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	4a37      	ldr	r2, [pc, #220]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	6193      	str	r3, [r2, #24]
 800406e:	4b35      	ldr	r3, [pc, #212]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800407a:	23c0      	movs	r3, #192	; 0xc0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407e:	2300      	movs	r3, #0
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800408a:	4619      	mov	r1, r3
 800408c:	482e      	ldr	r0, [pc, #184]	; (8004148 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800408e:	f001 fcad 	bl	80059ec <HAL_GPIO_Init>
}
 8004092:	e052      	b.n	800413a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2f      	ldr	r2, [pc, #188]	; (8004158 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d124      	bne.n	80040e8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a28      	ldr	r2, [pc, #160]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	61d3      	str	r3, [r2, #28]
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	4a22      	ldr	r2, [pc, #136]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040bc:	f043 0308 	orr.w	r3, r3, #8
 80040c0:	6193      	str	r3, [r2, #24]
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040ce:	23c0      	movs	r3, #192	; 0xc0
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d2:	2300      	movs	r3, #0
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040de:	4619      	mov	r1, r3
 80040e0:	481a      	ldr	r0, [pc, #104]	; (800414c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80040e2:	f001 fc83 	bl	80059ec <HAL_GPIO_Init>
}
 80040e6:	e028      	b.n	800413a <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d123      	bne.n	800413a <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80040f8:	f043 0308 	orr.w	r3, r3, #8
 80040fc:	61d3      	str	r3, [r2, #28]
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	6193      	str	r3, [r2, #24]
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004122:	2303      	movs	r3, #3
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004126:	2300      	movs	r3, #0
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	2300      	movs	r3, #0
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004132:	4619      	mov	r1, r3
 8004134:	4804      	ldr	r0, [pc, #16]	; (8004148 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004136:	f001 fc59 	bl	80059ec <HAL_GPIO_Init>
}
 800413a:	bf00      	nop
 800413c:	3740      	adds	r7, #64	; 0x40
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	40010800 	.word	0x40010800
 800414c:	40010c00 	.word	0x40010c00
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00

08004160 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a09      	ldr	r2, [pc, #36]	; (8004194 <HAL_TIM_PWM_MspInit+0x34>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10b      	bne.n	800418a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_TIM_PWM_MspInit+0x38>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <HAL_TIM_PWM_MspInit+0x38>)
 8004178:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800417c:	6193      	str	r3, [r2, #24]
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_TIM_PWM_MspInit+0x38>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	40013400 	.word	0x40013400
 8004198:	40021000 	.word	0x40021000

0800419c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 0310 	add.w	r3, r7, #16
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a10      	ldr	r2, [pc, #64]	; (80041f8 <HAL_TIM_MspPostInit+0x5c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d118      	bne.n	80041ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_TIM_MspPostInit+0x60>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <HAL_TIM_MspPostInit+0x60>)
 80041c2:	f043 0310 	orr.w	r3, r3, #16
 80041c6:	6193      	str	r3, [r2, #24]
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_TIM_MspPostInit+0x60>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80041d4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80041d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2302      	movs	r3, #2
 80041dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041de:	2302      	movs	r3, #2
 80041e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e2:	f107 0310 	add.w	r3, r7, #16
 80041e6:	4619      	mov	r1, r3
 80041e8:	4805      	ldr	r0, [pc, #20]	; (8004200 <HAL_TIM_MspPostInit+0x64>)
 80041ea:	f001 fbff 	bl	80059ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80041ee:	bf00      	nop
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40013400 	.word	0x40013400
 80041fc:	40021000 	.word	0x40021000
 8004200:	40011000 	.word	0x40011000

08004204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 0310 	add.w	r3, r7, #16
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a33      	ldr	r2, [pc, #204]	; (80042ec <HAL_UART_MspInit+0xe8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d15f      	bne.n	80042e4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <HAL_UART_MspInit+0xec>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a31      	ldr	r2, [pc, #196]	; (80042f0 <HAL_UART_MspInit+0xec>)
 800422a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422e:	6193      	str	r3, [r2, #24]
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HAL_UART_MspInit+0xec>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423c:	4b2c      	ldr	r3, [pc, #176]	; (80042f0 <HAL_UART_MspInit+0xec>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	4a2b      	ldr	r2, [pc, #172]	; (80042f0 <HAL_UART_MspInit+0xec>)
 8004242:	f043 0304 	orr.w	r3, r3, #4
 8004246:	6193      	str	r3, [r2, #24]
 8004248:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_UART_MspInit+0xec>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800425e:	2303      	movs	r3, #3
 8004260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	4619      	mov	r1, r3
 8004268:	4822      	ldr	r0, [pc, #136]	; (80042f4 <HAL_UART_MspInit+0xf0>)
 800426a:	f001 fbbf 	bl	80059ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800426e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004278:	2301      	movs	r3, #1
 800427a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4619      	mov	r1, r3
 8004282:	481c      	ldr	r0, [pc, #112]	; (80042f4 <HAL_UART_MspInit+0xf0>)
 8004284:	f001 fbb2 	bl	80059ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <HAL_UART_MspInit+0xf8>)
 800428c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 8004290:	2210      	movs	r2, #16
 8004292:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004294:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800429a:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80042ac:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80042b8:	480f      	ldr	r0, [pc, #60]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042ba:	f000 ff13 	bl	80050e4 <HAL_DMA_Init>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80042c4:	f7ff fde2 	bl	8003e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0b      	ldr	r2, [pc, #44]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <HAL_UART_MspInit+0xf4>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80042d4:	2200      	movs	r2, #0
 80042d6:	2105      	movs	r1, #5
 80042d8:	2025      	movs	r0, #37	; 0x25
 80042da:	f000 fed8 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042de:	2025      	movs	r0, #37	; 0x25
 80042e0:	f000 fef1 	bl	80050c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042e4:	bf00      	nop
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40013800 	.word	0x40013800
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40010800 	.word	0x40010800
 80042f8:	200005a4 	.word	0x200005a4
 80042fc:	40020044 	.word	0x40020044

08004300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004316:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <HAL_InitTick+0xd0>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <HAL_InitTick+0xd0>)
 800431c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004320:	6193      	str	r3, [r2, #24]
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_InitTick+0xd0>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800432e:	f107 020c 	add.w	r2, r7, #12
 8004332:	f107 0310 	add.w	r3, r7, #16
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f002 f8f5 	bl	8006528 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800433e:	f002 f8df 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8004342:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <HAL_InitTick+0xd4>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0c9b      	lsrs	r3, r3, #18
 800434e:	3b01      	subs	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_InitTick+0xd8>)
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_InitTick+0xdc>)
 8004356:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004358:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <HAL_InitTick+0xd8>)
 800435a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800435e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_InitTick+0xd8>)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <HAL_InitTick+0xd8>)
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_InitTick+0xd8>)
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_InitTick+0xd8>)
 8004374:	2200      	movs	r2, #0
 8004376:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004378:	4817      	ldr	r0, [pc, #92]	; (80043d8 <HAL_InitTick+0xd8>)
 800437a:	f002 fab1 	bl	80068e0 <HAL_TIM_Base_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11b      	bne.n	80043c4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800438c:	4812      	ldr	r0, [pc, #72]	; (80043d8 <HAL_InitTick+0xd8>)
 800438e:	f002 faff 	bl	8006990 <HAL_TIM_Base_Start_IT>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800439c:	2b00      	cmp	r3, #0
 800439e:	d111      	bne.n	80043c4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80043a0:	2019      	movs	r0, #25
 80043a2:	f000 fe90 	bl	80050c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d808      	bhi.n	80043be <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80043ac:	2200      	movs	r2, #0
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	2019      	movs	r0, #25
 80043b2:	f000 fe6c 	bl	800508e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_InitTick+0xe0>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e002      	b.n	80043c4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80043c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3730      	adds	r7, #48	; 0x30
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	431bde83 	.word	0x431bde83
 80043d8:	20000698 	.word	0x20000698
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	2000002c 	.word	0x2000002c

080043e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043e8:	e7fe      	b.n	80043e8 <NMI_Handler+0x4>

080043ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ee:	e7fe      	b.n	80043ee <HardFault_Handler+0x4>

080043f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <MemManage_Handler+0x4>

080043f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043fa:	e7fe      	b.n	80043fa <BusFault_Handler+0x4>

080043fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004400:	e7fe      	b.n	8004400 <UsageFault_Handler+0x4>

08004402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
	...

08004410 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <DMA1_Channel4_IRQHandler+0x10>)
 8004416:	f001 f87f 	bl	8005518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200005a4 	.word	0x200005a4

08004424 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <TIM1_UP_IRQHandler+0x10>)
 800442a:	f002 fd4b 	bl	8006ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000698 	.word	0x20000698

08004438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800443c:	4802      	ldr	r0, [pc, #8]	; (8004448 <USART1_IRQHandler+0x10>)
 800443e:	f003 fbb1 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000055c 	.word	0x2000055c

0800444c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return 1;
 8004450:	2301      	movs	r3, #1
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <_kill>:

int _kill(int pid, int sig)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004464:	f008 f8f6 	bl	800c654 <__errno>
 8004468:	4603      	mov	r3, r0
 800446a:	2216      	movs	r2, #22
 800446c:	601a      	str	r2, [r3, #0]
  return -1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_exit>:

void _exit (int status)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004482:	f04f 31ff 	mov.w	r1, #4294967295
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ffe7 	bl	800445a <_kill>
  while (1) {}    /* Make sure we hang here */
 800448c:	e7fe      	b.n	800448c <_exit+0x12>

0800448e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e00a      	b.n	80044b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80044a0:	f3af 8000 	nop.w
 80044a4:	4601      	mov	r1, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	60ba      	str	r2, [r7, #8]
 80044ac:	b2ca      	uxtb	r2, r1
 80044ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3301      	adds	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	dbf0      	blt.n	80044a0 <_read+0x12>
  }

  return len;
 80044be:	687b      	ldr	r3, [r7, #4]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ee:	605a      	str	r2, [r3, #4]
  return 0;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <_isatty>:

int _isatty(int file)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004504:	2301      	movs	r3, #1
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <_sbrk+0x5c>)
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <_sbrk+0x60>)
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <_sbrk+0x64>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <_sbrk+0x64>)
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <_sbrk+0x68>)
 8004548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <_sbrk+0x64>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d207      	bcs.n	8004568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004558:	f008 f87c 	bl	800c654 <__errno>
 800455c:	4603      	mov	r3, r0
 800455e:	220c      	movs	r2, #12
 8004560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	e009      	b.n	800457c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <_sbrk+0x64>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <_sbrk+0x64>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	4a05      	ldr	r2, [pc, #20]	; (800458c <_sbrk+0x64>)
 8004578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	2000c000 	.word	0x2000c000
 8004588:	00000400 	.word	0x00000400
 800458c:	200006e0 	.word	0x200006e0
 8004590:	20003618 	.word	0x20003618

08004594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045a0:	f7ff fff8 	bl	8004594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80045a6:	490c      	ldr	r1, [pc, #48]	; (80045d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80045a8:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80045aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045ac:	e002      	b.n	80045b4 <LoopCopyDataInit>

080045ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045b2:	3304      	adds	r3, #4

080045b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b8:	d3f9      	bcc.n	80045ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80045bc:	4c09      	ldr	r4, [pc, #36]	; (80045e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045c0:	e001      	b.n	80045c6 <LoopFillZerobss>

080045c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045c4:	3204      	adds	r2, #4

080045c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c8:	d3fb      	bcc.n	80045c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045ca:	f008 f849 	bl	800c660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045ce:	f7fe ffe5 	bl	800359c <main>
  bx lr
 80045d2:	4770      	bx	lr
  ldr r0, =_sdata
 80045d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045d8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80045dc:	0800ff70 	.word	0x0800ff70
  ldr r2, =_sbss
 80045e0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80045e4:	20003614 	.word	0x20003614

080045e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045e8:	e7fe      	b.n	80045e8 <ADC1_2_IRQHandler>
	...

080045ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_Init+0x28>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_Init+0x28>)
 80045f6:	f043 0310 	orr.w	r3, r3, #16
 80045fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045fc:	2003      	movs	r0, #3
 80045fe:	f000 fd3b 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004602:	200f      	movs	r0, #15
 8004604:	f7ff fe7c 	bl	8004300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004608:	f7ff fc46 	bl	8003e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40022000 	.word	0x40022000

08004618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_IncTick+0x1c>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_IncTick+0x20>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4413      	add	r3, r2
 8004628:	4a03      	ldr	r2, [pc, #12]	; (8004638 <HAL_IncTick+0x20>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	20000030 	.word	0x20000030
 8004638:	200006e4 	.word	0x200006e4

0800463c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return uwTick;
 8004640:	4b02      	ldr	r3, [pc, #8]	; (800464c <HAL_GetTick+0x10>)
 8004642:	681b      	ldr	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	200006e4 	.word	0x200006e4

08004650 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0ce      	b.n	8004810 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff fc3a 	bl	8003f08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fc03 	bl	8004ea0 <ADC_ConversionStop_Disable>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 80a9 	bne.w	80047fe <HAL_ADC_Init+0x1ae>
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 80a5 	bne.w	80047fe <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046bc:	f023 0302 	bic.w	r3, r3, #2
 80046c0:	f043 0202 	orr.w	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4951      	ldr	r1, [pc, #324]	; (8004818 <HAL_ADC_Init+0x1c8>)
 80046d2:	428b      	cmp	r3, r1
 80046d4:	d10a      	bne.n	80046ec <HAL_ADC_Init+0x9c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046de:	d002      	beq.n	80046e6 <HAL_ADC_Init+0x96>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	e004      	b.n	80046f0 <HAL_ADC_Init+0xa0>
 80046e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046ea:	e001      	b.n	80046f0 <HAL_ADC_Init+0xa0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80046f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7b1b      	ldrb	r3, [r3, #12]
 80046f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80046f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004708:	d003      	beq.n	8004712 <HAL_ADC_Init+0xc2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d102      	bne.n	8004718 <HAL_ADC_Init+0xc8>
 8004712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004716:	e000      	b.n	800471a <HAL_ADC_Init+0xca>
 8004718:	2300      	movs	r3, #0
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7d1b      	ldrb	r3, [r3, #20]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d119      	bne.n	800475c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7b1b      	ldrb	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	3b01      	subs	r3, #1
 8004736:	035a      	lsls	r2, r3, #13
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e00b      	b.n	800475c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	f043 0201 	orr.w	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_ADC_Init+0x1cc>)
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	430b      	orrs	r3, r1
 8004782:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478c:	d003      	beq.n	8004796 <HAL_ADC_Init+0x146>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d104      	bne.n	80047a0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	3b01      	subs	r3, #1
 800479c:	051b      	lsls	r3, r3, #20
 800479e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_ADC_Init+0x1d0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d10b      	bne.n	80047dc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80047da:	e018      	b.n	800480e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f023 0312 	bic.w	r3, r3, #18
 80047e4:	f043 0210 	orr.w	r2, r3, #16
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80047fc:	e007      	b.n	800480e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	f043 0210 	orr.w	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40013c00 	.word	0x40013c00
 800481c:	ffe1f7fd 	.word	0xffe1f7fd
 8004820:	ff1f0efe 	.word	0xff1f0efe

08004824 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_ADC_Start+0x1a>
 800483a:	2302      	movs	r3, #2
 800483c:	e098      	b.n	8004970 <HAL_ADC_Start+0x14c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fad0 	bl	8004dec <ADC_Enable>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 8087 	bne.w	8004966 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a41      	ldr	r2, [pc, #260]	; (8004978 <HAL_ADC_Start+0x154>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d105      	bne.n	8004882 <HAL_ADC_Start+0x5e>
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <HAL_ADC_Start+0x158>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d115      	bne.n	80048ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d026      	beq.n	80048ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048ac:	e01d      	b.n	80048ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2f      	ldr	r2, [pc, #188]	; (800497c <HAL_ADC_Start+0x158>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_ADC_Start+0xaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2b      	ldr	r2, [pc, #172]	; (8004978 <HAL_ADC_Start+0x154>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10d      	bne.n	80048ea <HAL_ADC_Start+0xc6>
 80048ce:	4b2b      	ldr	r3, [pc, #172]	; (800497c <HAL_ADC_Start+0x158>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	f023 0206 	bic.w	r2, r3, #6
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c
 8004902:	e002      	b.n	800490a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0202 	mvn.w	r2, #2
 800491a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004926:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800492a:	d113      	bne.n	8004954 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004930:	4a11      	ldr	r2, [pc, #68]	; (8004978 <HAL_ADC_Start+0x154>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d105      	bne.n	8004942 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_ADC_Start+0x158>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800493e:	2b00      	cmp	r3, #0
 8004940:	d108      	bne.n	8004954 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	e00c      	b.n	800496e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	e003      	b.n	800496e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40012800 	.word	0x40012800
 800497c:	40012400 	.word	0x40012400

08004980 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_ADC_Stop+0x1a>
 8004996:	2302      	movs	r3, #2
 8004998:	e01a      	b.n	80049d0 <HAL_ADC_Stop+0x50>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa7c 	bl	8004ea0 <ADC_ConversionStop_Disable>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80049ee:	f7ff fe25 	bl	800463c <HAL_GetTick>
 80049f2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0d3      	b.n	8004bc2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d131      	bne.n	8004a8c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d12a      	bne.n	8004a8c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004a36:	e021      	b.n	8004a7c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d01d      	beq.n	8004a7c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_ADC_PollForConversion+0x7e>
 8004a46:	f7ff fdf9 	bl	800463c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d212      	bcs.n	8004a7c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	f043 0204 	orr.w	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0a2      	b.n	8004bc2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0d6      	beq.n	8004a38 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004a8a:	e070      	b.n	8004b6e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004a8c:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <HAL_ADC_PollForConversion+0x1f4>)
 8004a8e:	681c      	ldr	r4, [r3, #0]
 8004a90:	2002      	movs	r0, #2
 8004a92:	f001 fe4d 	bl	8006730 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a96:	4603      	mov	r3, r0
 8004a98:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6919      	ldr	r1, [r3, #16]
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	; (8004bd0 <HAL_ADC_PollForConversion+0x1f8>)
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_ADC_PollForConversion+0x104>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_ADC_PollForConversion+0x1fc>)
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d111      	bne.n	8004adc <HAL_ADC_PollForConversion+0x104>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6919      	ldr	r1, [r3, #16]
 8004abe:	4b46      	ldr	r3, [pc, #280]	; (8004bd8 <HAL_ADC_PollForConversion+0x200>)
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_ADC_PollForConversion+0x100>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68d9      	ldr	r1, [r3, #12]
 8004acc:	4b43      	ldr	r3, [pc, #268]	; (8004bdc <HAL_ADC_PollForConversion+0x204>)
 8004ace:	400b      	ands	r3, r1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_PollForConversion+0x100>
 8004ad4:	2314      	movs	r3, #20
 8004ad6:	e020      	b.n	8004b1a <HAL_ADC_PollForConversion+0x142>
 8004ad8:	2329      	movs	r3, #41	; 0x29
 8004ada:	e01e      	b.n	8004b1a <HAL_ADC_PollForConversion+0x142>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6919      	ldr	r1, [r3, #16]
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_ADC_PollForConversion+0x200>)
 8004ae4:	400b      	ands	r3, r1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_ADC_PollForConversion+0x120>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68d9      	ldr	r1, [r3, #12]
 8004af0:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <HAL_ADC_PollForConversion+0x204>)
 8004af2:	400b      	ands	r3, r1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <HAL_ADC_PollForConversion+0x13c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <HAL_ADC_PollForConversion+0x208>)
 8004b00:	400b      	ands	r3, r1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_ADC_PollForConversion+0x140>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68d9      	ldr	r1, [r3, #12]
 8004b0c:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <HAL_ADC_PollForConversion+0x208>)
 8004b0e:	400b      	ands	r3, r1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_ADC_PollForConversion+0x140>
 8004b14:	2354      	movs	r3, #84	; 0x54
 8004b16:	e000      	b.n	8004b1a <HAL_ADC_PollForConversion+0x142>
 8004b18:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004b20:	e021      	b.n	8004b66 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d01a      	beq.n	8004b60 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_ADC_PollForConversion+0x168>
 8004b30:	f7ff fd84 	bl	800463c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d20f      	bcs.n	8004b60 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d90b      	bls.n	8004b60 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e030      	b.n	8004bc2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d8d9      	bhi.n	8004b22 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0212 	mvn.w	r2, #18
 8004b76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b92:	d115      	bne.n	8004bc0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd90      	pop	{r4, r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000028 	.word	0x20000028
 8004bd0:	24924924 	.word	0x24924924
 8004bd4:	00924924 	.word	0x00924924
 8004bd8:	12492492 	.word	0x12492492
 8004bdc:	00492492 	.word	0x00492492
 8004be0:	00249249 	.word	0x00249249

08004be4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x20>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e0dc      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x1da>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d81c      	bhi.n	8004c66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3b05      	subs	r3, #5
 8004c3e:	221f      	movs	r2, #31
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	4019      	ands	r1, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	3b05      	subs	r3, #5
 8004c58:	fa00 f203 	lsl.w	r2, r0, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	635a      	str	r2, [r3, #52]	; 0x34
 8004c64:	e03c      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d81c      	bhi.n	8004ca8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3b23      	subs	r3, #35	; 0x23
 8004c80:	221f      	movs	r2, #31
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4019      	ands	r1, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	3b23      	subs	r3, #35	; 0x23
 8004c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca6:	e01b      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3b41      	subs	r3, #65	; 0x41
 8004cba:	221f      	movs	r2, #31
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	4019      	ands	r1, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3b41      	subs	r3, #65	; 0x41
 8004cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	d91c      	bls.n	8004d22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3b1e      	subs	r3, #30
 8004cfa:	2207      	movs	r2, #7
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	4019      	ands	r1, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6898      	ldr	r0, [r3, #8]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	3b1e      	subs	r3, #30
 8004d14:	fa00 f203 	lsl.w	r2, r0, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	e019      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6919      	ldr	r1, [r3, #16]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	2207      	movs	r2, #7
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	4019      	ands	r1, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6898      	ldr	r0, [r3, #8]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d003      	beq.n	8004d66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d62:	2b11      	cmp	r3, #17
 8004d64:	d132      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_ADC_ConfigChannel+0x1e4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d125      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d126      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004d8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d11a      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d96:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <HAL_ADC_ConfigChannel+0x1ec>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	0c9a      	lsrs	r2, r3, #18
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004dac:	e002      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f9      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x1b2>
 8004dba:	e007      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	40012400 	.word	0x40012400
 8004de4:	20000028 	.word	0x20000028
 8004de8:	431bde83 	.word	0x431bde83

08004dec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d040      	beq.n	8004e8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <ADC_Enable+0xac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <ADC_Enable+0xb0>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	0c9b      	lsrs	r3, r3, #18
 8004e26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e28:	e002      	b.n	8004e30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f9      	bne.n	8004e2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e36:	f7ff fc01 	bl	800463c <HAL_GetTick>
 8004e3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004e3c:	e01f      	b.n	8004e7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e3e:	f7ff fbfd 	bl	800463c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d918      	bls.n	8004e7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d011      	beq.n	8004e7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e007      	b.n	8004e8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d1d8      	bne.n	8004e3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000028 	.word	0x20000028
 8004e9c:	431bde83 	.word	0x431bde83

08004ea0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d12e      	bne.n	8004f18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004eca:	f7ff fbb7 	bl	800463c <HAL_GetTick>
 8004ece:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ed0:	e01b      	b.n	8004f0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ed2:	f7ff fbb3 	bl	800463c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d914      	bls.n	8004f0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10d      	bne.n	8004f0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f043 0210 	orr.w	r2, r3, #16
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e007      	b.n	8004f1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d0dc      	beq.n	8004ed2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f40:	4013      	ands	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	60d3      	str	r3, [r2, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <__NVIC_GetPriorityGrouping+0x18>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	f003 0307 	and.w	r3, r3, #7
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	db0b      	blt.n	8004fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	f003 021f 	and.w	r2, r3, #31
 8004fa0:	4906      	ldr	r1, [pc, #24]	; (8004fbc <__NVIC_EnableIRQ+0x34>)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2001      	movs	r0, #1
 8004faa:	fa00 f202 	lsl.w	r2, r0, r2
 8004fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	e000e100 	.word	0xe000e100

08004fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	6039      	str	r1, [r7, #0]
 8004fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db0a      	blt.n	8004fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	490c      	ldr	r1, [pc, #48]	; (800500c <__NVIC_SetPriority+0x4c>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	0112      	lsls	r2, r2, #4
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fe8:	e00a      	b.n	8005000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4908      	ldr	r1, [pc, #32]	; (8005010 <__NVIC_SetPriority+0x50>)
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	761a      	strb	r2, [r3, #24]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	e000e100 	.word	0xe000e100
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	2b04      	cmp	r3, #4
 8005030:	bf28      	it	cs
 8005032:	2304      	movcs	r3, #4
 8005034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3304      	adds	r3, #4
 800503a:	2b06      	cmp	r3, #6
 800503c:	d902      	bls.n	8005044 <NVIC_EncodePriority+0x30>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3b03      	subs	r3, #3
 8005042:	e000      	b.n	8005046 <NVIC_EncodePriority+0x32>
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005048:	f04f 32ff 	mov.w	r2, #4294967295
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43da      	mvns	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	401a      	ands	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800505c:	f04f 31ff 	mov.w	r1, #4294967295
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	43d9      	mvns	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800506c:	4313      	orrs	r3, r2
         );
}
 800506e:	4618      	mov	r0, r3
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff4f 	bl	8004f24 <__NVIC_SetPriorityGrouping>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050a0:	f7ff ff64 	bl	8004f6c <__NVIC_GetPriorityGrouping>
 80050a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff ffb2 	bl	8005014 <NVIC_EncodePriority>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff ff81 	bl	8004fc0 <__NVIC_SetPriority>
}
 80050be:	bf00      	nop
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	4603      	mov	r3, r0
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff57 	bl	8004f88 <__NVIC_EnableIRQ>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e059      	b.n	80051ae <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <HAL_DMA_Init+0xd4>)
 8005102:	429a      	cmp	r2, r3
 8005104:	d80f      	bhi.n	8005126 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_DMA_Init+0xd8>)
 800510e:	4413      	add	r3, r2
 8005110:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <HAL_DMA_Init+0xdc>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	009a      	lsls	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <HAL_DMA_Init+0xe0>)
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c
 8005124:	e00e      	b.n	8005144 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <HAL_DMA_Init+0xe4>)
 800512e:	4413      	add	r3, r2
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_DMA_Init+0xdc>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	009a      	lsls	r2, r3, #2
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_DMA_Init+0xe8>)
 8005142:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800515a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800515e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	40020407 	.word	0x40020407
 80051bc:	bffdfff8 	.word	0xbffdfff8
 80051c0:	cccccccd 	.word	0xcccccccd
 80051c4:	40020000 	.word	0x40020000
 80051c8:	bffdfbf8 	.word	0xbffdfbf8
 80051cc:	40020400 	.word	0x40020400

080051d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_DMA_Start_IT+0x20>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e04b      	b.n	8005288 <HAL_DMA_Start_IT+0xb8>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d13a      	bne.n	800527a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fbb1 	bl	8005990 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 020e 	orr.w	r2, r2, #14
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e00f      	b.n	8005268 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0204 	bic.w	r2, r2, #4
 8005256:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 020a 	orr.w	r2, r2, #10
 8005266:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e005      	b.n	8005286 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005282:	2302      	movs	r3, #2
 8005284:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d008      	beq.n	80052ba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2204      	movs	r2, #4
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e020      	b.n	80052fc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 020e 	bic.w	r2, r2, #14
 80052c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f202 	lsl.w	r2, r1, r2
 80052e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
	...

08005308 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d005      	beq.n	800532c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2204      	movs	r2, #4
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
 800532a:	e0d6      	b.n	80054da <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	4b64      	ldr	r3, [pc, #400]	; (80054e4 <HAL_DMA_Abort_IT+0x1dc>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d958      	bls.n	800540a <HAL_DMA_Abort_IT+0x102>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a62      	ldr	r2, [pc, #392]	; (80054e8 <HAL_DMA_Abort_IT+0x1e0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d04f      	beq.n	8005402 <HAL_DMA_Abort_IT+0xfa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a61      	ldr	r2, [pc, #388]	; (80054ec <HAL_DMA_Abort_IT+0x1e4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d048      	beq.n	80053fe <HAL_DMA_Abort_IT+0xf6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <HAL_DMA_Abort_IT+0x1e8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d040      	beq.n	80053f8 <HAL_DMA_Abort_IT+0xf0>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <HAL_DMA_Abort_IT+0x1ec>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d038      	beq.n	80053f2 <HAL_DMA_Abort_IT+0xea>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5c      	ldr	r2, [pc, #368]	; (80054f8 <HAL_DMA_Abort_IT+0x1f0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d030      	beq.n	80053ec <HAL_DMA_Abort_IT+0xe4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5b      	ldr	r2, [pc, #364]	; (80054fc <HAL_DMA_Abort_IT+0x1f4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d028      	beq.n	80053e6 <HAL_DMA_Abort_IT+0xde>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a52      	ldr	r2, [pc, #328]	; (80054e4 <HAL_DMA_Abort_IT+0x1dc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d020      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xd8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a57      	ldr	r2, [pc, #348]	; (8005500 <HAL_DMA_Abort_IT+0x1f8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d019      	beq.n	80053dc <HAL_DMA_Abort_IT+0xd4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a55      	ldr	r2, [pc, #340]	; (8005504 <HAL_DMA_Abort_IT+0x1fc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d012      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xd0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a54      	ldr	r2, [pc, #336]	; (8005508 <HAL_DMA_Abort_IT+0x200>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00a      	beq.n	80053d2 <HAL_DMA_Abort_IT+0xca>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a52      	ldr	r2, [pc, #328]	; (800550c <HAL_DMA_Abort_IT+0x204>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d102      	bne.n	80053cc <HAL_DMA_Abort_IT+0xc4>
 80053c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ca:	e01b      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053d0:	e018      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053d6:	e015      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053d8:	2310      	movs	r3, #16
 80053da:	e013      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053dc:	2301      	movs	r3, #1
 80053de:	e011      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e4:	e00e      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053ea:	e00b      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f0:	e008      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f6:	e005      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053fc:	e002      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 80053fe:	2310      	movs	r3, #16
 8005400:	e000      	b.n	8005404 <HAL_DMA_Abort_IT+0xfc>
 8005402:	2301      	movs	r3, #1
 8005404:	4a42      	ldr	r2, [pc, #264]	; (8005510 <HAL_DMA_Abort_IT+0x208>)
 8005406:	6053      	str	r3, [r2, #4]
 8005408:	e057      	b.n	80054ba <HAL_DMA_Abort_IT+0x1b2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a36      	ldr	r2, [pc, #216]	; (80054e8 <HAL_DMA_Abort_IT+0x1e0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d04f      	beq.n	80054b4 <HAL_DMA_Abort_IT+0x1ac>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a34      	ldr	r2, [pc, #208]	; (80054ec <HAL_DMA_Abort_IT+0x1e4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d048      	beq.n	80054b0 <HAL_DMA_Abort_IT+0x1a8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <HAL_DMA_Abort_IT+0x1e8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d040      	beq.n	80054aa <HAL_DMA_Abort_IT+0x1a2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a31      	ldr	r2, [pc, #196]	; (80054f4 <HAL_DMA_Abort_IT+0x1ec>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d038      	beq.n	80054a4 <HAL_DMA_Abort_IT+0x19c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <HAL_DMA_Abort_IT+0x1f0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d030      	beq.n	800549e <HAL_DMA_Abort_IT+0x196>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2e      	ldr	r2, [pc, #184]	; (80054fc <HAL_DMA_Abort_IT+0x1f4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d028      	beq.n	8005498 <HAL_DMA_Abort_IT+0x190>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <HAL_DMA_Abort_IT+0x1dc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d020      	beq.n	8005492 <HAL_DMA_Abort_IT+0x18a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <HAL_DMA_Abort_IT+0x1f8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d019      	beq.n	800548e <HAL_DMA_Abort_IT+0x186>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a29      	ldr	r2, [pc, #164]	; (8005504 <HAL_DMA_Abort_IT+0x1fc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d012      	beq.n	800548a <HAL_DMA_Abort_IT+0x182>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <HAL_DMA_Abort_IT+0x200>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00a      	beq.n	8005484 <HAL_DMA_Abort_IT+0x17c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a26      	ldr	r2, [pc, #152]	; (800550c <HAL_DMA_Abort_IT+0x204>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d102      	bne.n	800547e <HAL_DMA_Abort_IT+0x176>
 8005478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547c:	e01b      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 800547e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005482:	e018      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 8005484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005488:	e015      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 800548a:	2310      	movs	r3, #16
 800548c:	e013      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 800548e:	2301      	movs	r3, #1
 8005490:	e011      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 8005492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005496:	e00e      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 8005498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800549c:	e00b      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 800549e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054a2:	e008      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 80054a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054a8:	e005      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 80054aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ae:	e002      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 80054b0:	2310      	movs	r3, #16
 80054b2:	e000      	b.n	80054b6 <HAL_DMA_Abort_IT+0x1ae>
 80054b4:	2301      	movs	r3, #1
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_DMA_Abort_IT+0x20c>)
 80054b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    } 
  }
  return status;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40020080 	.word	0x40020080
 80054e8:	40020008 	.word	0x40020008
 80054ec:	4002001c 	.word	0x4002001c
 80054f0:	40020030 	.word	0x40020030
 80054f4:	40020044 	.word	0x40020044
 80054f8:	40020058 	.word	0x40020058
 80054fc:	4002006c 	.word	0x4002006c
 8005500:	40020408 	.word	0x40020408
 8005504:	4002041c 	.word	0x4002041c
 8005508:	40020430 	.word	0x40020430
 800550c:	40020444 	.word	0x40020444
 8005510:	40020400 	.word	0x40020400
 8005514:	40020000 	.word	0x40020000

08005518 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	2204      	movs	r2, #4
 8005536:	409a      	lsls	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80f1 	beq.w	8005724 <HAL_DMA_IRQHandler+0x20c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80eb 	beq.w	8005724 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	4b5f      	ldr	r3, [pc, #380]	; (80056f0 <HAL_DMA_IRQHandler+0x1d8>)
 8005574:	429a      	cmp	r2, r3
 8005576:	d958      	bls.n	800562a <HAL_DMA_IRQHandler+0x112>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a5d      	ldr	r2, [pc, #372]	; (80056f4 <HAL_DMA_IRQHandler+0x1dc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d04f      	beq.n	8005622 <HAL_DMA_IRQHandler+0x10a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a5c      	ldr	r2, [pc, #368]	; (80056f8 <HAL_DMA_IRQHandler+0x1e0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d048      	beq.n	800561e <HAL_DMA_IRQHandler+0x106>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a5a      	ldr	r2, [pc, #360]	; (80056fc <HAL_DMA_IRQHandler+0x1e4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d040      	beq.n	8005618 <HAL_DMA_IRQHandler+0x100>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a59      	ldr	r2, [pc, #356]	; (8005700 <HAL_DMA_IRQHandler+0x1e8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d038      	beq.n	8005612 <HAL_DMA_IRQHandler+0xfa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a57      	ldr	r2, [pc, #348]	; (8005704 <HAL_DMA_IRQHandler+0x1ec>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d030      	beq.n	800560c <HAL_DMA_IRQHandler+0xf4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a56      	ldr	r2, [pc, #344]	; (8005708 <HAL_DMA_IRQHandler+0x1f0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d028      	beq.n	8005606 <HAL_DMA_IRQHandler+0xee>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a4d      	ldr	r2, [pc, #308]	; (80056f0 <HAL_DMA_IRQHandler+0x1d8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d020      	beq.n	8005600 <HAL_DMA_IRQHandler+0xe8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a52      	ldr	r2, [pc, #328]	; (800570c <HAL_DMA_IRQHandler+0x1f4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d019      	beq.n	80055fc <HAL_DMA_IRQHandler+0xe4>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a50      	ldr	r2, [pc, #320]	; (8005710 <HAL_DMA_IRQHandler+0x1f8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d012      	beq.n	80055f8 <HAL_DMA_IRQHandler+0xe0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a4f      	ldr	r2, [pc, #316]	; (8005714 <HAL_DMA_IRQHandler+0x1fc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00a      	beq.n	80055f2 <HAL_DMA_IRQHandler+0xda>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a4d      	ldr	r2, [pc, #308]	; (8005718 <HAL_DMA_IRQHandler+0x200>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d102      	bne.n	80055ec <HAL_DMA_IRQHandler+0xd4>
 80055e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ea:	e01b      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 80055ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055f0:	e018      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 80055f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f6:	e015      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 80055f8:	2340      	movs	r3, #64	; 0x40
 80055fa:	e013      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 80055fc:	2304      	movs	r3, #4
 80055fe:	e011      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 8005600:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005604:	e00e      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 8005606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800560a:	e00b      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 800560c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005610:	e008      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 8005612:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005616:	e005      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 8005618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561c:	e002      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	e000      	b.n	8005624 <HAL_DMA_IRQHandler+0x10c>
 8005622:	2304      	movs	r3, #4
 8005624:	4a3d      	ldr	r2, [pc, #244]	; (800571c <HAL_DMA_IRQHandler+0x204>)
 8005626:	6053      	str	r3, [r2, #4]
 8005628:	e057      	b.n	80056da <HAL_DMA_IRQHandler+0x1c2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_IRQHandler+0x1dc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d04f      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x1bc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <HAL_DMA_IRQHandler+0x1e0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d048      	beq.n	80056d0 <HAL_DMA_IRQHandler+0x1b8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_IRQHandler+0x1e4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d040      	beq.n	80056ca <HAL_DMA_IRQHandler+0x1b2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <HAL_DMA_IRQHandler+0x1e8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d038      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x1ac>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_IRQHandler+0x1ec>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d030      	beq.n	80056be <HAL_DMA_IRQHandler+0x1a6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_DMA_IRQHandler+0x1f0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d028      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x1a0>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_DMA_IRQHandler+0x1d8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d020      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x19a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a25      	ldr	r2, [pc, #148]	; (800570c <HAL_DMA_IRQHandler+0x1f4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d019      	beq.n	80056ae <HAL_DMA_IRQHandler+0x196>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a24      	ldr	r2, [pc, #144]	; (8005710 <HAL_DMA_IRQHandler+0x1f8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d012      	beq.n	80056aa <HAL_DMA_IRQHandler+0x192>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a22      	ldr	r2, [pc, #136]	; (8005714 <HAL_DMA_IRQHandler+0x1fc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00a      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x18c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a21      	ldr	r2, [pc, #132]	; (8005718 <HAL_DMA_IRQHandler+0x200>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d102      	bne.n	800569e <HAL_DMA_IRQHandler+0x186>
 8005698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800569c:	e01b      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 800569e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056a2:	e018      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a8:	e015      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056aa:	2340      	movs	r3, #64	; 0x40
 80056ac:	e013      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056ae:	2304      	movs	r3, #4
 80056b0:	e011      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80056b6:	e00e      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056bc:	e00b      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056c2:	e008      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056c8:	e005      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ce:	e002      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056d0:	2340      	movs	r3, #64	; 0x40
 80056d2:	e000      	b.n	80056d6 <HAL_DMA_IRQHandler+0x1be>
 80056d4:	2304      	movs	r3, #4
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <HAL_DMA_IRQHandler+0x208>)
 80056d8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8136 	beq.w	8005950 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80056ec:	e130      	b.n	8005950 <HAL_DMA_IRQHandler+0x438>
 80056ee:	bf00      	nop
 80056f0:	40020080 	.word	0x40020080
 80056f4:	40020008 	.word	0x40020008
 80056f8:	4002001c 	.word	0x4002001c
 80056fc:	40020030 	.word	0x40020030
 8005700:	40020044 	.word	0x40020044
 8005704:	40020058 	.word	0x40020058
 8005708:	4002006c 	.word	0x4002006c
 800570c:	40020408 	.word	0x40020408
 8005710:	4002041c 	.word	0x4002041c
 8005714:	40020430 	.word	0x40020430
 8005718:	40020444 	.word	0x40020444
 800571c:	40020400 	.word	0x40020400
 8005720:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	2202      	movs	r2, #2
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80dd 	beq.w	80058f0 <HAL_DMA_IRQHandler+0x3d8>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80d7 	beq.w	80058f0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 020a 	bic.w	r2, r2, #10
 800575e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	4b7b      	ldr	r3, [pc, #492]	; (800595c <HAL_DMA_IRQHandler+0x444>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d958      	bls.n	8005826 <HAL_DMA_IRQHandler+0x30e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a79      	ldr	r2, [pc, #484]	; (8005960 <HAL_DMA_IRQHandler+0x448>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d04f      	beq.n	800581e <HAL_DMA_IRQHandler+0x306>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a78      	ldr	r2, [pc, #480]	; (8005964 <HAL_DMA_IRQHandler+0x44c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d048      	beq.n	800581a <HAL_DMA_IRQHandler+0x302>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a76      	ldr	r2, [pc, #472]	; (8005968 <HAL_DMA_IRQHandler+0x450>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d040      	beq.n	8005814 <HAL_DMA_IRQHandler+0x2fc>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a75      	ldr	r2, [pc, #468]	; (800596c <HAL_DMA_IRQHandler+0x454>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d038      	beq.n	800580e <HAL_DMA_IRQHandler+0x2f6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a73      	ldr	r2, [pc, #460]	; (8005970 <HAL_DMA_IRQHandler+0x458>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d030      	beq.n	8005808 <HAL_DMA_IRQHandler+0x2f0>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a72      	ldr	r2, [pc, #456]	; (8005974 <HAL_DMA_IRQHandler+0x45c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d028      	beq.n	8005802 <HAL_DMA_IRQHandler+0x2ea>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a69      	ldr	r2, [pc, #420]	; (800595c <HAL_DMA_IRQHandler+0x444>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d020      	beq.n	80057fc <HAL_DMA_IRQHandler+0x2e4>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a6e      	ldr	r2, [pc, #440]	; (8005978 <HAL_DMA_IRQHandler+0x460>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d019      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x2e0>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a6c      	ldr	r2, [pc, #432]	; (800597c <HAL_DMA_IRQHandler+0x464>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d012      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x2dc>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6b      	ldr	r2, [pc, #428]	; (8005980 <HAL_DMA_IRQHandler+0x468>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00a      	beq.n	80057ee <HAL_DMA_IRQHandler+0x2d6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a69      	ldr	r2, [pc, #420]	; (8005984 <HAL_DMA_IRQHandler+0x46c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d102      	bne.n	80057e8 <HAL_DMA_IRQHandler+0x2d0>
 80057e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057e6:	e01b      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 80057e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ec:	e018      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 80057ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f2:	e015      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 80057f4:	2320      	movs	r3, #32
 80057f6:	e013      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e011      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 80057fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005800:	e00e      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 8005802:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005806:	e00b      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 8005808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800580c:	e008      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 800580e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005812:	e005      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 8005814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005818:	e002      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 800581a:	2320      	movs	r3, #32
 800581c:	e000      	b.n	8005820 <HAL_DMA_IRQHandler+0x308>
 800581e:	2302      	movs	r3, #2
 8005820:	4a59      	ldr	r2, [pc, #356]	; (8005988 <HAL_DMA_IRQHandler+0x470>)
 8005822:	6053      	str	r3, [r2, #4]
 8005824:	e057      	b.n	80058d6 <HAL_DMA_IRQHandler+0x3be>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a4d      	ldr	r2, [pc, #308]	; (8005960 <HAL_DMA_IRQHandler+0x448>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d04f      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x3b8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a4b      	ldr	r2, [pc, #300]	; (8005964 <HAL_DMA_IRQHandler+0x44c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d048      	beq.n	80058cc <HAL_DMA_IRQHandler+0x3b4>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a4a      	ldr	r2, [pc, #296]	; (8005968 <HAL_DMA_IRQHandler+0x450>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d040      	beq.n	80058c6 <HAL_DMA_IRQHandler+0x3ae>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a48      	ldr	r2, [pc, #288]	; (800596c <HAL_DMA_IRQHandler+0x454>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d038      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x3a8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a47      	ldr	r2, [pc, #284]	; (8005970 <HAL_DMA_IRQHandler+0x458>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d030      	beq.n	80058ba <HAL_DMA_IRQHandler+0x3a2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a45      	ldr	r2, [pc, #276]	; (8005974 <HAL_DMA_IRQHandler+0x45c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d028      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x39c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3d      	ldr	r2, [pc, #244]	; (800595c <HAL_DMA_IRQHandler+0x444>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d020      	beq.n	80058ae <HAL_DMA_IRQHandler+0x396>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a41      	ldr	r2, [pc, #260]	; (8005978 <HAL_DMA_IRQHandler+0x460>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d019      	beq.n	80058aa <HAL_DMA_IRQHandler+0x392>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <HAL_DMA_IRQHandler+0x464>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d012      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x38e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a3e      	ldr	r2, [pc, #248]	; (8005980 <HAL_DMA_IRQHandler+0x468>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00a      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x388>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a3d      	ldr	r2, [pc, #244]	; (8005984 <HAL_DMA_IRQHandler+0x46c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d102      	bne.n	800589a <HAL_DMA_IRQHandler+0x382>
 8005894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005898:	e01b      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 800589a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800589e:	e018      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058a4:	e015      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058a6:	2320      	movs	r3, #32
 80058a8:	e013      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e011      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b2:	e00e      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058b8:	e00b      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058be:	e008      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c4:	e005      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ca:	e002      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058cc:	2320      	movs	r3, #32
 80058ce:	e000      	b.n	80058d2 <HAL_DMA_IRQHandler+0x3ba>
 80058d0:	2302      	movs	r3, #2
 80058d2:	4a2e      	ldr	r2, [pc, #184]	; (800598c <HAL_DMA_IRQHandler+0x474>)
 80058d4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d034      	beq.n	8005950 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80058ee:	e02f      	b.n	8005950 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	2208      	movs	r2, #8
 80058f6:	409a      	lsls	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d028      	beq.n	8005952 <HAL_DMA_IRQHandler+0x43a>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d023      	beq.n	8005952 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 020e 	bic.w	r2, r2, #14
 8005918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	2101      	movs	r1, #1
 8005924:	fa01 f202 	lsl.w	r2, r1, r2
 8005928:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
    }
  }
  return;
 8005950:	bf00      	nop
 8005952:	bf00      	nop
}
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40020080 	.word	0x40020080
 8005960:	40020008 	.word	0x40020008
 8005964:	4002001c 	.word	0x4002001c
 8005968:	40020030 	.word	0x40020030
 800596c:	40020044 	.word	0x40020044
 8005970:	40020058 	.word	0x40020058
 8005974:	4002006c 	.word	0x4002006c
 8005978:	40020408 	.word	0x40020408
 800597c:	4002041c 	.word	0x4002041c
 8005980:	40020430 	.word	0x40020430
 8005984:	40020444 	.word	0x40020444
 8005988:	40020400 	.word	0x40020400
 800598c:	40020000 	.word	0x40020000

08005990 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d108      	bne.n	80059d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059ce:	e007      	b.n	80059e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b08b      	sub	sp, #44	; 0x2c
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059f6:	2300      	movs	r3, #0
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059fe:	e179      	b.n	8005cf4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a00:	2201      	movs	r2, #1
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	f040 8168 	bne.w	8005cee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4a96      	ldr	r2, [pc, #600]	; (8005c7c <HAL_GPIO_Init+0x290>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d05e      	beq.n	8005ae6 <HAL_GPIO_Init+0xfa>
 8005a28:	4a94      	ldr	r2, [pc, #592]	; (8005c7c <HAL_GPIO_Init+0x290>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d875      	bhi.n	8005b1a <HAL_GPIO_Init+0x12e>
 8005a2e:	4a94      	ldr	r2, [pc, #592]	; (8005c80 <HAL_GPIO_Init+0x294>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d058      	beq.n	8005ae6 <HAL_GPIO_Init+0xfa>
 8005a34:	4a92      	ldr	r2, [pc, #584]	; (8005c80 <HAL_GPIO_Init+0x294>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d86f      	bhi.n	8005b1a <HAL_GPIO_Init+0x12e>
 8005a3a:	4a92      	ldr	r2, [pc, #584]	; (8005c84 <HAL_GPIO_Init+0x298>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d052      	beq.n	8005ae6 <HAL_GPIO_Init+0xfa>
 8005a40:	4a90      	ldr	r2, [pc, #576]	; (8005c84 <HAL_GPIO_Init+0x298>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d869      	bhi.n	8005b1a <HAL_GPIO_Init+0x12e>
 8005a46:	4a90      	ldr	r2, [pc, #576]	; (8005c88 <HAL_GPIO_Init+0x29c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d04c      	beq.n	8005ae6 <HAL_GPIO_Init+0xfa>
 8005a4c:	4a8e      	ldr	r2, [pc, #568]	; (8005c88 <HAL_GPIO_Init+0x29c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d863      	bhi.n	8005b1a <HAL_GPIO_Init+0x12e>
 8005a52:	4a8e      	ldr	r2, [pc, #568]	; (8005c8c <HAL_GPIO_Init+0x2a0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d046      	beq.n	8005ae6 <HAL_GPIO_Init+0xfa>
 8005a58:	4a8c      	ldr	r2, [pc, #560]	; (8005c8c <HAL_GPIO_Init+0x2a0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d85d      	bhi.n	8005b1a <HAL_GPIO_Init+0x12e>
 8005a5e:	2b12      	cmp	r3, #18
 8005a60:	d82a      	bhi.n	8005ab8 <HAL_GPIO_Init+0xcc>
 8005a62:	2b12      	cmp	r3, #18
 8005a64:	d859      	bhi.n	8005b1a <HAL_GPIO_Init+0x12e>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <HAL_GPIO_Init+0x80>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005ae7 	.word	0x08005ae7
 8005a70:	08005ac1 	.word	0x08005ac1
 8005a74:	08005ad3 	.word	0x08005ad3
 8005a78:	08005b15 	.word	0x08005b15
 8005a7c:	08005b1b 	.word	0x08005b1b
 8005a80:	08005b1b 	.word	0x08005b1b
 8005a84:	08005b1b 	.word	0x08005b1b
 8005a88:	08005b1b 	.word	0x08005b1b
 8005a8c:	08005b1b 	.word	0x08005b1b
 8005a90:	08005b1b 	.word	0x08005b1b
 8005a94:	08005b1b 	.word	0x08005b1b
 8005a98:	08005b1b 	.word	0x08005b1b
 8005a9c:	08005b1b 	.word	0x08005b1b
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b1b 	.word	0x08005b1b
 8005aa8:	08005b1b 	.word	0x08005b1b
 8005aac:	08005b1b 	.word	0x08005b1b
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	4a75      	ldr	r2, [pc, #468]	; (8005c90 <HAL_GPIO_Init+0x2a4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005abe:	e02c      	b.n	8005b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	623b      	str	r3, [r7, #32]
          break;
 8005ac6:	e029      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	3304      	adds	r3, #4
 8005ace:	623b      	str	r3, [r7, #32]
          break;
 8005ad0:	e024      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	623b      	str	r3, [r7, #32]
          break;
 8005ada:	e01f      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	623b      	str	r3, [r7, #32]
          break;
 8005ae4:	e01a      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005aee:	2304      	movs	r3, #4
 8005af0:	623b      	str	r3, [r7, #32]
          break;
 8005af2:	e013      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d105      	bne.n	8005b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005afc:	2308      	movs	r3, #8
 8005afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	611a      	str	r2, [r3, #16]
          break;
 8005b06:	e009      	b.n	8005b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b08:	2308      	movs	r3, #8
 8005b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	615a      	str	r2, [r3, #20]
          break;
 8005b12:	e003      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b14:	2300      	movs	r3, #0
 8005b16:	623b      	str	r3, [r7, #32]
          break;
 8005b18:	e000      	b.n	8005b1c <HAL_GPIO_Init+0x130>
          break;
 8005b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2bff      	cmp	r3, #255	; 0xff
 8005b20:	d801      	bhi.n	8005b26 <HAL_GPIO_Init+0x13a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	e001      	b.n	8005b2a <HAL_GPIO_Init+0x13e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2bff      	cmp	r3, #255	; 0xff
 8005b30:	d802      	bhi.n	8005b38 <HAL_GPIO_Init+0x14c>
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	e002      	b.n	8005b3e <HAL_GPIO_Init+0x152>
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	3b08      	subs	r3, #8
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	210f      	movs	r1, #15
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	401a      	ands	r2, r3
 8005b50:	6a39      	ldr	r1, [r7, #32]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80c1 	beq.w	8005cee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b6c:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <HAL_GPIO_Init+0x2a8>)
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	4a48      	ldr	r2, [pc, #288]	; (8005c94 <HAL_GPIO_Init+0x2a8>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	6193      	str	r3, [r2, #24]
 8005b78:	4b46      	ldr	r3, [pc, #280]	; (8005c94 <HAL_GPIO_Init+0x2a8>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b84:	4a44      	ldr	r2, [pc, #272]	; (8005c98 <HAL_GPIO_Init+0x2ac>)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	089b      	lsrs	r3, r3, #2
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	220f      	movs	r2, #15
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <HAL_GPIO_Init+0x2b0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01f      	beq.n	8005bf0 <HAL_GPIO_Init+0x204>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3b      	ldr	r2, [pc, #236]	; (8005ca0 <HAL_GPIO_Init+0x2b4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d019      	beq.n	8005bec <HAL_GPIO_Init+0x200>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3a      	ldr	r2, [pc, #232]	; (8005ca4 <HAL_GPIO_Init+0x2b8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <HAL_GPIO_Init+0x1fc>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a39      	ldr	r2, [pc, #228]	; (8005ca8 <HAL_GPIO_Init+0x2bc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00d      	beq.n	8005be4 <HAL_GPIO_Init+0x1f8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a38      	ldr	r2, [pc, #224]	; (8005cac <HAL_GPIO_Init+0x2c0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <HAL_GPIO_Init+0x1f4>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a37      	ldr	r2, [pc, #220]	; (8005cb0 <HAL_GPIO_Init+0x2c4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d101      	bne.n	8005bdc <HAL_GPIO_Init+0x1f0>
 8005bd8:	2305      	movs	r3, #5
 8005bda:	e00a      	b.n	8005bf2 <HAL_GPIO_Init+0x206>
 8005bdc:	2306      	movs	r3, #6
 8005bde:	e008      	b.n	8005bf2 <HAL_GPIO_Init+0x206>
 8005be0:	2304      	movs	r3, #4
 8005be2:	e006      	b.n	8005bf2 <HAL_GPIO_Init+0x206>
 8005be4:	2303      	movs	r3, #3
 8005be6:	e004      	b.n	8005bf2 <HAL_GPIO_Init+0x206>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e002      	b.n	8005bf2 <HAL_GPIO_Init+0x206>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <HAL_GPIO_Init+0x206>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf4:	f002 0203 	and.w	r2, r2, #3
 8005bf8:	0092      	lsls	r2, r2, #2
 8005bfa:	4093      	lsls	r3, r2
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c02:	4925      	ldr	r1, [pc, #148]	; (8005c98 <HAL_GPIO_Init+0x2ac>)
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	3302      	adds	r3, #2
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c1c:	4b25      	ldr	r3, [pc, #148]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	4924      	ldr	r1, [pc, #144]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	608b      	str	r3, [r1, #8]
 8005c28:	e006      	b.n	8005c38 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	4920      	ldr	r1, [pc, #128]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c44:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	491a      	ldr	r1, [pc, #104]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60cb      	str	r3, [r1, #12]
 8005c50:	e006      	b.n	8005c60 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c52:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	4916      	ldr	r1, [pc, #88]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d025      	beq.n	8005cb8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	4910      	ldr	r1, [pc, #64]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	604b      	str	r3, [r1, #4]
 8005c78:	e025      	b.n	8005cc6 <HAL_GPIO_Init+0x2da>
 8005c7a:	bf00      	nop
 8005c7c:	10320000 	.word	0x10320000
 8005c80:	10310000 	.word	0x10310000
 8005c84:	10220000 	.word	0x10220000
 8005c88:	10210000 	.word	0x10210000
 8005c8c:	10120000 	.word	0x10120000
 8005c90:	10110000 	.word	0x10110000
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010800 	.word	0x40010800
 8005ca0:	40010c00 	.word	0x40010c00
 8005ca4:	40011000 	.word	0x40011000
 8005ca8:	40011400 	.word	0x40011400
 8005cac:	40011800 	.word	0x40011800
 8005cb0:	40011c00 	.word	0x40011c00
 8005cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	4913      	ldr	r1, [pc, #76]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d006      	beq.n	8005ce0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	490e      	ldr	r1, [pc, #56]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
 8005cde:	e006      	b.n	8005cee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	4909      	ldr	r1, [pc, #36]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f47f ae7e 	bne.w	8005a00 <HAL_GPIO_Init+0x14>
  }
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	372c      	adds	r7, #44	; 0x2c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	40010400 	.word	0x40010400

08005d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
 8005d20:	4613      	mov	r3, r2
 8005d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d24:	787b      	ldrb	r3, [r7, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d30:	e003      	b.n	8005d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d32:	887b      	ldrh	r3, [r7, #2]
 8005d34:	041a      	lsls	r2, r3, #16
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	611a      	str	r2, [r3, #16]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e272      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8087 	beq.w	8005e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d64:	4b92      	ldr	r3, [pc, #584]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 030c 	and.w	r3, r3, #12
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d00c      	beq.n	8005d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d70:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d112      	bne.n	8005da2 <HAL_RCC_OscConfig+0x5e>
 8005d7c:	4b8c      	ldr	r3, [pc, #560]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d10b      	bne.n	8005da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d8a:	4b89      	ldr	r3, [pc, #548]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d06c      	beq.n	8005e70 <HAL_RCC_OscConfig+0x12c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d168      	bne.n	8005e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e24c      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005daa:	d106      	bne.n	8005dba <HAL_RCC_OscConfig+0x76>
 8005dac:	4b80      	ldr	r3, [pc, #512]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a7f      	ldr	r2, [pc, #508]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	e02e      	b.n	8005e18 <HAL_RCC_OscConfig+0xd4>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCC_OscConfig+0x98>
 8005dc2:	4b7b      	ldr	r3, [pc, #492]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a7a      	ldr	r2, [pc, #488]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b78      	ldr	r3, [pc, #480]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a77      	ldr	r2, [pc, #476]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e01d      	b.n	8005e18 <HAL_RCC_OscConfig+0xd4>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCC_OscConfig+0xbc>
 8005de6:	4b72      	ldr	r3, [pc, #456]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a71      	ldr	r2, [pc, #452]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	4b6f      	ldr	r3, [pc, #444]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6e      	ldr	r2, [pc, #440]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCC_OscConfig+0xd4>
 8005e00:	4b6b      	ldr	r3, [pc, #428]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6a      	ldr	r2, [pc, #424]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b68      	ldr	r3, [pc, #416]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a67      	ldr	r2, [pc, #412]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fe fc0c 	bl	800463c <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fe fc08 	bl	800463c <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	; 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e200      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b5d      	ldr	r3, [pc, #372]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0xe4>
 8005e46:	e014      	b.n	8005e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fe fbf8 	bl	800463c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fe fbf4 	bl	800463c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1ec      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e62:	4b53      	ldr	r3, [pc, #332]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x10c>
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d063      	beq.n	8005f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e7e:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e8a:	4b49      	ldr	r3, [pc, #292]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d11c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x18c>
 8005e96:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d116      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x176>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d001      	beq.n	8005eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e1c0      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4939      	ldr	r1, [pc, #228]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ece:	e03a      	b.n	8005f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed8:	4b36      	ldr	r3, [pc, #216]	; (8005fb4 <HAL_RCC_OscConfig+0x270>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ede:	f7fe fbad 	bl	800463c <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee6:	f7fe fba9 	bl	800463c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e1a1      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f04:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4927      	ldr	r1, [pc, #156]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
 8005f18:	e015      	b.n	8005f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1a:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <HAL_RCC_OscConfig+0x270>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f20:	f7fe fb8c 	bl	800463c <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f28:	f7fe fb88 	bl	800463c <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e180      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d03a      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5a:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <HAL_RCC_OscConfig+0x274>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f60:	f7fe fb6c 	bl	800463c <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f68:	f7fe fb68 	bl	800463c <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e160      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f86:	2001      	movs	r0, #1
 8005f88:	f000 fafe 	bl	8006588 <RCC_Delay>
 8005f8c:	e01c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <HAL_RCC_OscConfig+0x274>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f94:	f7fe fb52 	bl	800463c <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f9a:	e00f      	b.n	8005fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f9c:	f7fe fb4e 	bl	800463c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d908      	bls.n	8005fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e146      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	42420000 	.word	0x42420000
 8005fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	4b92      	ldr	r3, [pc, #584]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e9      	bne.n	8005f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80a6 	beq.w	8006122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fda:	4b8b      	ldr	r3, [pc, #556]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe6:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	4a87      	ldr	r2, [pc, #540]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	61d3      	str	r3, [r2, #28]
 8005ff2:	4b85      	ldr	r3, [pc, #532]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	4b82      	ldr	r3, [pc, #520]	; (800620c <HAL_RCC_OscConfig+0x4c8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d118      	bne.n	8006040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600e:	4b7f      	ldr	r3, [pc, #508]	; (800620c <HAL_RCC_OscConfig+0x4c8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a7e      	ldr	r2, [pc, #504]	; (800620c <HAL_RCC_OscConfig+0x4c8>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601a:	f7fe fb0f 	bl	800463c <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006022:	f7fe fb0b 	bl	800463c <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b64      	cmp	r3, #100	; 0x64
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e103      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006034:	4b75      	ldr	r3, [pc, #468]	; (800620c <HAL_RCC_OscConfig+0x4c8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x312>
 8006048:	4b6f      	ldr	r3, [pc, #444]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	4a6e      	ldr	r2, [pc, #440]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6213      	str	r3, [r2, #32]
 8006054:	e02d      	b.n	80060b2 <HAL_RCC_OscConfig+0x36e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x334>
 800605e:	4b6a      	ldr	r3, [pc, #424]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	4a69      	ldr	r2, [pc, #420]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	6213      	str	r3, [r2, #32]
 800606a:	4b67      	ldr	r3, [pc, #412]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	4a66      	ldr	r2, [pc, #408]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006070:	f023 0304 	bic.w	r3, r3, #4
 8006074:	6213      	str	r3, [r2, #32]
 8006076:	e01c      	b.n	80060b2 <HAL_RCC_OscConfig+0x36e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2b05      	cmp	r3, #5
 800607e:	d10c      	bne.n	800609a <HAL_RCC_OscConfig+0x356>
 8006080:	4b61      	ldr	r3, [pc, #388]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	4a60      	ldr	r2, [pc, #384]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006086:	f043 0304 	orr.w	r3, r3, #4
 800608a:	6213      	str	r3, [r2, #32]
 800608c:	4b5e      	ldr	r3, [pc, #376]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	4a5d      	ldr	r2, [pc, #372]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	6213      	str	r3, [r2, #32]
 8006098:	e00b      	b.n	80060b2 <HAL_RCC_OscConfig+0x36e>
 800609a:	4b5b      	ldr	r3, [pc, #364]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	4a5a      	ldr	r2, [pc, #360]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	6213      	str	r3, [r2, #32]
 80060a6:	4b58      	ldr	r3, [pc, #352]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	4a57      	ldr	r2, [pc, #348]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	f023 0304 	bic.w	r3, r3, #4
 80060b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d015      	beq.n	80060e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ba:	f7fe fabf 	bl	800463c <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fe fabb 	bl	800463c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0b1      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	4b4b      	ldr	r3, [pc, #300]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0ee      	beq.n	80060c2 <HAL_RCC_OscConfig+0x37e>
 80060e4:	e014      	b.n	8006110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e6:	f7fe faa9 	bl	800463c <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ec:	e00a      	b.n	8006104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fe faa5 	bl	800463c <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e09b      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006104:	4b40      	ldr	r3, [pc, #256]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1ee      	bne.n	80060ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d105      	bne.n	8006122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006116:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	4a3b      	ldr	r2, [pc, #236]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800611c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8087 	beq.w	800623a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f003 030c 	and.w	r3, r3, #12
 8006134:	2b08      	cmp	r3, #8
 8006136:	d061      	beq.n	80061fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d146      	bne.n	80061ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006140:	4b33      	ldr	r3, [pc, #204]	; (8006210 <HAL_RCC_OscConfig+0x4cc>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006146:	f7fe fa79 	bl	800463c <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614e:	f7fe fa75 	bl	800463c <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e06d      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006160:	4b29      	ldr	r3, [pc, #164]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006174:	d108      	bne.n	8006188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	4921      	ldr	r1, [pc, #132]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006188:	4b1f      	ldr	r3, [pc, #124]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a19      	ldr	r1, [r3, #32]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	430b      	orrs	r3, r1
 800619a:	491b      	ldr	r1, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 800619c:	4313      	orrs	r3, r2
 800619e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x4cc>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a6:	f7fe fa49 	bl	800463c <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fe fa45 	bl	800463c <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e03d      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x46a>
 80061cc:	e035      	b.n	800623a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <HAL_RCC_OscConfig+0x4cc>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d4:	f7fe fa32 	bl	800463c <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fe fa2e 	bl	800463c <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e026      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x4c4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x498>
 80061fa:	e01e      	b.n	800623a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d107      	bne.n	8006214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e019      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
 8006208:	40021000 	.word	0x40021000
 800620c:	40007000 	.word	0x40007000
 8006210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_RCC_OscConfig+0x500>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	429a      	cmp	r2, r3
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d001      	beq.n	800623a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40021000 	.word	0x40021000

08006248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0d0      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800625c:	4b6a      	ldr	r3, [pc, #424]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d910      	bls.n	800628c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b67      	ldr	r3, [pc, #412]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 0207 	bic.w	r2, r3, #7
 8006272:	4965      	ldr	r1, [pc, #404]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b63      	ldr	r3, [pc, #396]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0b8      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d020      	beq.n	80062da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062a4:	4b59      	ldr	r3, [pc, #356]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a58      	ldr	r2, [pc, #352]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062bc:	4b53      	ldr	r3, [pc, #332]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4a52      	ldr	r2, [pc, #328]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80062c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c8:	4b50      	ldr	r3, [pc, #320]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	494d      	ldr	r1, [pc, #308]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d040      	beq.n	8006368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d107      	bne.n	80062fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d115      	bne.n	8006326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e07f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d107      	bne.n	8006316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006306:	4b41      	ldr	r3, [pc, #260]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e073      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006316:	4b3d      	ldr	r3, [pc, #244]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e06b      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006326:	4b39      	ldr	r3, [pc, #228]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f023 0203 	bic.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4936      	ldr	r1, [pc, #216]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006338:	f7fe f980 	bl	800463c <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633e:	e00a      	b.n	8006356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006340:	f7fe f97c 	bl	800463c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	; 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e053      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	4b2d      	ldr	r3, [pc, #180]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 020c 	and.w	r2, r3, #12
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	429a      	cmp	r2, r3
 8006366:	d1eb      	bne.n	8006340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006368:	4b27      	ldr	r3, [pc, #156]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d210      	bcs.n	8006398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f023 0207 	bic.w	r2, r3, #7
 800637e:	4922      	ldr	r1, [pc, #136]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	4313      	orrs	r3, r2
 8006384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <HAL_RCC_ClockConfig+0x1c0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d001      	beq.n	8006398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e032      	b.n	80063fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4916      	ldr	r1, [pc, #88]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	490e      	ldr	r1, [pc, #56]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063d6:	f000 f821 	bl	800641c <HAL_RCC_GetSysClockFreq>
 80063da:	4602      	mov	r2, r0
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_ClockConfig+0x1c4>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	490a      	ldr	r1, [pc, #40]	; (8006410 <HAL_RCC_ClockConfig+0x1c8>)
 80063e8:	5ccb      	ldrb	r3, [r1, r3]
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <HAL_RCC_ClockConfig+0x1cc>)
 80063f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_ClockConfig+0x1d0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd ff82 	bl	8004300 <HAL_InitTick>

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40022000 	.word	0x40022000
 800640c:	40021000 	.word	0x40021000
 8006410:	0800f990 	.word	0x0800f990
 8006414:	20000028 	.word	0x20000028
 8006418:	2000002c 	.word	0x2000002c

0800641c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006436:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	2b04      	cmp	r3, #4
 8006444:	d002      	beq.n	800644c <HAL_RCC_GetSysClockFreq+0x30>
 8006446:	2b08      	cmp	r3, #8
 8006448:	d003      	beq.n	8006452 <HAL_RCC_GetSysClockFreq+0x36>
 800644a:	e027      	b.n	800649c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800644e:	613b      	str	r3, [r7, #16]
      break;
 8006450:	e027      	b.n	80064a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0c9b      	lsrs	r3, r3, #18
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800645c:	5cd3      	ldrb	r3, [r2, r3]
 800645e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d010      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	0c5b      	lsrs	r3, r3, #17
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	4a11      	ldr	r2, [pc, #68]	; (80064bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006476:	5cd3      	ldrb	r3, [r2, r3]
 8006478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800647e:	fb03 f202 	mul.w	r2, r3, r2
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e004      	b.n	8006496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a0c      	ldr	r2, [pc, #48]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	613b      	str	r3, [r7, #16]
      break;
 800649a:	e002      	b.n	80064a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800649e:	613b      	str	r3, [r7, #16]
      break;
 80064a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064a2:	693b      	ldr	r3, [r7, #16]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	007a1200 	.word	0x007a1200
 80064b8:	0800f9a8 	.word	0x0800f9a8
 80064bc:	0800f9b8 	.word	0x0800f9b8
 80064c0:	003d0900 	.word	0x003d0900

080064c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80064ca:	681b      	ldr	r3, [r3, #0]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr
 80064d4:	20000028 	.word	0x20000028

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064dc:	f7ff fff2 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4903      	ldr	r1, [pc, #12]	; (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40021000 	.word	0x40021000
 80064fc:	0800f9a0 	.word	0x0800f9a0

08006500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006504:	f7ff ffde 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	0adb      	lsrs	r3, r3, #11
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	; (8006524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40021000 	.word	0x40021000
 8006524:	0800f9a0 	.word	0x0800f9a0

08006528 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	220f      	movs	r2, #15
 8006536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCC_GetClockConfig+0x58>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0203 	and.w	r2, r3, #3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <HAL_RCC_GetClockConfig+0x58>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <HAL_RCC_GetClockConfig+0x58>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <HAL_RCC_GetClockConfig+0x58>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCC_GetClockConfig+0x5c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0207 	and.w	r2, r3, #7
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr
 8006580:	40021000 	.word	0x40021000
 8006584:	40022000 	.word	0x40022000

08006588 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <RCC_Delay+0x34>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <RCC_Delay+0x38>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	0a5b      	lsrs	r3, r3, #9
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065a4:	bf00      	nop
  }
  while (Delay --);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1e5a      	subs	r2, r3, #1
 80065aa:	60fa      	str	r2, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f9      	bne.n	80065a4 <RCC_Delay+0x1c>
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr
 80065bc:	20000028 	.word	0x20000028
 80065c0:	10624dd3 	.word	0x10624dd3

080065c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d07d      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e4:	4b4f      	ldr	r3, [pc, #316]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10d      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f0:	4b4c      	ldr	r3, [pc, #304]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	4a4b      	ldr	r2, [pc, #300]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fa:	61d3      	str	r3, [r2, #28]
 80065fc:	4b49      	ldr	r3, [pc, #292]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	4b46      	ldr	r3, [pc, #280]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d118      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006618:	4b43      	ldr	r3, [pc, #268]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a42      	ldr	r2, [pc, #264]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800661e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006624:	f7fe f80a 	bl	800463c <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662a:	e008      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662c:	f7fe f806 	bl	800463c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	; 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e06d      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	4b3a      	ldr	r3, [pc, #232]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800664a:	4b36      	ldr	r3, [pc, #216]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	429a      	cmp	r2, r3
 8006666:	d027      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006668:	4b2e      	ldr	r3, [pc, #184]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006670:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006672:	4b2e      	ldr	r3, [pc, #184]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006678:	4b2c      	ldr	r3, [pc, #176]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800667e:	4a29      	ldr	r2, [pc, #164]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d014      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fd ffd5 	bl	800463c <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006694:	e00a      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006696:	f7fd ffd1 	bl	800463c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e036      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ee      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4917      	ldr	r1, [pc, #92]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d105      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4a13      	ldr	r2, [pc, #76]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	490b      	ldr	r1, [pc, #44]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	4904      	ldr	r1, [pc, #16]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006714:	4313      	orrs	r3, r2
 8006716:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
 800672c:	42420440 	.word	0x42420440

08006730 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	2300      	movs	r3, #0
 8006742:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3b01      	subs	r3, #1
 8006750:	2b0f      	cmp	r3, #15
 8006752:	f200 80af 	bhi.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006833 	.word	0x08006833
 8006760:	08006899 	.word	0x08006899
 8006764:	080068b5 	.word	0x080068b5
 8006768:	08006823 	.word	0x08006823
 800676c:	080068b5 	.word	0x080068b5
 8006770:	080068b5 	.word	0x080068b5
 8006774:	080068b5 	.word	0x080068b5
 8006778:	0800682b 	.word	0x0800682b
 800677c:	080068b5 	.word	0x080068b5
 8006780:	080068b5 	.word	0x080068b5
 8006784:	080068b5 	.word	0x080068b5
 8006788:	080068b5 	.word	0x080068b5
 800678c:	080068b5 	.word	0x080068b5
 8006790:	080068b5 	.word	0x080068b5
 8006794:	080068b5 	.word	0x080068b5
 8006798:	0800679d 	.word	0x0800679d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800679c:	4b4a      	ldr	r3, [pc, #296]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80067a2:	4b49      	ldr	r3, [pc, #292]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8084 	beq.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	0c9b      	lsrs	r3, r3, #18
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4a44      	ldr	r2, [pc, #272]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80067ba:	5cd3      	ldrb	r3, [r2, r3]
 80067bc:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d015      	beq.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067c8:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	0c5b      	lsrs	r3, r3, #17
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80067d4:	5cd3      	ldrb	r3, [r2, r3]
 80067d6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067e2:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e004      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4a38      	ldr	r2, [pc, #224]	; (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
 80067fc:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80067fe:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680a:	d102      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006810:	e052      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4a31      	ldr	r2, [pc, #196]	; (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
      break;
 8006820:	e04a      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006822:	f7ff fdfb 	bl	800641c <HAL_RCC_GetSysClockFreq>
 8006826:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006828:	e049      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800682a:	f7ff fdf7 	bl	800641c <HAL_RCC_GetSysClockFreq>
 800682e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006830:	e045      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006832:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006842:	d108      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e01f      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800686e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e00f      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006880:	d11c      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800688e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006892:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006894:	e012      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006898:	f7ff fe32 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 800689c:	4602      	mov	r2, r0
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	0b9b      	lsrs	r3, r3, #14
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	3301      	adds	r3, #1
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	61bb      	str	r3, [r7, #24]
      break;
 80068b2:	e004      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80068b4:	bf00      	nop
 80068b6:	e002      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80068b8:	bf00      	nop
 80068ba:	e000      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80068bc:	bf00      	nop
    }
  }
  return (frequency);
 80068be:	69bb      	ldr	r3, [r7, #24]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40021000 	.word	0x40021000
 80068cc:	0800f9bc 	.word	0x0800f9bc
 80068d0:	0800f9cc 	.word	0x0800f9cc
 80068d4:	007a1200 	.word	0x007a1200
 80068d8:	003d0900 	.word	0x003d0900
 80068dc:	aaaaaaab 	.word	0xaaaaaaab

080068e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e041      	b.n	8006976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f839 	bl	800697e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f000 fcbe 	bl	80072a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d001      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e044      	b.n	8006a32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <HAL_TIM_Base_Start_IT+0xac>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_TIM_Base_Start_IT+0x6c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1c      	ldr	r2, [pc, #112]	; (8006a40 <HAL_TIM_Base_Start_IT+0xb0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <HAL_TIM_Base_Start_IT+0x6c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069dc:	d00e      	beq.n	80069fc <HAL_TIM_Base_Start_IT+0x6c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <HAL_TIM_Base_Start_IT+0xb4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_TIM_Base_Start_IT+0x6c>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a16      	ldr	r2, [pc, #88]	; (8006a48 <HAL_TIM_Base_Start_IT+0xb8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIM_Base_Start_IT+0x6c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <HAL_TIM_Base_Start_IT+0xbc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d111      	bne.n	8006a20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d010      	beq.n	8006a30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	e007      	b.n	8006a30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40013400 	.word	0x40013400
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00

08006a50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e041      	b.n	8006ae6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fd fb72 	bl	8004160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f000 fc06 	bl	80072a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d109      	bne.n	8006b14 <HAL_TIM_PWM_Start+0x24>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	e022      	b.n	8006b5a <HAL_TIM_PWM_Start+0x6a>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d109      	bne.n	8006b2e <HAL_TIM_PWM_Start+0x3e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	bf14      	ite	ne
 8006b26:	2301      	movne	r3, #1
 8006b28:	2300      	moveq	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	e015      	b.n	8006b5a <HAL_TIM_PWM_Start+0x6a>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d109      	bne.n	8006b48 <HAL_TIM_PWM_Start+0x58>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	bf14      	ite	ne
 8006b40:	2301      	movne	r3, #1
 8006b42:	2300      	moveq	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	e008      	b.n	8006b5a <HAL_TIM_PWM_Start+0x6a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e072      	b.n	8006c48 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <HAL_TIM_PWM_Start+0x82>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b70:	e013      	b.n	8006b9a <HAL_TIM_PWM_Start+0xaa>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_PWM_Start+0x92>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b80:	e00b      	b.n	8006b9a <HAL_TIM_PWM_Start+0xaa>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_PWM_Start+0xa2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b90:	e003      	b.n	8006b9a <HAL_TIM_PWM_Start+0xaa>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fda2 	bl	80076ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a28      	ldr	r2, [pc, #160]	; (8006c50 <HAL_TIM_PWM_Start+0x160>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_PWM_Start+0xcc>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a27      	ldr	r2, [pc, #156]	; (8006c54 <HAL_TIM_PWM_Start+0x164>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_PWM_Start+0xd0>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_TIM_PWM_Start+0xd2>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <HAL_TIM_PWM_Start+0x160>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d018      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x122>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <HAL_TIM_PWM_Start+0x164>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x122>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf2:	d00e      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x122>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <HAL_TIM_PWM_Start+0x168>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x122>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <HAL_TIM_PWM_Start+0x16c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x122>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <HAL_TIM_PWM_Start+0x170>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d111      	bne.n	8006c36 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d010      	beq.n	8006c46 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c34:	e007      	b.n	8006c46 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40013400 	.word	0x40013400
 8006c58:	40000400 	.word	0x40000400
 8006c5c:	40000800 	.word	0x40000800
 8006c60:	40000c00 	.word	0x40000c00

08006c64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e093      	b.n	8006da0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fd f977 	bl	8003f80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca8:	f023 0307 	bic.w	r3, r3, #7
 8006cac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 faf1 	bl	80072a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d04:	f023 030c 	bic.w	r3, r3, #12
 8006d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	4313      	orrs	r3, r2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	011a      	lsls	r2, r3, #4
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	031b      	lsls	r3, r3, #12
 8006d34:	4313      	orrs	r3, r2
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d110      	bne.n	8006dfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d102      	bne.n	8006de4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dde:	7b7b      	ldrb	r3, [r7, #13]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d001      	beq.n	8006de8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e069      	b.n	8006ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006df8:	e031      	b.n	8006e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d110      	bne.n	8006e22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d102      	bne.n	8006e0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e06:	7b3b      	ldrb	r3, [r7, #12]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d001      	beq.n	8006e10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e055      	b.n	8006ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e20:	e01d      	b.n	8006e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d108      	bne.n	8006e3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d105      	bne.n	8006e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e2e:	7b7b      	ldrb	r3, [r7, #13]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d102      	bne.n	8006e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e34:	7b3b      	ldrb	r3, [r7, #12]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d001      	beq.n	8006e3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e03e      	b.n	8006ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_TIM_Encoder_Start+0xc4>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d008      	beq.n	8006e7c <HAL_TIM_Encoder_Start+0xd4>
 8006e6a:	e00f      	b.n	8006e8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2201      	movs	r2, #1
 8006e72:	2100      	movs	r1, #0
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fc39 	bl	80076ec <TIM_CCxChannelCmd>
      break;
 8006e7a:	e016      	b.n	8006eaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2201      	movs	r2, #1
 8006e82:	2104      	movs	r1, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fc31 	bl	80076ec <TIM_CCxChannelCmd>
      break;
 8006e8a:	e00e      	b.n	8006eaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2201      	movs	r2, #1
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fc29 	bl	80076ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	2104      	movs	r1, #4
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fc22 	bl	80076ec <TIM_CCxChannelCmd>
      break;
 8006ea8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0201 	orr.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d122      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d11b      	bne.n	8006f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0202 	mvn.w	r2, #2
 8006ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9af 	bl	800726a <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9a2 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9b1 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d122      	bne.n	8006f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d11b      	bne.n	8006f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0204 	mvn.w	r2, #4
 8006f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f985 	bl	800726a <HAL_TIM_IC_CaptureCallback>
 8006f60:	e005      	b.n	8006f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f978 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f987 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d122      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0208 	mvn.w	r2, #8
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f95b 	bl	800726a <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f94e 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f95d 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b10      	cmp	r3, #16
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0210 	mvn.w	r2, #16
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f931 	bl	800726a <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f924 	bl	8007258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f933 	bl	800727c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b01      	cmp	r3, #1
 8007028:	d10e      	bne.n	8007048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d107      	bne.n	8007048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0201 	mvn.w	r2, #1
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fc ff10 	bl	8003e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d10e      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007060:	2b80      	cmp	r3, #128	; 0x80
 8007062:	d107      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fc26 	bl	80078c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d10e      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b40      	cmp	r3, #64	; 0x40
 800708e:	d107      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f8f7 	bl	800728e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d10e      	bne.n	80070cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d107      	bne.n	80070cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0220 	mvn.w	r2, #32
 80070c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fbf1 	bl	80078ae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e0ae      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	f200 809f 	bhi.w	8007240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800713d 	.word	0x0800713d
 800710c:	08007241 	.word	0x08007241
 8007110:	08007241 	.word	0x08007241
 8007114:	08007241 	.word	0x08007241
 8007118:	0800717d 	.word	0x0800717d
 800711c:	08007241 	.word	0x08007241
 8007120:	08007241 	.word	0x08007241
 8007124:	08007241 	.word	0x08007241
 8007128:	080071bf 	.word	0x080071bf
 800712c:	08007241 	.word	0x08007241
 8007130:	08007241 	.word	0x08007241
 8007134:	08007241 	.word	0x08007241
 8007138:	080071ff 	.word	0x080071ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f926 	bl	8007394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0208 	orr.w	r2, r2, #8
 8007156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6999      	ldr	r1, [r3, #24]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	619a      	str	r2, [r3, #24]
      break;
 800717a:	e064      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f976 	bl	8007474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]
      break;
 80071bc:	e043      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f9c9 	bl	800755c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0208 	orr.w	r2, r2, #8
 80071d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0204 	bic.w	r2, r2, #4
 80071e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69d9      	ldr	r1, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	61da      	str	r2, [r3, #28]
      break;
 80071fc:	e023      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fa1d 	bl	8007644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	61da      	str	r2, [r3, #28]
      break;
 800723e:	e002      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a33      	ldr	r2, [pc, #204]	; (8007380 <TIM_Base_SetConfig+0xe0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d013      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a32      	ldr	r2, [pc, #200]	; (8007384 <TIM_Base_SetConfig+0xe4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c6:	d00b      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2f      	ldr	r2, [pc, #188]	; (8007388 <TIM_Base_SetConfig+0xe8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2e      	ldr	r2, [pc, #184]	; (800738c <TIM_Base_SetConfig+0xec>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2d      	ldr	r2, [pc, #180]	; (8007390 <TIM_Base_SetConfig+0xf0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d108      	bne.n	80072f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_Base_SetConfig+0xe0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <TIM_Base_SetConfig+0x82>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_Base_SetConfig+0xe4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00f      	beq.n	8007322 <TIM_Base_SetConfig+0x82>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007308:	d00b      	beq.n	8007322 <TIM_Base_SetConfig+0x82>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1e      	ldr	r2, [pc, #120]	; (8007388 <TIM_Base_SetConfig+0xe8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d007      	beq.n	8007322 <TIM_Base_SetConfig+0x82>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <TIM_Base_SetConfig+0xec>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <TIM_Base_SetConfig+0x82>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <TIM_Base_SetConfig+0xf0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d108      	bne.n	8007334 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a09      	ldr	r2, [pc, #36]	; (8007380 <TIM_Base_SetConfig+0xe0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_Base_SetConfig+0xc8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a08      	ldr	r2, [pc, #32]	; (8007384 <TIM_Base_SetConfig+0xe4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d103      	bne.n	8007370 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	615a      	str	r2, [r3, #20]
}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40000400 	.word	0x40000400
 800738c:	40000800 	.word	0x40000800
 8007390:	40000c00 	.word	0x40000c00

08007394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f023 0201 	bic.w	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f023 0302 	bic.w	r3, r3, #2
 80073dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a20      	ldr	r2, [pc, #128]	; (800746c <TIM_OC1_SetConfig+0xd8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC1_SetConfig+0x64>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <TIM_OC1_SetConfig+0xdc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d10c      	bne.n	8007412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0308 	bic.w	r3, r3, #8
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f023 0304 	bic.w	r3, r3, #4
 8007410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a15      	ldr	r2, [pc, #84]	; (800746c <TIM_OC1_SetConfig+0xd8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_OC1_SetConfig+0x8e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a14      	ldr	r2, [pc, #80]	; (8007470 <TIM_OC1_SetConfig+0xdc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d111      	bne.n	8007446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	621a      	str	r2, [r3, #32]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40013400 	.word	0x40013400

08007474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f023 0210 	bic.w	r2, r3, #16
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f023 0320 	bic.w	r3, r3, #32
 80074be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a21      	ldr	r2, [pc, #132]	; (8007554 <TIM_OC2_SetConfig+0xe0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_OC2_SetConfig+0x68>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a20      	ldr	r2, [pc, #128]	; (8007558 <TIM_OC2_SetConfig+0xe4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d10d      	bne.n	80074f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a16      	ldr	r2, [pc, #88]	; (8007554 <TIM_OC2_SetConfig+0xe0>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_OC2_SetConfig+0x94>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <TIM_OC2_SetConfig+0xe4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d113      	bne.n	8007530 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800750e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr
 8007554:	40012c00 	.word	0x40012c00
 8007558:	40013400 	.word	0x40013400

0800755c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a21      	ldr	r2, [pc, #132]	; (800763c <TIM_OC3_SetConfig+0xe0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d003      	beq.n	80075c2 <TIM_OC3_SetConfig+0x66>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a20      	ldr	r2, [pc, #128]	; (8007640 <TIM_OC3_SetConfig+0xe4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d10d      	bne.n	80075de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a16      	ldr	r2, [pc, #88]	; (800763c <TIM_OC3_SetConfig+0xe0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_OC3_SetConfig+0x92>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a15      	ldr	r2, [pc, #84]	; (8007640 <TIM_OC3_SetConfig+0xe4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d113      	bne.n	8007616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	621a      	str	r2, [r3, #32]
}
 8007630:	bf00      	nop
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40012c00 	.word	0x40012c00
 8007640:	40013400 	.word	0x40013400

08007644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800768e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	031b      	lsls	r3, r3, #12
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <TIM_OC4_SetConfig+0xa0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_OC4_SetConfig+0x68>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <TIM_OC4_SetConfig+0xa4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d109      	bne.n	80076c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	019b      	lsls	r3, r3, #6
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400

080076ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2201      	movs	r2, #1
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	43db      	mvns	r3, r3
 800770e:	401a      	ands	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	fa01 f303 	lsl.w	r3, r1, r3
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007748:	2302      	movs	r3, #2
 800774a:	e050      	b.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1b      	ldr	r2, [pc, #108]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d018      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a19      	ldr	r2, [pc, #100]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a2:	d00e      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a15      	ldr	r2, [pc, #84]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a14      	ldr	r2, [pc, #80]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d004      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a12      	ldr	r2, [pc, #72]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d10c      	bne.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40013400 	.word	0x40013400
 8007800:	40000400 	.word	0x40000400
 8007804:	40000800 	.word	0x40000800
 8007808:	40000c00 	.word	0x40000c00

0800780c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007824:	2302      	movs	r3, #2
 8007826:	e03d      	b.n	80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4313      	orrs	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bc80      	pop	{r7}
 80078d0:	4770      	bx	lr

080078d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e042      	b.n	800796a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fc fc83 	bl	8004204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2224      	movs	r2, #36	; 0x24
 8007902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007914:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 ff0a 	bl	8008730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800792a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800793a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800794a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b08a      	sub	sp, #40	; 0x28
 8007976:	af02      	add	r7, sp, #8
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b20      	cmp	r3, #32
 8007990:	d16d      	bne.n	8007a6e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_UART_Transmit+0x2c>
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e066      	b.n	8007a70 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2221      	movs	r2, #33	; 0x21
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079b0:	f7fc fe44 	bl	800463c <HAL_GetTick>
 80079b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	88fa      	ldrh	r2, [r7, #6]
 80079c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d108      	bne.n	80079de <HAL_UART_Transmit+0x6c>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	61bb      	str	r3, [r7, #24]
 80079dc:	e003      	b.n	80079e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079e6:	e02a      	b.n	8007a3e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2200      	movs	r2, #0
 80079f0:	2180      	movs	r1, #128	; 0x80
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fc33 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e036      	b.n	8007a70 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	61bb      	str	r3, [r7, #24]
 8007a1e:	e007      	b.n	8007a30 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1cf      	bne.n	80079e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2140      	movs	r1, #64	; 0x40
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fc03 	bl	800825e <UART_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e006      	b.n	8007a70 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e000      	b.n	8007a70 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007a6e:	2302      	movs	r3, #2
  }
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d112      	bne.n	8007ab8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <HAL_UART_Receive_IT+0x26>
 8007a98:	88fb      	ldrh	r3, [r7, #6]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e00b      	b.n	8007aba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fc43 	bl	800833a <UART_Start_Receive_IT>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	e000      	b.n	8007aba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007ab8:	2302      	movs	r3, #2
  }
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08c      	sub	sp, #48	; 0x30
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d156      	bne.n	8007b8c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_UART_Transmit_DMA+0x26>
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e04f      	b.n	8007b8e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2221      	movs	r2, #33	; 0x21
 8007b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_UART_Transmit_DMA+0xd4>)
 8007b14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <HAL_UART_Transmit_DMA+0xd8>)
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <HAL_UART_Transmit_DMA+0xdc>)
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	6819      	ldr	r1, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3304      	adds	r3, #4
 8007b42:	461a      	mov	r2, r3
 8007b44:	88fb      	ldrh	r3, [r7, #6]
 8007b46:	f7fd fb43 	bl	80051d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b52:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	617b      	str	r3, [r7, #20]
   return(result);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b74:	627a      	str	r2, [r7, #36]	; 0x24
 8007b76:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6a39      	ldr	r1, [r7, #32]
 8007b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e000      	b.n	8007b8e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3730      	adds	r7, #48	; 0x30
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	08008115 	.word	0x08008115
 8007b9c:	080081af 	.word	0x080081af
 8007ba0:	080081cb 	.word	0x080081cb

08007ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b0ba      	sub	sp, #232	; 0xe8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10f      	bne.n	8007c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <HAL_UART_IRQHandler+0x66>
 8007bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fcd6 	bl	80085b4 <UART_Receive_IT>
      return;
 8007c08:	e25b      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80de 	beq.w	8007dd0 <HAL_UART_IRQHandler+0x22c>
 8007c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80d1 	beq.w	8007dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_UART_IRQHandler+0xae>
 8007c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4a:	f043 0201 	orr.w	r2, r3, #1
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <HAL_UART_IRQHandler+0xd2>
 8007c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	f043 0202 	orr.w	r2, r3, #2
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <HAL_UART_IRQHandler+0xf6>
 8007c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c92:	f043 0204 	orr.w	r2, r3, #4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d011      	beq.n	8007cca <HAL_UART_IRQHandler+0x126>
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	f043 0208 	orr.w	r2, r3, #8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 81f2 	beq.w	80080b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d008      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x14e>
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc61 	bl	80085b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf14      	ite	ne
 8007d00:	2301      	movne	r3, #1
 8007d02:	2300      	moveq	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d103      	bne.n	8007d1e <HAL_UART_IRQHandler+0x17a>
 8007d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d04f      	beq.n	8007dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fb6b 	bl	80083fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d041      	beq.n	8007db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3314      	adds	r3, #20
 8007d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1d9      	bne.n	8007d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d013      	beq.n	8007dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	4a7e      	ldr	r2, [pc, #504]	; (8007f84 <HAL_UART_IRQHandler+0x3e0>)
 8007d8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fd fab8 	bl	8005308 <HAL_DMA_Abort_IT>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dac:	e00e      	b.n	8007dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f99c 	bl	80080ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db4:	e00a      	b.n	8007dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f998 	bl	80080ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbc:	e006      	b.n	8007dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f994 	bl	80080ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007dca:	e175      	b.n	80080b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	bf00      	nop
    return;
 8007dce:	e173      	b.n	80080b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	f040 814f 	bne.w	8008078 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dde:	f003 0310 	and.w	r3, r3, #16
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8148 	beq.w	8008078 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8141 	beq.w	8008078 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80b6 	beq.w	8007f88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8145 	beq.w	80080bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	f080 813e 	bcs.w	80080bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f000 8088 	beq.w	8007f64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1d9      	bne.n	8007e54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3314      	adds	r3, #20
 8007ea6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ec4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ecc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e1      	bne.n	8007ea0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3314      	adds	r3, #20
 8007ee2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e3      	bne.n	8007edc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	330c      	adds	r3, #12
 8007f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f34:	f023 0310 	bic.w	r3, r3, #16
 8007f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f46:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e3      	bne.n	8007f22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd f996 	bl	8005290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8bf 	bl	80080fe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f80:	e09c      	b.n	80080bc <HAL_UART_IRQHandler+0x518>
 8007f82:	bf00      	nop
 8007f84:	080084bf 	.word	0x080084bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 808e 	beq.w	80080c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8089 	beq.w	80080c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8007fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e3      	bne.n	8007fae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3314      	adds	r3, #20
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3314      	adds	r3, #20
 8008006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800800a:	633a      	str	r2, [r7, #48]	; 0x30
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e3      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	60fb      	str	r3, [r7, #12]
   return(result);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0310 	bic.w	r3, r3, #16
 8008042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008050:	61fa      	str	r2, [r7, #28]
 8008052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	69b9      	ldr	r1, [r7, #24]
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	617b      	str	r3, [r7, #20]
   return(result);
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e3      	bne.n	800802c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800806a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f844 	bl	80080fe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008076:	e023      	b.n	80080c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <HAL_UART_IRQHandler+0x4f4>
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa28 	bl	80084e6 <UART_Transmit_IT>
    return;
 8008096:	e014      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00e      	beq.n	80080c2 <HAL_UART_IRQHandler+0x51e>
 80080a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa67 	bl	8008584 <UART_EndTransmit_IT>
    return;
 80080b6:	e004      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80080b8:	bf00      	nop
 80080ba:	e002      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80080bc:	bf00      	nop
 80080be:	e000      	b.n	80080c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80080c0:	bf00      	nop
  }
}
 80080c2:	37e8      	adds	r7, #232	; 0xe8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b090      	sub	sp, #64	; 0x40
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d137      	bne.n	80081a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008132:	2200      	movs	r2, #0
 8008134:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3314      	adds	r3, #20
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	623b      	str	r3, [r7, #32]
   return(result);
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814c:	63bb      	str	r3, [r7, #56]	; 0x38
 800814e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3314      	adds	r3, #20
 8008154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008156:	633a      	str	r2, [r7, #48]	; 0x30
 8008158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800815c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e5      	bne.n	8008136 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800816a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	330c      	adds	r3, #12
 8008170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	60fb      	str	r3, [r7, #12]
   return(result);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	330c      	adds	r3, #12
 8008188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800818a:	61fa      	str	r2, [r7, #28]
 800818c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	69b9      	ldr	r1, [r7, #24]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	617b      	str	r3, [r7, #20]
   return(result);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800819e:	e002      	b.n	80081a6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80081a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081a2:	f7ff ff91 	bl	80080c8 <HAL_UART_TxCpltCallback>
}
 80081a6:	bf00      	nop
 80081a8:	3740      	adds	r7, #64	; 0x40
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff ff8c 	bl	80080da <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c2:	bf00      	nop
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bf14      	ite	ne
 80081ea:	2301      	movne	r3, #1
 80081ec:	2300      	moveq	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b21      	cmp	r3, #33	; 0x21
 80081fc:	d108      	bne.n	8008210 <UART_DMAError+0x46>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2200      	movs	r2, #0
 8008208:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800820a:	68b8      	ldr	r0, [r7, #8]
 800820c:	f000 f8ce 	bl	80083ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b22      	cmp	r3, #34	; 0x22
 8008230:	d108      	bne.n	8008244 <UART_DMAError+0x7a>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800823e:	68b8      	ldr	r0, [r7, #8]
 8008240:	f000 f8db 	bl	80083fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008248:	f043 0210 	orr.w	r2, r3, #16
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008250:	68b8      	ldr	r0, [r7, #8]
 8008252:	f7ff ff4b 	bl	80080ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b090      	sub	sp, #64	; 0x40
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826e:	e050      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d04c      	beq.n	8008312 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0x30>
 800827e:	f7fc f9dd 	bl	800463c <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800828a:	429a      	cmp	r2, r3
 800828c:	d241      	bcs.n	8008312 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	330c      	adds	r3, #12
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	330c      	adds	r3, #12
 80082ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082ae:	637a      	str	r2, [r7, #52]	; 0x34
 80082b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e5      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3314      	adds	r3, #20
 80082c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	613b      	str	r3, [r7, #16]
   return(result);
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3314      	adds	r3, #20
 80082e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082e2:	623a      	str	r2, [r7, #32]
 80082e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	69f9      	ldr	r1, [r7, #28]
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e5      	bne.n	80082c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e00f      	b.n	8008332 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4013      	ands	r3, r2
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	429a      	cmp	r2, r3
 8008320:	bf0c      	ite	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	2300      	movne	r3, #0
 8008326:	b2db      	uxtb	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	429a      	cmp	r2, r3
 800832e:	d09f      	beq.n	8008270 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3740      	adds	r7, #64	; 0x40
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	4613      	mov	r3, r2
 8008346:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	88fa      	ldrh	r2, [r7, #6]
 8008358:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2222      	movs	r2, #34	; 0x22
 8008364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695a      	ldr	r2, [r3, #20]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0201 	orr.w	r2, r2, #1
 800838e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0220 	orr.w	r2, r2, #32
 800839e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b089      	sub	sp, #36	; 0x24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	330c      	adds	r3, #12
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	61ba      	str	r2, [r7, #24]
 80083d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6979      	ldr	r1, [r7, #20]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	613b      	str	r3, [r7, #16]
   return(result);
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e5      	bne.n	80083b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80083f0:	bf00      	nop
 80083f2:	3724      	adds	r7, #36	; 0x24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b095      	sub	sp, #84	; 0x54
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	330c      	adds	r3, #12
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	330c      	adds	r3, #12
 8008420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008422:	643a      	str	r2, [r7, #64]	; 0x40
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e5      	bne.n	8008402 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3314      	adds	r3, #20
 800843c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	61fb      	str	r3, [r7, #28]
   return(result);
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	64bb      	str	r3, [r7, #72]	; 0x48
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3314      	adds	r3, #20
 8008454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800845c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e5      	bne.n	8008436 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	2b01      	cmp	r3, #1
 8008470:	d119      	bne.n	80084a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	330c      	adds	r3, #12
 8008478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	60bb      	str	r3, [r7, #8]
   return(result);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f023 0310 	bic.w	r3, r3, #16
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	330c      	adds	r3, #12
 8008490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008492:	61ba      	str	r2, [r7, #24]
 8008494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6979      	ldr	r1, [r7, #20]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	613b      	str	r3, [r7, #16]
   return(result);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e5      	bne.n	8008472 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084b4:	bf00      	nop
 80084b6:	3754      	adds	r7, #84	; 0x54
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff fe07 	bl	80080ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b21      	cmp	r3, #33	; 0x21
 80084f8:	d13e      	bne.n	8008578 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008502:	d114      	bne.n	800852e <UART_Transmit_IT+0x48>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d110      	bne.n	800852e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008520:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	1c9a      	adds	r2, r3, #2
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	621a      	str	r2, [r3, #32]
 800852c:	e008      	b.n	8008540 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	1c59      	adds	r1, r3, #1
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6211      	str	r1, [r2, #32]
 8008538:	781a      	ldrb	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008544:	b29b      	uxth	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	b29b      	uxth	r3, r3
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	4619      	mov	r1, r3
 800854e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10f      	bne.n	8008574 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008562:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008572:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff fd8f 	bl	80080c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08c      	sub	sp, #48	; 0x30
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b22      	cmp	r3, #34	; 0x22
 80085c6:	f040 80ae 	bne.w	8008726 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d2:	d117      	bne.n	8008604 <UART_Receive_IT+0x50>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d113      	bne.n	8008604 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	1c9a      	adds	r2, r3, #2
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	629a      	str	r2, [r3, #40]	; 0x28
 8008602:	e026      	b.n	8008652 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008616:	d007      	beq.n	8008628 <UART_Receive_IT+0x74>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <UART_Receive_IT+0x82>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	b2da      	uxtb	r2, r3
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e008      	b.n	8008648 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008642:	b2da      	uxtb	r2, r3
 8008644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008646:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008656:	b29b      	uxth	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	b29b      	uxth	r3, r3
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	4619      	mov	r1, r3
 8008660:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008662:	2b00      	cmp	r3, #0
 8008664:	d15d      	bne.n	8008722 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0220 	bic.w	r2, r2, #32
 8008674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695a      	ldr	r2, [r3, #20]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0201 	bic.w	r2, r2, #1
 8008694:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d135      	bne.n	8008718 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	613b      	str	r3, [r7, #16]
   return(result);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f023 0310 	bic.w	r3, r3, #16
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	330c      	adds	r3, #12
 80086d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d2:	623a      	str	r2, [r7, #32]
 80086d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	69f9      	ldr	r1, [r7, #28]
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e5      	bne.n	80086b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d10a      	bne.n	800870a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff fcf4 	bl	80080fe <HAL_UARTEx_RxEventCallback>
 8008716:	e002      	b.n	800871e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7fa feef 	bl	80034fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e002      	b.n	8008728 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	e000      	b.n	8008728 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008726:	2302      	movs	r3, #2
  }
}
 8008728:	4618      	mov	r0, r3
 800872a:	3730      	adds	r7, #48	; 0x30
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800876a:	f023 030c 	bic.w	r3, r3, #12
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	430b      	orrs	r3, r1
 8008776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a2c      	ldr	r2, [pc, #176]	; (8008844 <UART_SetConfig+0x114>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d103      	bne.n	80087a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008798:	f7fd feb2 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	e002      	b.n	80087a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80087a0:	f7fd fe9a 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80087a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009a      	lsls	r2, r3, #2
 80087b0:	441a      	add	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087bc:	4a22      	ldr	r2, [pc, #136]	; (8008848 <UART_SetConfig+0x118>)
 80087be:	fba2 2303 	umull	r2, r3, r2, r3
 80087c2:	095b      	lsrs	r3, r3, #5
 80087c4:	0119      	lsls	r1, r3, #4
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009a      	lsls	r2, r3, #2
 80087d0:	441a      	add	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80087dc:	4b1a      	ldr	r3, [pc, #104]	; (8008848 <UART_SetConfig+0x118>)
 80087de:	fba3 0302 	umull	r0, r3, r3, r2
 80087e2:	095b      	lsrs	r3, r3, #5
 80087e4:	2064      	movs	r0, #100	; 0x64
 80087e6:	fb00 f303 	mul.w	r3, r0, r3
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	3332      	adds	r3, #50	; 0x32
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <UART_SetConfig+0x118>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	095b      	lsrs	r3, r3, #5
 80087f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087fc:	4419      	add	r1, r3
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009a      	lsls	r2, r3, #2
 8008808:	441a      	add	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	fbb2 f2f3 	udiv	r2, r2, r3
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <UART_SetConfig+0x118>)
 8008816:	fba3 0302 	umull	r0, r3, r3, r2
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	2064      	movs	r0, #100	; 0x64
 800881e:	fb00 f303 	mul.w	r3, r0, r3
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	3332      	adds	r3, #50	; 0x32
 8008828:	4a07      	ldr	r2, [pc, #28]	; (8008848 <UART_SetConfig+0x118>)
 800882a:	fba2 2303 	umull	r2, r3, r2, r3
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	f003 020f 	and.w	r2, r3, #15
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	440a      	add	r2, r1
 800883a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40013800 	.word	0x40013800
 8008848:	51eb851f 	.word	0x51eb851f

0800884c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008852:	f3ef 8305 	mrs	r3, IPSR
 8008856:	60bb      	str	r3, [r7, #8]
  return(result);
 8008858:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10f      	bne.n	800887e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800885e:	f3ef 8310 	mrs	r3, PRIMASK
 8008862:	607b      	str	r3, [r7, #4]
  return(result);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d109      	bne.n	800887e <osKernelInitialize+0x32>
 800886a:	4b10      	ldr	r3, [pc, #64]	; (80088ac <osKernelInitialize+0x60>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d109      	bne.n	8008886 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008872:	f3ef 8311 	mrs	r3, BASEPRI
 8008876:	603b      	str	r3, [r7, #0]
  return(result);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800887e:	f06f 0305 	mvn.w	r3, #5
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e00c      	b.n	80088a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <osKernelInitialize+0x60>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800888e:	4b07      	ldr	r3, [pc, #28]	; (80088ac <osKernelInitialize+0x60>)
 8008890:	2201      	movs	r2, #1
 8008892:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e002      	b.n	80088a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800889a:	f04f 33ff 	mov.w	r3, #4294967295
 800889e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088a0:	68fb      	ldr	r3, [r7, #12]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr
 80088ac:	200006e8 	.word	0x200006e8

080088b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b6:	f3ef 8305 	mrs	r3, IPSR
 80088ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80088bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10f      	bne.n	80088e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088c2:	f3ef 8310 	mrs	r3, PRIMASK
 80088c6:	607b      	str	r3, [r7, #4]
  return(result);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <osKernelStart+0x32>
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <osKernelStart+0x64>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d109      	bne.n	80088ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088d6:	f3ef 8311 	mrs	r3, BASEPRI
 80088da:	603b      	str	r3, [r7, #0]
  return(result);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80088e2:	f06f 0305 	mvn.w	r3, #5
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e00e      	b.n	8008908 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <osKernelStart+0x64>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d107      	bne.n	8008902 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80088f2:	4b08      	ldr	r3, [pc, #32]	; (8008914 <osKernelStart+0x64>)
 80088f4:	2202      	movs	r2, #2
 80088f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80088f8:	f001 f90e 	bl	8009b18 <vTaskStartScheduler>
      stat = osOK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e002      	b.n	8008908 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008908:	68fb      	ldr	r3, [r7, #12]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200006e8 	.word	0x200006e8

08008918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b092      	sub	sp, #72	; 0x48
 800891c:	af04      	add	r7, sp, #16
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008928:	f3ef 8305 	mrs	r3, IPSR
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8094 	bne.w	8008a5e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008936:	f3ef 8310 	mrs	r3, PRIMASK
 800893a:	623b      	str	r3, [r7, #32]
  return(result);
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	2b00      	cmp	r3, #0
 8008940:	f040 808d 	bne.w	8008a5e <osThreadNew+0x146>
 8008944:	4b48      	ldr	r3, [pc, #288]	; (8008a68 <osThreadNew+0x150>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d106      	bne.n	800895a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800894c:	f3ef 8311 	mrs	r3, BASEPRI
 8008950:	61fb      	str	r3, [r7, #28]
  return(result);
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f040 8082 	bne.w	8008a5e <osThreadNew+0x146>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d07e      	beq.n	8008a5e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008960:	2380      	movs	r3, #128	; 0x80
 8008962:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008964:	2318      	movs	r3, #24
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008968:	2300      	movs	r3, #0
 800896a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800896c:	f107 031b 	add.w	r3, r7, #27
 8008970:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008972:	f04f 33ff 	mov.w	r3, #4294967295
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d045      	beq.n	8008a0a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <osThreadNew+0x74>
        name = attr->name;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d008      	beq.n	80089b2 <osThreadNew+0x9a>
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b38      	cmp	r3, #56	; 0x38
 80089a4:	d805      	bhi.n	80089b2 <osThreadNew+0x9a>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <osThreadNew+0x9e>
        return (NULL);
 80089b2:	2300      	movs	r3, #0
 80089b4:	e054      	b.n	8008a60 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	089b      	lsrs	r3, r3, #2
 80089c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <osThreadNew+0xd4>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	2ba7      	cmp	r3, #167	; 0xa7
 80089d4:	d90a      	bls.n	80089ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d006      	beq.n	80089ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <osThreadNew+0xd4>
        mem = 1;
 80089e6:	2301      	movs	r3, #1
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089ea:	e010      	b.n	8008a0e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10c      	bne.n	8008a0e <osThreadNew+0xf6>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d108      	bne.n	8008a0e <osThreadNew+0xf6>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d104      	bne.n	8008a0e <osThreadNew+0xf6>
          mem = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a08:	e001      	b.n	8008a0e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d110      	bne.n	8008a36 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a1c:	9202      	str	r2, [sp, #8]
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fe12 	bl	8009654 <xTaskCreateStatic>
 8008a30:	4603      	mov	r3, r0
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e013      	b.n	8008a5e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d110      	bne.n	8008a5e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	f107 0314 	add.w	r3, r7, #20
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fe5c 	bl	800970c <xTaskCreate>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d001      	beq.n	8008a5e <osThreadNew+0x146>
          hTask = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a5e:	697b      	ldr	r3, [r7, #20]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3738      	adds	r7, #56	; 0x38
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	200006e8 	.word	0x200006e8

08008a6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a74:	f3ef 8305 	mrs	r3, IPSR
 8008a78:	613b      	str	r3, [r7, #16]
  return(result);
 8008a7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10f      	bne.n	8008aa0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a80:	f3ef 8310 	mrs	r3, PRIMASK
 8008a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <osDelay+0x34>
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <osDelay+0x58>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d109      	bne.n	8008aa8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a94:	f3ef 8311 	mrs	r3, BASEPRI
 8008a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <osDelay+0x3c>
    stat = osErrorISR;
 8008aa0:	f06f 0305 	mvn.w	r3, #5
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e007      	b.n	8008ab8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fffc 	bl	8009ab0 <vTaskDelay>
    }
  }

  return (stat);
 8008ab8:	697b      	ldr	r3, [r7, #20]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200006e8 	.word	0x200006e8

08008ac8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a06      	ldr	r2, [pc, #24]	; (8008af0 <vApplicationGetIdleTaskMemory+0x28>)
 8008ad8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4a05      	ldr	r2, [pc, #20]	; (8008af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ade:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2280      	movs	r2, #128	; 0x80
 8008ae4:	601a      	str	r2, [r3, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr
 8008af0:	200006ec 	.word	0x200006ec
 8008af4:	20000794 	.word	0x20000794

08008af8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a06      	ldr	r2, [pc, #24]	; (8008b28 <vApplicationGetTimerTaskMemory+0x30>)
 8008b0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b16:	601a      	str	r2, [r3, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20000994 	.word	0x20000994
 8008b28:	20000a3c 	.word	0x20000a3c

08008b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f103 0208 	add.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295
 8008b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f103 0208 	add.w	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0208 	add.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr

08008b6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
}
 8008bbe:	bf00      	nop
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc80      	pop	{r7}
 8008bc6:	4770      	bx	lr

08008bc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bde:	d103      	bne.n	8008be8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e00c      	b.n	8008c02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3308      	adds	r3, #8
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	e002      	b.n	8008bf6 <vListInsert+0x2e>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d2f6      	bcs.n	8008bf0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6892      	ldr	r2, [r2, #8]
 8008c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6852      	ldr	r2, [r2, #4]
 8008c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d103      	bne.n	8008c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1e5a      	subs	r2, r3, #1
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr
	...

08008c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cb6:	f002 f871 	bl	800ad9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cc6:	fb01 f303 	mul.w	r3, r1, r3
 8008cca:	441a      	add	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	22ff      	movs	r2, #255	; 0xff
 8008cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d114      	bne.n	8008d36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01a      	beq.n	8008d4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3310      	adds	r3, #16
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f999 	bl	800a050 <xTaskRemoveFromEventList>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d012      	beq.n	8008d4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <xQueueGenericReset+0xcc>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	e009      	b.n	8008d4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3310      	adds	r3, #16
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fef6 	bl	8008b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3324      	adds	r3, #36	; 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff fef1 	bl	8008b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d4a:	f002 f857 	bl	800adfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d4e:	2301      	movs	r3, #1
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08e      	sub	sp, #56	; 0x38
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <xQueueGenericCreateStatic+0x52>
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <xQueueGenericCreateStatic+0x56>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <xQueueGenericCreateStatic+0x58>
 8008db2:	2300      	movs	r3, #0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	623b      	str	r3, [r7, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <xQueueGenericCreateStatic+0x7e>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <xQueueGenericCreateStatic+0x82>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueGenericCreateStatic+0x84>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61fb      	str	r3, [r7, #28]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dfa:	2350      	movs	r3, #80	; 0x50
 8008dfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b50      	cmp	r3, #80	; 0x50
 8008e02:	d00a      	beq.n	8008e1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61bb      	str	r3, [r7, #24]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00d      	beq.n	8008e40 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f805 	bl	8008e4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3730      	adds	r7, #48	; 0x30
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
 8008e56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e002      	b.n	8008e6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e78:	2101      	movs	r1, #1
 8008e7a:	69b8      	ldr	r0, [r7, #24]
 8008e7c:	f7ff ff06 	bl	8008c8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e88:	bf00      	nop
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	; 0x38
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xQueueGenericSend+0x32>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <xQueueGenericSend+0x40>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <xQueueGenericSend+0x44>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <xQueueGenericSend+0x46>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <xQueueGenericSend+0x60>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSend+0x6e>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <xQueueGenericSend+0x72>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueGenericSend+0x74>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	623b      	str	r3, [r7, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f1e:	f001 fa5d 	bl	800a3dc <xTaskGetSchedulerState>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <xQueueGenericSend+0x9e>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <xQueueGenericSend+0xa2>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueGenericSend+0xa4>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueGenericSend+0xbe>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61fb      	str	r3, [r7, #28]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f4e:	f001 ff25 	bl	800ad9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d302      	bcc.n	8008f64 <xQueueGenericSend+0xd4>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d129      	bne.n	8008fb8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	68b9      	ldr	r1, [r7, #8]
 8008f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6a:	f000 fa07 	bl	800937c <prvCopyDataToQueue>
 8008f6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d010      	beq.n	8008f9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	3324      	adds	r3, #36	; 0x24
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 f867 	bl	800a050 <xTaskRemoveFromEventList>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d013      	beq.n	8008fb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f88:	4b3f      	ldr	r3, [pc, #252]	; (8009088 <xQueueGenericSend+0x1f8>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	e00a      	b.n	8008fb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fa0:	4b39      	ldr	r3, [pc, #228]	; (8009088 <xQueueGenericSend+0x1f8>)
 8008fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fb0:	f001 ff24 	bl	800adfc <vPortExitCritical>
				return pdPASS;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e063      	b.n	8009080 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d103      	bne.n	8008fc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fbe:	f001 ff1d 	bl	800adfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e05c      	b.n	8009080 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d106      	bne.n	8008fda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fcc:	f107 0314 	add.w	r3, r7, #20
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 f8a1 	bl	800a118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fda:	f001 ff0f 	bl	800adfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fde:	f000 fe0b 	bl	8009bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fe2:	f001 fedb 	bl	800ad9c <vPortEnterCritical>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fec:	b25b      	sxtb	r3, r3
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d103      	bne.n	8008ffc <xQueueGenericSend+0x16c>
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009002:	b25b      	sxtb	r3, r3
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d103      	bne.n	8009012 <xQueueGenericSend+0x182>
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009012:	f001 fef3 	bl	800adfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009016:	1d3a      	adds	r2, r7, #4
 8009018:	f107 0314 	add.w	r3, r7, #20
 800901c:	4611      	mov	r1, r2
 800901e:	4618      	mov	r0, r3
 8009020:	f001 f890 	bl	800a144 <xTaskCheckForTimeOut>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d124      	bne.n	8009074 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800902a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800902c:	f000 fa9e 	bl	800956c <prvIsQueueFull>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d018      	beq.n	8009068 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	3310      	adds	r3, #16
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f000 ffb6 	bl	8009fb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009046:	f000 fa29 	bl	800949c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800904a:	f000 fde3 	bl	8009c14 <xTaskResumeAll>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	f47f af7c 	bne.w	8008f4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <xQueueGenericSend+0x1f8>)
 8009058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	e772      	b.n	8008f4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800906a:	f000 fa17 	bl	800949c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800906e:	f000 fdd1 	bl	8009c14 <xTaskResumeAll>
 8009072:	e76c      	b.n	8008f4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009076:	f000 fa11 	bl	800949c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800907a:	f000 fdcb 	bl	8009c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800907e:	2300      	movs	r3, #0
		}
	}
}
 8009080:	4618      	mov	r0, r3
 8009082:	3738      	adds	r7, #56	; 0x38
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	; 0x38
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10a      	bne.n	80090ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090b6:	bf00      	nop
 80090b8:	e7fe      	b.n	80090b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d103      	bne.n	80090c8 <xQueueGenericSendFromISR+0x3c>
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <xQueueGenericSendFromISR+0x40>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <xQueueGenericSendFromISR+0x42>
 80090cc:	2300      	movs	r3, #0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	623b      	str	r3, [r7, #32]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d103      	bne.n	80090f6 <xQueueGenericSendFromISR+0x6a>
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <xQueueGenericSendFromISR+0x6e>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e000      	b.n	80090fc <xQueueGenericSendFromISR+0x70>
 80090fa:	2300      	movs	r3, #0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	61fb      	str	r3, [r7, #28]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009116:	f001 ff03 	bl	800af20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800911a:	f3ef 8211 	mrs	r2, BASEPRI
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	61ba      	str	r2, [r7, #24]
 8009130:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009132:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	429a      	cmp	r2, r3
 8009140:	d302      	bcc.n	8009148 <xQueueGenericSendFromISR+0xbc>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d12c      	bne.n	80091a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009158:	f000 f910 	bl	800937c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800915c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009164:	d112      	bne.n	800918c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2b00      	cmp	r3, #0
 800916c:	d016      	beq.n	800919c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	3324      	adds	r3, #36	; 0x24
 8009172:	4618      	mov	r0, r3
 8009174:	f000 ff6c 	bl	800a050 <xTaskRemoveFromEventList>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00e      	beq.n	800919c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e007      	b.n	800919c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800918c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009190:	3301      	adds	r3, #1
 8009192:	b2db      	uxtb	r3, r3
 8009194:	b25a      	sxtb	r2, r3
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800919c:	2301      	movs	r3, #1
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80091a0:	e001      	b.n	80091a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	637b      	str	r3, [r7, #52]	; 0x34
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80091b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3738      	adds	r7, #56	; 0x38
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08c      	sub	sp, #48	; 0x30
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <xQueueReceive+0x30>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	623b      	str	r3, [r7, #32]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <xQueueReceive+0x3e>
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <xQueueReceive+0x42>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <xQueueReceive+0x44>
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xQueueReceive+0x5e>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	61fb      	str	r3, [r7, #28]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800921a:	f001 f8df 	bl	800a3dc <xTaskGetSchedulerState>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <xQueueReceive+0x6e>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <xQueueReceive+0x72>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <xQueueReceive+0x74>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xQueueReceive+0x8e>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	61bb      	str	r3, [r7, #24]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800924a:	f001 fda7 	bl	800ad9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01f      	beq.n	800929a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925e:	f000 f8f7 	bl	8009450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00f      	beq.n	8009292 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	3310      	adds	r3, #16
 8009276:	4618      	mov	r0, r3
 8009278:	f000 feea 	bl	800a050 <xTaskRemoveFromEventList>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009282:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <xQueueReceive+0x1bc>)
 8009284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009292:	f001 fdb3 	bl	800adfc <vPortExitCritical>
				return pdPASS;
 8009296:	2301      	movs	r3, #1
 8009298:	e069      	b.n	800936e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092a0:	f001 fdac 	bl	800adfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e062      	b.n	800936e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 ff30 	bl	800a118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092b8:	2301      	movs	r3, #1
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092bc:	f001 fd9e 	bl	800adfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092c0:	f000 fc9a 	bl	8009bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092c4:	f001 fd6a 	bl	800ad9c <vPortEnterCritical>
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d103      	bne.n	80092de <xQueueReceive+0x122>
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ea:	d103      	bne.n	80092f4 <xQueueReceive+0x138>
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f4:	f001 fd82 	bl	800adfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092f8:	1d3a      	adds	r2, r7, #4
 80092fa:	f107 0310 	add.w	r3, r7, #16
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f000 ff1f 	bl	800a144 <xTaskCheckForTimeOut>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d123      	bne.n	8009354 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800930c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930e:	f000 f917 	bl	8009540 <prvIsQueueEmpty>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d017      	beq.n	8009348 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fe45 	bl	8009fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009328:	f000 f8b8 	bl	800949c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800932c:	f000 fc72 	bl	8009c14 <xTaskResumeAll>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d189      	bne.n	800924a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009336:	4b10      	ldr	r3, [pc, #64]	; (8009378 <xQueueReceive+0x1bc>)
 8009338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	e780      	b.n	800924a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934a:	f000 f8a7 	bl	800949c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800934e:	f000 fc61 	bl	8009c14 <xTaskResumeAll>
 8009352:	e77a      	b.n	800924a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009356:	f000 f8a1 	bl	800949c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800935a:	f000 fc5b 	bl	8009c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800935e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009360:	f000 f8ee 	bl	8009540 <prvIsQueueEmpty>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	f43f af6f 	beq.w	800924a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800936c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800936e:	4618      	mov	r0, r3
 8009370:	3730      	adds	r7, #48	; 0x30
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009388:	2300      	movs	r3, #0
 800938a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10d      	bne.n	80093b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d14d      	bne.n	800943e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 f836 	bl	800a418 <xTaskPriorityDisinherit>
 80093ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	e043      	b.n	800943e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d119      	bne.n	80093f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6898      	ldr	r0, [r3, #8]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	461a      	mov	r2, r3
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	f003 f970 	bl	800c6ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	441a      	add	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d32b      	bcc.n	800943e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	609a      	str	r2, [r3, #8]
 80093ee:	e026      	b.n	800943e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68d8      	ldr	r0, [r3, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	461a      	mov	r2, r3
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	f003 f956 	bl	800c6ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009408:	425b      	negs	r3, r3
 800940a:	441a      	add	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d207      	bcs.n	800942c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	425b      	negs	r3, r3
 8009426:	441a      	add	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d105      	bne.n	800943e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	3b01      	subs	r3, #1
 800943c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d018      	beq.n	8009494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	441a      	add	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	429a      	cmp	r2, r3
 800947a:	d303      	bcc.n	8009484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68d9      	ldr	r1, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	461a      	mov	r2, r3
 800948e:	6838      	ldr	r0, [r7, #0]
 8009490:	f003 f90c 	bl	800c6ac <memcpy>
	}
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094a4:	f001 fc7a 	bl	800ad9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094b0:	e011      	b.n	80094d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d012      	beq.n	80094e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3324      	adds	r3, #36	; 0x24
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fdc6 	bl	800a050 <xTaskRemoveFromEventList>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094ca:	f000 fe9d 	bl	800a208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dce9      	bgt.n	80094b2 <prvUnlockQueue+0x16>
 80094de:	e000      	b.n	80094e2 <prvUnlockQueue+0x46>
					break;
 80094e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	22ff      	movs	r2, #255	; 0xff
 80094e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094ea:	f001 fc87 	bl	800adfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094ee:	f001 fc55 	bl	800ad9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094fa:	e011      	b.n	8009520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d012      	beq.n	800952a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3310      	adds	r3, #16
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fda1 	bl	800a050 <xTaskRemoveFromEventList>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009514:	f000 fe78 	bl	800a208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	3b01      	subs	r3, #1
 800951c:	b2db      	uxtb	r3, r3
 800951e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dce9      	bgt.n	80094fc <prvUnlockQueue+0x60>
 8009528:	e000      	b.n	800952c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800952a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	22ff      	movs	r2, #255	; 0xff
 8009530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009534:	f001 fc62 	bl	800adfc <vPortExitCritical>
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009548:	f001 fc28 	bl	800ad9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	2b00      	cmp	r3, #0
 8009552:	d102      	bne.n	800955a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e001      	b.n	800955e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800955e:	f001 fc4d 	bl	800adfc <vPortExitCritical>

	return xReturn;
 8009562:	68fb      	ldr	r3, [r7, #12]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009574:	f001 fc12 	bl	800ad9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009580:	429a      	cmp	r2, r3
 8009582:	d102      	bne.n	800958a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e001      	b.n	800958e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800958e:	f001 fc35 	bl	800adfc <vPortExitCritical>

	return xReturn;
 8009592:	68fb      	ldr	r3, [r7, #12]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	e014      	b.n	80095d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095ac:	4a0e      	ldr	r2, [pc, #56]	; (80095e8 <vQueueAddToRegistry+0x4c>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095b8:	490b      	ldr	r1, [pc, #44]	; (80095e8 <vQueueAddToRegistry+0x4c>)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095c2:	4a09      	ldr	r2, [pc, #36]	; (80095e8 <vQueueAddToRegistry+0x4c>)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	4413      	add	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095ce:	e006      	b.n	80095de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b07      	cmp	r3, #7
 80095da:	d9e7      	bls.n	80095ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bc80      	pop	{r7}
 80095e6:	4770      	bx	lr
 80095e8:	20000e3c 	.word	0x20000e3c

080095ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095fc:	f001 fbce 	bl	800ad9c <vPortEnterCritical>
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009606:	b25b      	sxtb	r3, r3
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d103      	bne.n	8009616 <vQueueWaitForMessageRestricted+0x2a>
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961c:	b25b      	sxtb	r3, r3
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d103      	bne.n	800962c <vQueueWaitForMessageRestricted+0x40>
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800962c:	f001 fbe6 	bl	800adfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	3324      	adds	r3, #36	; 0x24
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 fcd9 	bl	8009ff8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009646:	6978      	ldr	r0, [r7, #20]
 8009648:	f7ff ff28 	bl	800949c <prvUnlockQueue>
	}
 800964c:	bf00      	nop
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	; 0x38
 8009658:	af04      	add	r7, sp, #16
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	623b      	str	r3, [r7, #32]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xTaskCreateStatic+0x46>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	61fb      	str	r3, [r7, #28]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800969a:	23a8      	movs	r3, #168	; 0xa8
 800969c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2ba8      	cmp	r3, #168	; 0xa8
 80096a2:	d00a      	beq.n	80096ba <xTaskCreateStatic+0x66>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	61bb      	str	r3, [r7, #24]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01e      	beq.n	80096fe <xTaskCreateStatic+0xaa>
 80096c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01b      	beq.n	80096fe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096d8:	2300      	movs	r3, #0
 80096da:	9303      	str	r3, [sp, #12]
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	f107 0314 	add.w	r3, r7, #20
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f851 	bl	8009798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096f8:	f000 f8ec 	bl	80098d4 <prvAddNewTaskToReadyList>
 80096fc:	e001      	b.n	8009702 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009702:	697b      	ldr	r3, [r7, #20]
	}
 8009704:	4618      	mov	r0, r3
 8009706:	3728      	adds	r7, #40	; 0x28
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08c      	sub	sp, #48	; 0x30
 8009710:	af04      	add	r7, sp, #16
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	4613      	mov	r3, r2
 800971a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800971c:	88fb      	ldrh	r3, [r7, #6]
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4618      	mov	r0, r3
 8009722:	f001 fc3b 	bl	800af9c <pvPortMalloc>
 8009726:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00e      	beq.n	800974c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800972e:	20a8      	movs	r0, #168	; 0xa8
 8009730:	f001 fc34 	bl	800af9c <pvPortMalloc>
 8009734:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	631a      	str	r2, [r3, #48]	; 0x30
 8009742:	e005      	b.n	8009750 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009744:	6978      	ldr	r0, [r7, #20]
 8009746:	f001 fced 	bl	800b124 <vPortFree>
 800974a:	e001      	b.n	8009750 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800974c:	2300      	movs	r3, #0
 800974e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d017      	beq.n	8009786 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	2300      	movs	r3, #0
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f80f 	bl	8009798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800977a:	69f8      	ldr	r0, [r7, #28]
 800977c:	f000 f8aa 	bl	80098d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009780:	2301      	movs	r3, #1
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	e002      	b.n	800978c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009786:	f04f 33ff 	mov.w	r3, #4294967295
 800978a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800978c:	69bb      	ldr	r3, [r7, #24]
	}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	461a      	mov	r2, r3
 80097b0:	21a5      	movs	r1, #165	; 0xa5
 80097b2:	f002 fe89 	bl	800c4c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097c0:	3b01      	subs	r3, #1
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	617b      	str	r3, [r7, #20]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	e012      	b.n	800981c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	4413      	add	r3, r2
 80097fc:	7819      	ldrb	r1, [r3, #0]
 80097fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	3334      	adds	r3, #52	; 0x34
 8009806:	460a      	mov	r2, r1
 8009808:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	4413      	add	r3, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d006      	beq.n	8009824 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	3301      	adds	r3, #1
 800981a:	61fb      	str	r3, [r7, #28]
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b0f      	cmp	r3, #15
 8009820:	d9e9      	bls.n	80097f6 <prvInitialiseNewTask+0x5e>
 8009822:	e000      	b.n	8009826 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009824:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	2b37      	cmp	r3, #55	; 0x37
 8009832:	d901      	bls.n	8009838 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009834:	2337      	movs	r3, #55	; 0x37
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800983c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009842:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	2200      	movs	r2, #0
 8009848:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	3304      	adds	r3, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff f98b 	bl	8008b6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	3318      	adds	r3, #24
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff f986 	bl	8008b6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009872:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	2200      	movs	r2, #0
 8009880:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009886:	3354      	adds	r3, #84	; 0x54
 8009888:	224c      	movs	r2, #76	; 0x4c
 800988a:	2100      	movs	r1, #0
 800988c:	4618      	mov	r0, r3
 800988e:	f002 fe1b 	bl	800c4c8 <memset>
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <prvInitialiseNewTask+0x130>)
 8009896:	659a      	str	r2, [r3, #88]	; 0x58
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	4a0c      	ldr	r2, [pc, #48]	; (80098cc <prvInitialiseNewTask+0x134>)
 800989c:	65da      	str	r2, [r3, #92]	; 0x5c
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	4a0b      	ldr	r2, [pc, #44]	; (80098d0 <prvInitialiseNewTask+0x138>)
 80098a2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	69b8      	ldr	r0, [r7, #24]
 80098aa:	f001 f989 	bl	800abc0 <pxPortInitialiseStack>
 80098ae:	4602      	mov	r2, r0
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c0:	bf00      	nop
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	200034d0 	.word	0x200034d0
 80098cc:	20003538 	.word	0x20003538
 80098d0:	200035a0 	.word	0x200035a0

080098d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098dc:	f001 fa5e 	bl	800ad9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098e0:	4b2d      	ldr	r3, [pc, #180]	; (8009998 <prvAddNewTaskToReadyList+0xc4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	4a2c      	ldr	r2, [pc, #176]	; (8009998 <prvAddNewTaskToReadyList+0xc4>)
 80098e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098ea:	4b2c      	ldr	r3, [pc, #176]	; (800999c <prvAddNewTaskToReadyList+0xc8>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d109      	bne.n	8009906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098f2:	4a2a      	ldr	r2, [pc, #168]	; (800999c <prvAddNewTaskToReadyList+0xc8>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098f8:	4b27      	ldr	r3, [pc, #156]	; (8009998 <prvAddNewTaskToReadyList+0xc4>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d110      	bne.n	8009922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009900:	f000 fca6 	bl	800a250 <prvInitialiseTaskLists>
 8009904:	e00d      	b.n	8009922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009906:	4b26      	ldr	r3, [pc, #152]	; (80099a0 <prvAddNewTaskToReadyList+0xcc>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d109      	bne.n	8009922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800990e:	4b23      	ldr	r3, [pc, #140]	; (800999c <prvAddNewTaskToReadyList+0xc8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	429a      	cmp	r2, r3
 800991a:	d802      	bhi.n	8009922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800991c:	4a1f      	ldr	r2, [pc, #124]	; (800999c <prvAddNewTaskToReadyList+0xc8>)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009922:	4b20      	ldr	r3, [pc, #128]	; (80099a4 <prvAddNewTaskToReadyList+0xd0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3301      	adds	r3, #1
 8009928:	4a1e      	ldr	r2, [pc, #120]	; (80099a4 <prvAddNewTaskToReadyList+0xd0>)
 800992a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800992c:	4b1d      	ldr	r3, [pc, #116]	; (80099a4 <prvAddNewTaskToReadyList+0xd0>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009938:	4b1b      	ldr	r3, [pc, #108]	; (80099a8 <prvAddNewTaskToReadyList+0xd4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d903      	bls.n	8009948 <prvAddNewTaskToReadyList+0x74>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	4a18      	ldr	r2, [pc, #96]	; (80099a8 <prvAddNewTaskToReadyList+0xd4>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4a15      	ldr	r2, [pc, #84]	; (80099ac <prvAddNewTaskToReadyList+0xd8>)
 8009956:	441a      	add	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3304      	adds	r3, #4
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	f7ff f90f 	bl	8008b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009964:	f001 fa4a 	bl	800adfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009968:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <prvAddNewTaskToReadyList+0xcc>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00e      	beq.n	800998e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <prvAddNewTaskToReadyList+0xc8>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	429a      	cmp	r2, r3
 800997c:	d207      	bcs.n	800998e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <prvAddNewTaskToReadyList+0xdc>)
 8009980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20001350 	.word	0x20001350
 800999c:	20000e7c 	.word	0x20000e7c
 80099a0:	2000135c 	.word	0x2000135c
 80099a4:	2000136c 	.word	0x2000136c
 80099a8:	20001358 	.word	0x20001358
 80099ac:	20000e80 	.word	0x20000e80
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80099be:	2300      	movs	r3, #0
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <vTaskDelayUntil+0x2a>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	617b      	str	r3, [r7, #20]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <vTaskDelayUntil+0x46>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	613b      	str	r3, [r7, #16]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80099fa:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <vTaskDelayUntil+0xf0>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <vTaskDelayUntil+0x64>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	60fb      	str	r3, [r7, #12]
}
 8009a14:	bf00      	nop
 8009a16:	e7fe      	b.n	8009a16 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009a18:	f000 f8ee 	bl	8009bf8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009a1c:	4b22      	ldr	r3, [pc, #136]	; (8009aa8 <vTaskDelayUntil+0xf4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	4413      	add	r3, r2
 8009a2a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6a3a      	ldr	r2, [r7, #32]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d20b      	bcs.n	8009a4e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d211      	bcs.n	8009a64 <vTaskDelayUntil+0xb0>
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d90d      	bls.n	8009a64 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	e00a      	b.n	8009a64 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d303      	bcc.n	8009a60 <vTaskDelayUntil+0xac>
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d901      	bls.n	8009a64 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a60:	2301      	movs	r3, #1
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fd3b 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009a7e:	f000 f8c9 	bl	8009c14 <xTaskResumeAll>
 8009a82:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d107      	bne.n	8009a9a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009a8a:	4b08      	ldr	r3, [pc, #32]	; (8009aac <vTaskDelayUntil+0xf8>)
 8009a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a9a:	bf00      	nop
 8009a9c:	3728      	adds	r7, #40	; 0x28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20001378 	.word	0x20001378
 8009aa8:	20001354 	.word	0x20001354
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d017      	beq.n	8009af2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ac2:	4b13      	ldr	r3, [pc, #76]	; (8009b10 <vTaskDelay+0x60>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <vTaskDelay+0x30>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	60bb      	str	r3, [r7, #8]
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ae0:	f000 f88a 	bl	8009bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fd04 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009aec:	f000 f892 	bl	8009c14 <xTaskResumeAll>
 8009af0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d107      	bne.n	8009b08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009af8:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <vTaskDelay+0x64>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b08:	bf00      	nop
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20001378 	.word	0x20001378
 8009b14:	e000ed04 	.word	0xe000ed04

08009b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	; 0x28
 8009b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b26:	463a      	mov	r2, r7
 8009b28:	1d39      	adds	r1, r7, #4
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe ffca 	bl	8008ac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	9202      	str	r2, [sp, #8]
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	460a      	mov	r2, r1
 8009b46:	4924      	ldr	r1, [pc, #144]	; (8009bd8 <vTaskStartScheduler+0xc0>)
 8009b48:	4824      	ldr	r0, [pc, #144]	; (8009bdc <vTaskStartScheduler+0xc4>)
 8009b4a:	f7ff fd83 	bl	8009654 <xTaskCreateStatic>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4a23      	ldr	r2, [pc, #140]	; (8009be0 <vTaskStartScheduler+0xc8>)
 8009b52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b54:	4b22      	ldr	r3, [pc, #136]	; (8009be0 <vTaskStartScheduler+0xc8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	e001      	b.n	8009b66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d102      	bne.n	8009b72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b6c:	f000 fd16 	bl	800a59c <xTimerCreateTimerTask>
 8009b70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d11b      	bne.n	8009bb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	613b      	str	r3, [r7, #16]
}
 8009b8a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b8c:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <vTaskStartScheduler+0xcc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3354      	adds	r3, #84	; 0x54
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <vTaskStartScheduler+0xd0>)
 8009b94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b96:	4b15      	ldr	r3, [pc, #84]	; (8009bec <vTaskStartScheduler+0xd4>)
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b9e:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <vTaskStartScheduler+0xd8>)
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009ba4:	4b13      	ldr	r3, [pc, #76]	; (8009bf4 <vTaskStartScheduler+0xdc>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009baa:	f001 f885 	bl	800acb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bae:	e00e      	b.n	8009bce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb6:	d10a      	bne.n	8009bce <vTaskStartScheduler+0xb6>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	60fb      	str	r3, [r7, #12]
}
 8009bca:	bf00      	nop
 8009bcc:	e7fe      	b.n	8009bcc <vTaskStartScheduler+0xb4>
}
 8009bce:	bf00      	nop
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800f8c4 	.word	0x0800f8c4
 8009bdc:	0800a221 	.word	0x0800a221
 8009be0:	20001374 	.word	0x20001374
 8009be4:	20000e7c 	.word	0x20000e7c
 8009be8:	200001fc 	.word	0x200001fc
 8009bec:	20001370 	.word	0x20001370
 8009bf0:	2000135c 	.word	0x2000135c
 8009bf4:	20001354 	.word	0x20001354

08009bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009bfc:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <vTaskSuspendAll+0x18>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3301      	adds	r3, #1
 8009c02:	4a03      	ldr	r2, [pc, #12]	; (8009c10 <vTaskSuspendAll+0x18>)
 8009c04:	6013      	str	r3, [r2, #0]
}
 8009c06:	bf00      	nop
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bc80      	pop	{r7}
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	20001378 	.word	0x20001378

08009c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c22:	4b42      	ldr	r3, [pc, #264]	; (8009d2c <xTaskResumeAll+0x118>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10a      	bne.n	8009c40 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	603b      	str	r3, [r7, #0]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c40:	f001 f8ac 	bl	800ad9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c44:	4b39      	ldr	r3, [pc, #228]	; (8009d2c <xTaskResumeAll+0x118>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	4a38      	ldr	r2, [pc, #224]	; (8009d2c <xTaskResumeAll+0x118>)
 8009c4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c4e:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <xTaskResumeAll+0x118>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d162      	bne.n	8009d1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c56:	4b36      	ldr	r3, [pc, #216]	; (8009d30 <xTaskResumeAll+0x11c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d05e      	beq.n	8009d1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c5e:	e02f      	b.n	8009cc0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c60:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <xTaskResumeAll+0x120>)
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	3318      	adds	r3, #24
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe ffe3 	bl	8008c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe ffde 	bl	8008c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	4b2d      	ldr	r3, [pc, #180]	; (8009d38 <xTaskResumeAll+0x124>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d903      	bls.n	8009c90 <xTaskResumeAll+0x7c>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	4a2a      	ldr	r2, [pc, #168]	; (8009d38 <xTaskResumeAll+0x124>)
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4a27      	ldr	r2, [pc, #156]	; (8009d3c <xTaskResumeAll+0x128>)
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f7fe ff6b 	bl	8008b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb0:	4b23      	ldr	r3, [pc, #140]	; (8009d40 <xTaskResumeAll+0x12c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d302      	bcc.n	8009cc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009cba:	4b22      	ldr	r3, [pc, #136]	; (8009d44 <xTaskResumeAll+0x130>)
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cc0:	4b1c      	ldr	r3, [pc, #112]	; (8009d34 <xTaskResumeAll+0x120>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1cb      	bne.n	8009c60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cce:	f000 fb61 	bl	800a394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cd2:	4b1d      	ldr	r3, [pc, #116]	; (8009d48 <xTaskResumeAll+0x134>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d010      	beq.n	8009d00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cde:	f000 f845 	bl	8009d6c <xTaskIncrementTick>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ce8:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <xTaskResumeAll+0x130>)
 8009cea:	2201      	movs	r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f1      	bne.n	8009cde <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <xTaskResumeAll+0x134>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d00:	4b10      	ldr	r3, [pc, #64]	; (8009d44 <xTaskResumeAll+0x130>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <xTaskResumeAll+0x138>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d1c:	f001 f86e 	bl	800adfc <vPortExitCritical>

	return xAlreadyYielded;
 8009d20:	68bb      	ldr	r3, [r7, #8]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20001378 	.word	0x20001378
 8009d30:	20001350 	.word	0x20001350
 8009d34:	20001310 	.word	0x20001310
 8009d38:	20001358 	.word	0x20001358
 8009d3c:	20000e80 	.word	0x20000e80
 8009d40:	20000e7c 	.word	0x20000e7c
 8009d44:	20001364 	.word	0x20001364
 8009d48:	20001360 	.word	0x20001360
 8009d4c:	e000ed04 	.word	0xe000ed04

08009d50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d56:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <xTaskGetTickCount+0x18>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d5c:	687b      	ldr	r3, [r7, #4]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr
 8009d68:	20001354 	.word	0x20001354

08009d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d76:	4b51      	ldr	r3, [pc, #324]	; (8009ebc <xTaskIncrementTick+0x150>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 808e 	bne.w	8009e9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d80:	4b4f      	ldr	r3, [pc, #316]	; (8009ec0 <xTaskIncrementTick+0x154>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3301      	adds	r3, #1
 8009d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d88:	4a4d      	ldr	r2, [pc, #308]	; (8009ec0 <xTaskIncrementTick+0x154>)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d120      	bne.n	8009dd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d94:	4b4b      	ldr	r3, [pc, #300]	; (8009ec4 <xTaskIncrementTick+0x158>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	603b      	str	r3, [r7, #0]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <xTaskIncrementTick+0x46>
 8009db4:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <xTaskIncrementTick+0x158>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60fb      	str	r3, [r7, #12]
 8009dba:	4b43      	ldr	r3, [pc, #268]	; (8009ec8 <xTaskIncrementTick+0x15c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a41      	ldr	r2, [pc, #260]	; (8009ec4 <xTaskIncrementTick+0x158>)
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	4a41      	ldr	r2, [pc, #260]	; (8009ec8 <xTaskIncrementTick+0x15c>)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	4b40      	ldr	r3, [pc, #256]	; (8009ecc <xTaskIncrementTick+0x160>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	4a3f      	ldr	r2, [pc, #252]	; (8009ecc <xTaskIncrementTick+0x160>)
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	f000 fadf 	bl	800a394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dd6:	4b3e      	ldr	r3, [pc, #248]	; (8009ed0 <xTaskIncrementTick+0x164>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d34e      	bcc.n	8009e7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009de0:	4b38      	ldr	r3, [pc, #224]	; (8009ec4 <xTaskIncrementTick+0x158>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <xTaskIncrementTick+0x82>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <xTaskIncrementTick+0x84>
 8009dee:	2300      	movs	r3, #0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d004      	beq.n	8009dfe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df4:	4b36      	ldr	r3, [pc, #216]	; (8009ed0 <xTaskIncrementTick+0x164>)
 8009df6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfa:	601a      	str	r2, [r3, #0]
					break;
 8009dfc:	e03f      	b.n	8009e7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <xTaskIncrementTick+0x158>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d203      	bcs.n	8009e1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e16:	4a2e      	ldr	r2, [pc, #184]	; (8009ed0 <xTaskIncrementTick+0x164>)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6013      	str	r3, [r2, #0]
						break;
 8009e1c:	e02f      	b.n	8009e7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	3304      	adds	r3, #4
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe ff08 	bl	8008c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d004      	beq.n	8009e3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	3318      	adds	r3, #24
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe feff 	bl	8008c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3e:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <xTaskIncrementTick+0x168>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d903      	bls.n	8009e4e <xTaskIncrementTick+0xe2>
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	4a22      	ldr	r2, [pc, #136]	; (8009ed4 <xTaskIncrementTick+0x168>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <xTaskIncrementTick+0x16c>)
 8009e5c:	441a      	add	r2, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7fe fe8c 	bl	8008b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	4b1b      	ldr	r3, [pc, #108]	; (8009edc <xTaskIncrementTick+0x170>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d3b3      	bcc.n	8009de0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e7c:	e7b0      	b.n	8009de0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e7e:	4b17      	ldr	r3, [pc, #92]	; (8009edc <xTaskIncrementTick+0x170>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4914      	ldr	r1, [pc, #80]	; (8009ed8 <xTaskIncrementTick+0x16c>)
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	440b      	add	r3, r1
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d907      	bls.n	8009ea6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
 8009e9a:	e004      	b.n	8009ea6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e9c:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <xTaskIncrementTick+0x174>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a0f      	ldr	r2, [pc, #60]	; (8009ee0 <xTaskIncrementTick+0x174>)
 8009ea4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <xTaskIncrementTick+0x178>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009eb2:	697b      	ldr	r3, [r7, #20]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20001378 	.word	0x20001378
 8009ec0:	20001354 	.word	0x20001354
 8009ec4:	20001308 	.word	0x20001308
 8009ec8:	2000130c 	.word	0x2000130c
 8009ecc:	20001368 	.word	0x20001368
 8009ed0:	20001370 	.word	0x20001370
 8009ed4:	20001358 	.word	0x20001358
 8009ed8:	20000e80 	.word	0x20000e80
 8009edc:	20000e7c 	.word	0x20000e7c
 8009ee0:	20001360 	.word	0x20001360
 8009ee4:	20001364 	.word	0x20001364

08009ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eee:	4b2a      	ldr	r3, [pc, #168]	; (8009f98 <vTaskSwitchContext+0xb0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ef6:	4b29      	ldr	r3, [pc, #164]	; (8009f9c <vTaskSwitchContext+0xb4>)
 8009ef8:	2201      	movs	r2, #1
 8009efa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009efc:	e046      	b.n	8009f8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009efe:	4b27      	ldr	r3, [pc, #156]	; (8009f9c <vTaskSwitchContext+0xb4>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f04:	4b26      	ldr	r3, [pc, #152]	; (8009fa0 <vTaskSwitchContext+0xb8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	e010      	b.n	8009f2e <vTaskSwitchContext+0x46>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	607b      	str	r3, [r7, #4]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <vTaskSwitchContext+0x3e>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	491d      	ldr	r1, [pc, #116]	; (8009fa4 <vTaskSwitchContext+0xbc>)
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0e4      	beq.n	8009f0c <vTaskSwitchContext+0x24>
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4a15      	ldr	r2, [pc, #84]	; (8009fa4 <vTaskSwitchContext+0xbc>)
 8009f4e:	4413      	add	r3, r2
 8009f50:	60bb      	str	r3, [r7, #8]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	605a      	str	r2, [r3, #4]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	3308      	adds	r3, #8
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d104      	bne.n	8009f72 <vTaskSwitchContext+0x8a>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	605a      	str	r2, [r3, #4]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	4a0b      	ldr	r2, [pc, #44]	; (8009fa8 <vTaskSwitchContext+0xc0>)
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	4a08      	ldr	r2, [pc, #32]	; (8009fa0 <vTaskSwitchContext+0xb8>)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f82:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <vTaskSwitchContext+0xc0>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3354      	adds	r3, #84	; 0x54
 8009f88:	4a08      	ldr	r2, [pc, #32]	; (8009fac <vTaskSwitchContext+0xc4>)
 8009f8a:	6013      	str	r3, [r2, #0]
}
 8009f8c:	bf00      	nop
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bc80      	pop	{r7}
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	20001378 	.word	0x20001378
 8009f9c:	20001364 	.word	0x20001364
 8009fa0:	20001358 	.word	0x20001358
 8009fa4:	20000e80 	.word	0x20000e80
 8009fa8:	20000e7c 	.word	0x20000e7c
 8009fac:	200001fc 	.word	0x200001fc

08009fb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60fb      	str	r3, [r7, #12]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fd6:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <vTaskPlaceOnEventList+0x44>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3318      	adds	r3, #24
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7fe fdf2 	bl	8008bc8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	6838      	ldr	r0, [r7, #0]
 8009fe8:	f000 fa84 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
}
 8009fec:	bf00      	nop
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000e7c 	.word	0x20000e7c

08009ff8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	617b      	str	r3, [r7, #20]
}
 800a01c:	bf00      	nop
 800a01e:	e7fe      	b.n	800a01e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <vTaskPlaceOnEventListRestricted+0x54>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3318      	adds	r3, #24
 800a026:	4619      	mov	r1, r3
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7fe fdaa 	bl	8008b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a034:	f04f 33ff 	mov.w	r3, #4294967295
 800a038:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68b8      	ldr	r0, [r7, #8]
 800a03e:	f000 fa59 	bl	800a4f4 <prvAddCurrentTaskToDelayedList>
	}
 800a042:	bf00      	nop
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000e7c 	.word	0x20000e7c

0800a050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60fb      	str	r3, [r7, #12]
}
 800a078:	bf00      	nop
 800a07a:	e7fe      	b.n	800a07a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3318      	adds	r3, #24
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fdd9 	bl	8008c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a086:	4b1e      	ldr	r3, [pc, #120]	; (800a100 <xTaskRemoveFromEventList+0xb0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d11d      	bne.n	800a0ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3304      	adds	r3, #4
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fdd0 	bl	8008c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09c:	4b19      	ldr	r3, [pc, #100]	; (800a104 <xTaskRemoveFromEventList+0xb4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d903      	bls.n	800a0ac <xTaskRemoveFromEventList+0x5c>
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	4a16      	ldr	r2, [pc, #88]	; (800a104 <xTaskRemoveFromEventList+0xb4>)
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4a13      	ldr	r2, [pc, #76]	; (800a108 <xTaskRemoveFromEventList+0xb8>)
 800a0ba:	441a      	add	r2, r3
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7fe fd5d 	bl	8008b82 <vListInsertEnd>
 800a0c8:	e005      	b.n	800a0d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	3318      	adds	r3, #24
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	480e      	ldr	r0, [pc, #56]	; (800a10c <xTaskRemoveFromEventList+0xbc>)
 800a0d2:	f7fe fd56 	bl	8008b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <xTaskRemoveFromEventList+0xc0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d905      	bls.n	800a0f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0e8:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <xTaskRemoveFromEventList+0xc4>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e001      	b.n	800a0f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a0f4:	697b      	ldr	r3, [r7, #20]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20001378 	.word	0x20001378
 800a104:	20001358 	.word	0x20001358
 800a108:	20000e80 	.word	0x20000e80
 800a10c:	20001310 	.word	0x20001310
 800a110:	20000e7c 	.word	0x20000e7c
 800a114:	20001364 	.word	0x20001364

0800a118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a120:	4b06      	ldr	r3, [pc, #24]	; (800a13c <vTaskInternalSetTimeOutState+0x24>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <vTaskInternalSetTimeOutState+0x28>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	605a      	str	r2, [r3, #4]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20001368 	.word	0x20001368
 800a140:	20001354 	.word	0x20001354

0800a144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10a      	bne.n	800a16a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	613b      	str	r3, [r7, #16]
}
 800a166:	bf00      	nop
 800a168:	e7fe      	b.n	800a168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	60fb      	str	r3, [r7, #12]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a186:	f000 fe09 	bl	800ad9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a18a:	4b1d      	ldr	r3, [pc, #116]	; (800a200 <xTaskCheckForTimeOut+0xbc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d102      	bne.n	800a1aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61fb      	str	r3, [r7, #28]
 800a1a8:	e023      	b.n	800a1f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b15      	ldr	r3, [pc, #84]	; (800a204 <xTaskCheckForTimeOut+0xc0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d007      	beq.n	800a1c6 <xTaskCheckForTimeOut+0x82>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d302      	bcc.n	800a1c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	61fb      	str	r3, [r7, #28]
 800a1c4:	e015      	b.n	800a1f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d20b      	bcs.n	800a1e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	1ad2      	subs	r2, r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff ff9b 	bl	800a118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	61fb      	str	r3, [r7, #28]
 800a1e6:	e004      	b.n	800a1f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1f2:	f000 fe03 	bl	800adfc <vPortExitCritical>

	return xReturn;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20001354 	.word	0x20001354
 800a204:	20001368 	.word	0x20001368

0800a208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a20c:	4b03      	ldr	r3, [pc, #12]	; (800a21c <vTaskMissedYield+0x14>)
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
}
 800a212:	bf00      	nop
 800a214:	46bd      	mov	sp, r7
 800a216:	bc80      	pop	{r7}
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20001364 	.word	0x20001364

0800a220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a228:	f000 f852 	bl	800a2d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <prvIdleTask+0x28>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d9f9      	bls.n	800a228 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a234:	4b05      	ldr	r3, [pc, #20]	; (800a24c <prvIdleTask+0x2c>)
 800a236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a244:	e7f0      	b.n	800a228 <prvIdleTask+0x8>
 800a246:	bf00      	nop
 800a248:	20000e80 	.word	0x20000e80
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	e00c      	b.n	800a276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4a12      	ldr	r2, [pc, #72]	; (800a2b0 <prvInitialiseTaskLists+0x60>)
 800a268:	4413      	add	r3, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe fc5e 	bl	8008b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3301      	adds	r3, #1
 800a274:	607b      	str	r3, [r7, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b37      	cmp	r3, #55	; 0x37
 800a27a:	d9ef      	bls.n	800a25c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a27c:	480d      	ldr	r0, [pc, #52]	; (800a2b4 <prvInitialiseTaskLists+0x64>)
 800a27e:	f7fe fc55 	bl	8008b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a282:	480d      	ldr	r0, [pc, #52]	; (800a2b8 <prvInitialiseTaskLists+0x68>)
 800a284:	f7fe fc52 	bl	8008b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a288:	480c      	ldr	r0, [pc, #48]	; (800a2bc <prvInitialiseTaskLists+0x6c>)
 800a28a:	f7fe fc4f 	bl	8008b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a28e:	480c      	ldr	r0, [pc, #48]	; (800a2c0 <prvInitialiseTaskLists+0x70>)
 800a290:	f7fe fc4c 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a294:	480b      	ldr	r0, [pc, #44]	; (800a2c4 <prvInitialiseTaskLists+0x74>)
 800a296:	f7fe fc49 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a29a:	4b0b      	ldr	r3, [pc, #44]	; (800a2c8 <prvInitialiseTaskLists+0x78>)
 800a29c:	4a05      	ldr	r2, [pc, #20]	; (800a2b4 <prvInitialiseTaskLists+0x64>)
 800a29e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <prvInitialiseTaskLists+0x7c>)
 800a2a2:	4a05      	ldr	r2, [pc, #20]	; (800a2b8 <prvInitialiseTaskLists+0x68>)
 800a2a4:	601a      	str	r2, [r3, #0]
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000e80 	.word	0x20000e80
 800a2b4:	200012e0 	.word	0x200012e0
 800a2b8:	200012f4 	.word	0x200012f4
 800a2bc:	20001310 	.word	0x20001310
 800a2c0:	20001324 	.word	0x20001324
 800a2c4:	2000133c 	.word	0x2000133c
 800a2c8:	20001308 	.word	0x20001308
 800a2cc:	2000130c 	.word	0x2000130c

0800a2d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2d6:	e019      	b.n	800a30c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2d8:	f000 fd60 	bl	800ad9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a2dc:	4b10      	ldr	r3, [pc, #64]	; (800a320 <prvCheckTasksWaitingTermination+0x50>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe fca5 	bl	8008c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <prvCheckTasksWaitingTermination+0x54>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	4a0b      	ldr	r2, [pc, #44]	; (800a324 <prvCheckTasksWaitingTermination+0x54>)
 800a2f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <prvCheckTasksWaitingTermination+0x58>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4a0a      	ldr	r2, [pc, #40]	; (800a328 <prvCheckTasksWaitingTermination+0x58>)
 800a300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a302:	f000 fd7b 	bl	800adfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f810 	bl	800a32c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <prvCheckTasksWaitingTermination+0x58>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e1      	bne.n	800a2d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20001324 	.word	0x20001324
 800a324:	20001350 	.word	0x20001350
 800a328:	20001338 	.word	0x20001338

0800a32c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3354      	adds	r3, #84	; 0x54
 800a338:	4618      	mov	r0, r3
 800a33a:	f002 f8ef 	bl	800c51c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a344:	2b00      	cmp	r3, #0
 800a346:	d108      	bne.n	800a35a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fee9 	bl	800b124 <vPortFree>
				vPortFree( pxTCB );
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fee6 	bl	800b124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a358:	e018      	b.n	800a38c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a360:	2b01      	cmp	r3, #1
 800a362:	d103      	bne.n	800a36c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fedd 	bl	800b124 <vPortFree>
	}
 800a36a:	e00f      	b.n	800a38c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a372:	2b02      	cmp	r3, #2
 800a374:	d00a      	beq.n	800a38c <prvDeleteTCB+0x60>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	60fb      	str	r3, [r7, #12]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <prvDeleteTCB+0x5e>
	}
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <prvResetNextTaskUnblockTime+0x40>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <prvResetNextTaskUnblockTime+0x14>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <prvResetNextTaskUnblockTime+0x16>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <prvResetNextTaskUnblockTime+0x44>)
 800a3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3b6:	e008      	b.n	800a3ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <prvResetNextTaskUnblockTime+0x40>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	4a04      	ldr	r2, [pc, #16]	; (800a3d8 <prvResetNextTaskUnblockTime+0x44>)
 800a3c8:	6013      	str	r3, [r2, #0]
}
 800a3ca:	bf00      	nop
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bc80      	pop	{r7}
 800a3d2:	4770      	bx	lr
 800a3d4:	20001308 	.word	0x20001308
 800a3d8:	20001370 	.word	0x20001370

0800a3dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3e2:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <xTaskGetSchedulerState+0x34>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	607b      	str	r3, [r7, #4]
 800a3ee:	e008      	b.n	800a402 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3f0:	4b08      	ldr	r3, [pc, #32]	; (800a414 <xTaskGetSchedulerState+0x38>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	e001      	b.n	800a402 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3fe:	2300      	movs	r3, #0
 800a400:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a402:	687b      	ldr	r3, [r7, #4]
	}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	bc80      	pop	{r7}
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	2000135c 	.word	0x2000135c
 800a414:	20001378 	.word	0x20001378

0800a418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a424:	2300      	movs	r3, #0
 800a426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d056      	beq.n	800a4dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a42e:	4b2e      	ldr	r3, [pc, #184]	; (800a4e8 <xTaskPriorityDisinherit+0xd0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	429a      	cmp	r2, r3
 800a436:	d00a      	beq.n	800a44e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	60fb      	str	r3, [r7, #12]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60bb      	str	r3, [r7, #8]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a470:	1e5a      	subs	r2, r3, #1
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47e:	429a      	cmp	r2, r3
 800a480:	d02c      	beq.n	800a4dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a486:	2b00      	cmp	r3, #0
 800a488:	d128      	bne.n	800a4dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	3304      	adds	r3, #4
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fbd2 	bl	8008c38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <xTaskPriorityDisinherit+0xd4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d903      	bls.n	800a4bc <xTaskPriorityDisinherit+0xa4>
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	4a0c      	ldr	r2, [pc, #48]	; (800a4ec <xTaskPriorityDisinherit+0xd4>)
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <xTaskPriorityDisinherit+0xd8>)
 800a4ca:	441a      	add	r2, r3
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f7fe fb55 	bl	8008b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4dc:	697b      	ldr	r3, [r7, #20]
	}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000e7c 	.word	0x20000e7c
 800a4ec:	20001358 	.word	0x20001358
 800a4f0:	20000e80 	.word	0x20000e80

0800a4f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4fe:	4b21      	ldr	r3, [pc, #132]	; (800a584 <prvAddCurrentTaskToDelayedList+0x90>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a504:	4b20      	ldr	r3, [pc, #128]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3304      	adds	r3, #4
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fb94 	bl	8008c38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a516:	d10a      	bne.n	800a52e <prvAddCurrentTaskToDelayedList+0x3a>
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a51e:	4b1a      	ldr	r3, [pc, #104]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3304      	adds	r3, #4
 800a524:	4619      	mov	r1, r3
 800a526:	4819      	ldr	r0, [pc, #100]	; (800a58c <prvAddCurrentTaskToDelayedList+0x98>)
 800a528:	f7fe fb2b 	bl	8008b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a52c:	e026      	b.n	800a57c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a536:	4b14      	ldr	r3, [pc, #80]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	429a      	cmp	r2, r3
 800a544:	d209      	bcs.n	800a55a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a546:	4b12      	ldr	r3, [pc, #72]	; (800a590 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe fb38 	bl	8008bc8 <vListInsert>
}
 800a558:	e010      	b.n	800a57c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a55a:	4b0e      	ldr	r3, [pc, #56]	; (800a594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <prvAddCurrentTaskToDelayedList+0x94>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7fe fb2e 	bl	8008bc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a56c:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	d202      	bcs.n	800a57c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a576:	4a08      	ldr	r2, [pc, #32]	; (800a598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	6013      	str	r3, [r2, #0]
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20001354 	.word	0x20001354
 800a588:	20000e7c 	.word	0x20000e7c
 800a58c:	2000133c 	.word	0x2000133c
 800a590:	2000130c 	.word	0x2000130c
 800a594:	20001308 	.word	0x20001308
 800a598:	20001370 	.word	0x20001370

0800a59c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08a      	sub	sp, #40	; 0x28
 800a5a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5a6:	f000 facb 	bl	800ab40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5aa:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <xTimerCreateTimerTask+0x80>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d021      	beq.n	800a5f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ba:	1d3a      	adds	r2, r7, #4
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fa97 	bl	8008af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	460a      	mov	r2, r1
 800a5dc:	4910      	ldr	r1, [pc, #64]	; (800a620 <xTimerCreateTimerTask+0x84>)
 800a5de:	4811      	ldr	r0, [pc, #68]	; (800a624 <xTimerCreateTimerTask+0x88>)
 800a5e0:	f7ff f838 	bl	8009654 <xTaskCreateStatic>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4a10      	ldr	r2, [pc, #64]	; (800a628 <xTimerCreateTimerTask+0x8c>)
 800a5e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5ea:	4b0f      	ldr	r3, [pc, #60]	; (800a628 <xTimerCreateTimerTask+0x8c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	613b      	str	r3, [r7, #16]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a612:	697b      	ldr	r3, [r7, #20]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	200013ac 	.word	0x200013ac
 800a620:	0800f8cc 	.word	0x0800f8cc
 800a624:	0800a749 	.word	0x0800a749
 800a628:	200013b0 	.word	0x200013b0

0800a62c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08a      	sub	sp, #40	; 0x28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	623b      	str	r3, [r7, #32]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a65a:	4b1a      	ldr	r3, [pc, #104]	; (800a6c4 <xTimerGenericCommand+0x98>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d02a      	beq.n	800a6b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b05      	cmp	r3, #5
 800a672:	dc18      	bgt.n	800a6a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a674:	f7ff feb2 	bl	800a3dc <xTaskGetSchedulerState>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d109      	bne.n	800a692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <xTimerGenericCommand+0x98>)
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	f107 0110 	add.w	r1, r7, #16
 800a686:	2300      	movs	r3, #0
 800a688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68a:	f7fe fc01 	bl	8008e90 <xQueueGenericSend>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24
 800a690:	e012      	b.n	800a6b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <xTimerGenericCommand+0x98>)
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	f107 0110 	add.w	r1, r7, #16
 800a69a:	2300      	movs	r3, #0
 800a69c:	2200      	movs	r2, #0
 800a69e:	f7fe fbf7 	bl	8008e90 <xQueueGenericSend>
 800a6a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6a4:	e008      	b.n	800a6b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6a6:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <xTimerGenericCommand+0x98>)
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	f107 0110 	add.w	r1, r7, #16
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	f7fe fceb 	bl	800908c <xQueueGenericSendFromISR>
 800a6b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3728      	adds	r7, #40	; 0x28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	200013ac 	.word	0x200013ac

0800a6c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <prvProcessExpiredTimer+0x7c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe faa9 	bl	8008c38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d122      	bne.n	800a734 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	18d1      	adds	r1, r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	6978      	ldr	r0, [r7, #20]
 800a6fc:	f000 f8c8 	bl	800a890 <prvInsertTimerInActiveList>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d016      	beq.n	800a734 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a706:	2300      	movs	r3, #0
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	2100      	movs	r1, #0
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	f7ff ff8b 	bl	800a62c <xTimerGenericCommand>
 800a716:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	60fb      	str	r3, [r7, #12]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	6978      	ldr	r0, [r7, #20]
 800a73a:	4798      	blx	r3
}
 800a73c:	bf00      	nop
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	200013a4 	.word	0x200013a4

0800a748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	4618      	mov	r0, r3
 800a756:	f000 f857 	bl	800a808 <prvGetNextExpireTime>
 800a75a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f803 	bl	800a76c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a766:	f000 f8d5 	bl	800a914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a76a:	e7f1      	b.n	800a750 <prvTimerTask+0x8>

0800a76c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a776:	f7ff fa3f 	bl	8009bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a77a:	f107 0308 	add.w	r3, r7, #8
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 f866 	bl	800a850 <prvSampleTimeNow>
 800a784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d130      	bne.n	800a7ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <prvProcessTimerOrBlockTask+0x3c>
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	429a      	cmp	r2, r3
 800a798:	d806      	bhi.n	800a7a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a79a:	f7ff fa3b 	bl	8009c14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a79e:	68f9      	ldr	r1, [r7, #12]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff91 	bl	800a6c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7a6:	e024      	b.n	800a7f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <prvProcessTimerOrBlockTask+0x90>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bf0c      	ite	eq
 800a7b8:	2301      	moveq	r3, #1
 800a7ba:	2300      	movne	r3, #0
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7c0:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <prvProcessTimerOrBlockTask+0x94>)
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	f7fe ff0d 	bl	80095ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7d2:	f7ff fa1f 	bl	8009c14 <xTaskResumeAll>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <prvProcessTimerOrBlockTask+0x98>)
 800a7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	f3bf 8f6f 	isb	sy
}
 800a7ec:	e001      	b.n	800a7f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7ee:	f7ff fa11 	bl	8009c14 <xTaskResumeAll>
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200013a8 	.word	0x200013a8
 800a800:	200013ac 	.word	0x200013ac
 800a804:	e000ed04 	.word	0xe000ed04

0800a808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a810:	4b0e      	ldr	r3, [pc, #56]	; (800a84c <prvGetNextExpireTime+0x44>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	bf0c      	ite	eq
 800a81a:	2301      	moveq	r3, #1
 800a81c:	2300      	movne	r3, #0
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	461a      	mov	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d105      	bne.n	800a83a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a82e:	4b07      	ldr	r3, [pc, #28]	; (800a84c <prvGetNextExpireTime+0x44>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	e001      	b.n	800a83e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a83e:	68fb      	ldr	r3, [r7, #12]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	200013a4 	.word	0x200013a4

0800a850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a858:	f7ff fa7a 	bl	8009d50 <xTaskGetTickCount>
 800a85c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a85e:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <prvSampleTimeNow+0x3c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	429a      	cmp	r2, r3
 800a866:	d205      	bcs.n	800a874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a868:	f000 f908 	bl	800aa7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e002      	b.n	800a87a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a87a:	4a04      	ldr	r2, [pc, #16]	; (800a88c <prvSampleTimeNow+0x3c>)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a880:	68fb      	ldr	r3, [r7, #12]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	200013b4 	.word	0x200013b4

0800a890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d812      	bhi.n	800a8dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d302      	bcc.n	800a8ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e01b      	b.n	800a902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8ca:	4b10      	ldr	r3, [pc, #64]	; (800a90c <prvInsertTimerInActiveList+0x7c>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	f7fe f977 	bl	8008bc8 <vListInsert>
 800a8da:	e012      	b.n	800a902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d206      	bcs.n	800a8f2 <prvInsertTimerInActiveList+0x62>
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d302      	bcc.n	800a8f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	e007      	b.n	800a902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8f2:	4b07      	ldr	r3, [pc, #28]	; (800a910 <prvInsertTimerInActiveList+0x80>)
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7fe f963 	bl	8008bc8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a902:	697b      	ldr	r3, [r7, #20]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	200013a8 	.word	0x200013a8
 800a910:	200013a4 	.word	0x200013a4

0800a914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08e      	sub	sp, #56	; 0x38
 800a918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a91a:	e09d      	b.n	800aa58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da18      	bge.n	800a954 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a922:	1d3b      	adds	r3, r7, #4
 800a924:	3304      	adds	r3, #4
 800a926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	61fb      	str	r3, [r7, #28]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94a:	6850      	ldr	r0, [r2, #4]
 800a94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94e:	6892      	ldr	r2, [r2, #8]
 800a950:	4611      	mov	r1, r2
 800a952:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	db7e      	blt.n	800aa58 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	3304      	adds	r3, #4
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe f964 	bl	8008c38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a970:	463b      	mov	r3, r7
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff ff6c 	bl	800a850 <prvSampleTimeNow>
 800a978:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b09      	cmp	r3, #9
 800a97e:	d86a      	bhi.n	800aa56 <prvProcessReceivedCommands+0x142>
 800a980:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <prvProcessReceivedCommands+0x74>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a9b1 	.word	0x0800a9b1
 800a98c:	0800a9b1 	.word	0x0800a9b1
 800a990:	0800a9b1 	.word	0x0800a9b1
 800a994:	0800aa59 	.word	0x0800aa59
 800a998:	0800aa0d 	.word	0x0800aa0d
 800a99c:	0800aa45 	.word	0x0800aa45
 800a9a0:	0800a9b1 	.word	0x0800a9b1
 800a9a4:	0800a9b1 	.word	0x0800a9b1
 800a9a8:	0800aa59 	.word	0x0800aa59
 800a9ac:	0800aa0d 	.word	0x0800aa0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	18d1      	adds	r1, r2, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9be:	f7ff ff67 	bl	800a890 <prvInsertTimerInActiveList>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d047      	beq.n	800aa58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d13f      	bne.n	800aa58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	441a      	add	r2, r3
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ea:	f7ff fe1f 	bl	800a62c <xTimerGenericCommand>
 800a9ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d130      	bne.n	800aa58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	61bb      	str	r3, [r7, #24]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	617b      	str	r3, [r7, #20]
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	699a      	ldr	r2, [r3, #24]
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	18d1      	adds	r1, r2, r3
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3e:	f7ff ff27 	bl	800a890 <prvInsertTimerInActiveList>
					break;
 800aa42:	e009      	b.n	800aa58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d104      	bne.n	800aa58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800aa4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa50:	f000 fb68 	bl	800b124 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa54:	e000      	b.n	800aa58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800aa56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa58:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <prvProcessReceivedCommands+0x164>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	1d39      	adds	r1, r7, #4
 800aa5e:	2200      	movs	r2, #0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fbab 	bl	80091bc <xQueueReceive>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f47f af57 	bne.w	800a91c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	3730      	adds	r7, #48	; 0x30
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	200013ac 	.word	0x200013ac

0800aa7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa82:	e045      	b.n	800ab10 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa84:	4b2c      	ldr	r3, [pc, #176]	; (800ab38 <prvSwitchTimerLists+0xbc>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa8e:	4b2a      	ldr	r3, [pc, #168]	; (800ab38 <prvSwitchTimerLists+0xbc>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe f8cb 	bl	8008c38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d12e      	bne.n	800ab10 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4413      	add	r3, r2
 800aaba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d90e      	bls.n	800aae2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aad0:	4b19      	ldr	r3, [pc, #100]	; (800ab38 <prvSwitchTimerLists+0xbc>)
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3304      	adds	r3, #4
 800aad8:	4619      	mov	r1, r3
 800aada:	4610      	mov	r0, r2
 800aadc:	f7fe f874 	bl	8008bc8 <vListInsert>
 800aae0:	e016      	b.n	800ab10 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aae2:	2300      	movs	r3, #0
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	2300      	movs	r3, #0
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	2100      	movs	r1, #0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7ff fd9d 	bl	800a62c <xTimerGenericCommand>
 800aaf2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10a      	bne.n	800ab10 <prvSwitchTimerLists+0x94>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	603b      	str	r3, [r7, #0]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab10:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <prvSwitchTimerLists+0xbc>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1b4      	bne.n	800aa84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab1a:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <prvSwitchTimerLists+0xbc>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a04      	ldr	r2, [pc, #16]	; (800ab38 <prvSwitchTimerLists+0xbc>)
 800ab26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab28:	4a04      	ldr	r2, [pc, #16]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6013      	str	r3, [r2, #0]
}
 800ab2e:	bf00      	nop
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	200013a4 	.word	0x200013a4
 800ab3c:	200013a8 	.word	0x200013a8

0800ab40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab46:	f000 f929 	bl	800ad9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab4a:	4b15      	ldr	r3, [pc, #84]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d120      	bne.n	800ab94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab52:	4814      	ldr	r0, [pc, #80]	; (800aba4 <prvCheckForValidListAndQueue+0x64>)
 800ab54:	f7fd ffea 	bl	8008b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab58:	4813      	ldr	r0, [pc, #76]	; (800aba8 <prvCheckForValidListAndQueue+0x68>)
 800ab5a:	f7fd ffe7 	bl	8008b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab5e:	4b13      	ldr	r3, [pc, #76]	; (800abac <prvCheckForValidListAndQueue+0x6c>)
 800ab60:	4a10      	ldr	r2, [pc, #64]	; (800aba4 <prvCheckForValidListAndQueue+0x64>)
 800ab62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab64:	4b12      	ldr	r3, [pc, #72]	; (800abb0 <prvCheckForValidListAndQueue+0x70>)
 800ab66:	4a10      	ldr	r2, [pc, #64]	; (800aba8 <prvCheckForValidListAndQueue+0x68>)
 800ab68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <prvCheckForValidListAndQueue+0x74>)
 800ab70:	4a11      	ldr	r2, [pc, #68]	; (800abb8 <prvCheckForValidListAndQueue+0x78>)
 800ab72:	2110      	movs	r1, #16
 800ab74:	200a      	movs	r0, #10
 800ab76:	f7fe f8f1 	bl	8008d5c <xQueueGenericCreateStatic>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4a08      	ldr	r2, [pc, #32]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <prvCheckForValidListAndQueue+0x60>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	490b      	ldr	r1, [pc, #44]	; (800abbc <prvCheckForValidListAndQueue+0x7c>)
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fd04 	bl	800959c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab94:	f000 f932 	bl	800adfc <vPortExitCritical>
}
 800ab98:	bf00      	nop
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200013ac 	.word	0x200013ac
 800aba4:	2000137c 	.word	0x2000137c
 800aba8:	20001390 	.word	0x20001390
 800abac:	200013a4 	.word	0x200013a4
 800abb0:	200013a8 	.word	0x200013a8
 800abb4:	20001458 	.word	0x20001458
 800abb8:	200013b8 	.word	0x200013b8
 800abbc:	0800f8d4 	.word	0x0800f8d4

0800abc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3b04      	subs	r3, #4
 800abd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3b04      	subs	r3, #4
 800abde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f023 0201 	bic.w	r2, r3, #1
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3b04      	subs	r3, #4
 800abee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abf0:	4a08      	ldr	r2, [pc, #32]	; (800ac14 <pxPortInitialiseStack+0x54>)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3b14      	subs	r3, #20
 800abfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3b20      	subs	r3, #32
 800ac06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac08:	68fb      	ldr	r3, [r7, #12]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bc80      	pop	{r7}
 800ac12:	4770      	bx	lr
 800ac14:	0800ac19 	.word	0x0800ac19

0800ac18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac22:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <prvTaskExitError+0x54>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2a:	d00a      	beq.n	800ac42 <prvTaskExitError+0x2a>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	60fb      	str	r3, [r7, #12]
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <prvTaskExitError+0x28>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	60bb      	str	r3, [r7, #8]
}
 800ac54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac56:	bf00      	nop
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0fc      	beq.n	800ac58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac5e:	bf00      	nop
 800ac60:	bf00      	nop
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bc80      	pop	{r7}
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20000034 	.word	0x20000034

0800ac70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <pxCurrentTCBConst2>)
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac7a:	f380 8809 	msr	PSP, r0
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f04f 0000 	mov.w	r0, #0
 800ac86:	f380 8811 	msr	BASEPRI, r0
 800ac8a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ac8e:	4770      	bx	lr

0800ac90 <pxCurrentTCBConst2>:
 800ac90:	20000e7c 	.word	0x20000e7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ac98:	4806      	ldr	r0, [pc, #24]	; (800acb4 <prvPortStartFirstTask+0x1c>)
 800ac9a:	6800      	ldr	r0, [r0, #0]
 800ac9c:	6800      	ldr	r0, [r0, #0]
 800ac9e:	f380 8808 	msr	MSP, r0
 800aca2:	b662      	cpsie	i
 800aca4:	b661      	cpsie	f
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	df00      	svc	0
 800acb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acb2:	bf00      	nop
 800acb4:	e000ed08 	.word	0xe000ed08

0800acb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acbe:	4b32      	ldr	r3, [pc, #200]	; (800ad88 <xPortStartScheduler+0xd0>)
 800acc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	22ff      	movs	r2, #255	; 0xff
 800acce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	4b2a      	ldr	r3, [pc, #168]	; (800ad8c <xPortStartScheduler+0xd4>)
 800ace4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ace6:	4b2a      	ldr	r3, [pc, #168]	; (800ad90 <xPortStartScheduler+0xd8>)
 800ace8:	2207      	movs	r2, #7
 800acea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acec:	e009      	b.n	800ad02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800acee:	4b28      	ldr	r3, [pc, #160]	; (800ad90 <xPortStartScheduler+0xd8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	4a26      	ldr	r2, [pc, #152]	; (800ad90 <xPortStartScheduler+0xd8>)
 800acf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad02:	78fb      	ldrb	r3, [r7, #3]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad0a:	2b80      	cmp	r3, #128	; 0x80
 800ad0c:	d0ef      	beq.n	800acee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad0e:	4b20      	ldr	r3, [pc, #128]	; (800ad90 <xPortStartScheduler+0xd8>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f1c3 0307 	rsb	r3, r3, #7
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d00a      	beq.n	800ad30 <xPortStartScheduler+0x78>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	60bb      	str	r3, [r7, #8]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad30:	4b17      	ldr	r3, [pc, #92]	; (800ad90 <xPortStartScheduler+0xd8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	4a16      	ldr	r2, [pc, #88]	; (800ad90 <xPortStartScheduler+0xd8>)
 800ad38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad3a:	4b15      	ldr	r3, [pc, #84]	; (800ad90 <xPortStartScheduler+0xd8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad42:	4a13      	ldr	r2, [pc, #76]	; (800ad90 <xPortStartScheduler+0xd8>)
 800ad44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <xPortStartScheduler+0xdc>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a10      	ldr	r2, [pc, #64]	; (800ad94 <xPortStartScheduler+0xdc>)
 800ad54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad5a:	4b0e      	ldr	r3, [pc, #56]	; (800ad94 <xPortStartScheduler+0xdc>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a0d      	ldr	r2, [pc, #52]	; (800ad94 <xPortStartScheduler+0xdc>)
 800ad60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad66:	f000 f8b9 	bl	800aedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <xPortStartScheduler+0xe0>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad70:	f7ff ff92 	bl	800ac98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad74:	f7ff f8b8 	bl	8009ee8 <vTaskSwitchContext>
	prvTaskExitError();
 800ad78:	f7ff ff4e 	bl	800ac18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	e000e400 	.word	0xe000e400
 800ad8c:	200014a8 	.word	0x200014a8
 800ad90:	200014ac 	.word	0x200014ac
 800ad94:	e000ed20 	.word	0xe000ed20
 800ad98:	20000034 	.word	0x20000034

0800ad9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	607b      	str	r3, [r7, #4]
}
 800adb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adb6:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <vPortEnterCritical+0x58>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	4a0d      	ldr	r2, [pc, #52]	; (800adf4 <vPortEnterCritical+0x58>)
 800adbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adc0:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <vPortEnterCritical+0x58>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d10f      	bne.n	800ade8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adc8:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <vPortEnterCritical+0x5c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <vPortEnterCritical+0x4c>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	603b      	str	r3, [r7, #0]
}
 800ade4:	bf00      	nop
 800ade6:	e7fe      	b.n	800ade6 <vPortEnterCritical+0x4a>
	}
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20000034 	.word	0x20000034
 800adf8:	e000ed04 	.word	0xe000ed04

0800adfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae02:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <vPortExitCritical+0x4c>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <vPortExitCritical+0x24>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	607b      	str	r3, [r7, #4]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae20:	4b09      	ldr	r3, [pc, #36]	; (800ae48 <vPortExitCritical+0x4c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <vPortExitCritical+0x4c>)
 800ae28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae2a:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <vPortExitCritical+0x4c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d105      	bne.n	800ae3e <vPortExitCritical+0x42>
 800ae32:	2300      	movs	r3, #0
 800ae34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f383 8811 	msr	BASEPRI, r3
}
 800ae3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae3e:	bf00      	nop
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bc80      	pop	{r7}
 800ae46:	4770      	bx	lr
 800ae48:	20000034 	.word	0x20000034
 800ae4c:	00000000 	.word	0x00000000

0800ae50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae50:	f3ef 8009 	mrs	r0, PSP
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	4b0d      	ldr	r3, [pc, #52]	; (800ae90 <pxCurrentTCBConst>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ae60:	6010      	str	r0, [r2, #0]
 800ae62:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ae66:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae6a:	f380 8811 	msr	BASEPRI, r0
 800ae6e:	f7ff f83b 	bl	8009ee8 <vTaskSwitchContext>
 800ae72:	f04f 0000 	mov.w	r0, #0
 800ae76:	f380 8811 	msr	BASEPRI, r0
 800ae7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ae7e:	6819      	ldr	r1, [r3, #0]
 800ae80:	6808      	ldr	r0, [r1, #0]
 800ae82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ae86:	f380 8809 	msr	PSP, r0
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	4770      	bx	lr

0800ae90 <pxCurrentTCBConst>:
 800ae90:	20000e7c 	.word	0x20000e7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae94:	bf00      	nop
 800ae96:	bf00      	nop

0800ae98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	607b      	str	r3, [r7, #4]
}
 800aeb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aeb2:	f7fe ff5b 	bl	8009d6c <xTaskIncrementTick>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <SysTick_Handler+0x40>)
 800aebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	2300      	movs	r3, #0
 800aec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	f383 8811 	msr	BASEPRI, r3
}
 800aece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <vPortSetupTimerInterrupt+0x30>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aee6:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <vPortSetupTimerInterrupt+0x34>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aeec:	4b09      	ldr	r3, [pc, #36]	; (800af14 <vPortSetupTimerInterrupt+0x38>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a09      	ldr	r2, [pc, #36]	; (800af18 <vPortSetupTimerInterrupt+0x3c>)
 800aef2:	fba2 2303 	umull	r2, r3, r2, r3
 800aef6:	099b      	lsrs	r3, r3, #6
 800aef8:	4a08      	ldr	r2, [pc, #32]	; (800af1c <vPortSetupTimerInterrupt+0x40>)
 800aefa:	3b01      	subs	r3, #1
 800aefc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aefe:	4b03      	ldr	r3, [pc, #12]	; (800af0c <vPortSetupTimerInterrupt+0x30>)
 800af00:	2207      	movs	r2, #7
 800af02:	601a      	str	r2, [r3, #0]
}
 800af04:	bf00      	nop
 800af06:	46bd      	mov	sp, r7
 800af08:	bc80      	pop	{r7}
 800af0a:	4770      	bx	lr
 800af0c:	e000e010 	.word	0xe000e010
 800af10:	e000e018 	.word	0xe000e018
 800af14:	20000028 	.word	0x20000028
 800af18:	10624dd3 	.word	0x10624dd3
 800af1c:	e000e014 	.word	0xe000e014

0800af20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af26:	f3ef 8305 	mrs	r3, IPSR
 800af2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b0f      	cmp	r3, #15
 800af30:	d914      	bls.n	800af5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af32:	4a16      	ldr	r2, [pc, #88]	; (800af8c <vPortValidateInterruptPriority+0x6c>)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af3c:	4b14      	ldr	r3, [pc, #80]	; (800af90 <vPortValidateInterruptPriority+0x70>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	7afa      	ldrb	r2, [r7, #11]
 800af42:	429a      	cmp	r2, r3
 800af44:	d20a      	bcs.n	800af5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	607b      	str	r3, [r7, #4]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <vPortValidateInterruptPriority+0x74>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af64:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <vPortValidateInterruptPriority+0x78>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d90a      	bls.n	800af82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	603b      	str	r3, [r7, #0]
}
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <vPortValidateInterruptPriority+0x60>
	}
 800af82:	bf00      	nop
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	e000e3f0 	.word	0xe000e3f0
 800af90:	200014a8 	.word	0x200014a8
 800af94:	e000ed0c 	.word	0xe000ed0c
 800af98:	200014ac 	.word	0x200014ac

0800af9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08a      	sub	sp, #40	; 0x28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afa8:	f7fe fe26 	bl	8009bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afac:	4b58      	ldr	r3, [pc, #352]	; (800b110 <pvPortMalloc+0x174>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afb4:	f000 f910 	bl	800b1d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afb8:	4b56      	ldr	r3, [pc, #344]	; (800b114 <pvPortMalloc+0x178>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4013      	ands	r3, r2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f040 808e 	bne.w	800b0e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01d      	beq.n	800b008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800afcc:	2208      	movs	r2, #8
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4413      	add	r3, r2
 800afd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f003 0307 	and.w	r3, r3, #7
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d014      	beq.n	800b008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f023 0307 	bic.w	r3, r3, #7
 800afe4:	3308      	adds	r3, #8
 800afe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f003 0307 	and.w	r3, r3, #7
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <pvPortMalloc+0x6c>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	617b      	str	r3, [r7, #20]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d069      	beq.n	800b0e2 <pvPortMalloc+0x146>
 800b00e:	4b42      	ldr	r3, [pc, #264]	; (800b118 <pvPortMalloc+0x17c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	429a      	cmp	r2, r3
 800b016:	d864      	bhi.n	800b0e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b018:	4b40      	ldr	r3, [pc, #256]	; (800b11c <pvPortMalloc+0x180>)
 800b01a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b01c:	4b3f      	ldr	r3, [pc, #252]	; (800b11c <pvPortMalloc+0x180>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b022:	e004      	b.n	800b02e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d903      	bls.n	800b040 <pvPortMalloc+0xa4>
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f1      	bne.n	800b024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b040:	4b33      	ldr	r3, [pc, #204]	; (800b110 <pvPortMalloc+0x174>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b046:	429a      	cmp	r2, r3
 800b048:	d04b      	beq.n	800b0e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2208      	movs	r2, #8
 800b050:	4413      	add	r3, r2
 800b052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	1ad2      	subs	r2, r2, r3
 800b064:	2308      	movs	r3, #8
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	429a      	cmp	r2, r3
 800b06a:	d91f      	bls.n	800b0ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4413      	add	r3, r2
 800b072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <pvPortMalloc+0xf8>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	613b      	str	r3, [r7, #16]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	1ad2      	subs	r2, r2, r3
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0a6:	69b8      	ldr	r0, [r7, #24]
 800b0a8:	f000 f8f8 	bl	800b29c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0ac:	4b1a      	ldr	r3, [pc, #104]	; (800b118 <pvPortMalloc+0x17c>)
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	4a18      	ldr	r2, [pc, #96]	; (800b118 <pvPortMalloc+0x17c>)
 800b0b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0ba:	4b17      	ldr	r3, [pc, #92]	; (800b118 <pvPortMalloc+0x17c>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4b18      	ldr	r3, [pc, #96]	; (800b120 <pvPortMalloc+0x184>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d203      	bcs.n	800b0ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <pvPortMalloc+0x17c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a15      	ldr	r2, [pc, #84]	; (800b120 <pvPortMalloc+0x184>)
 800b0cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	685a      	ldr	r2, [r3, #4]
 800b0d2:	4b10      	ldr	r3, [pc, #64]	; (800b114 <pvPortMalloc+0x178>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0e2:	f7fe fd97 	bl	8009c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <pvPortMalloc+0x16a>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60fb      	str	r3, [r7, #12]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <pvPortMalloc+0x168>
	return pvReturn;
 800b106:	69fb      	ldr	r3, [r7, #28]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3728      	adds	r7, #40	; 0x28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	200034b8 	.word	0x200034b8
 800b114:	200034c4 	.word	0x200034c4
 800b118:	200034bc 	.word	0x200034bc
 800b11c:	200034b0 	.word	0x200034b0
 800b120:	200034c0 	.word	0x200034c0

0800b124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d048      	beq.n	800b1c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b136:	2308      	movs	r3, #8
 800b138:	425b      	negs	r3, r3
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	4413      	add	r3, r2
 800b13e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	4b21      	ldr	r3, [pc, #132]	; (800b1d0 <vPortFree+0xac>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4013      	ands	r3, r2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <vPortFree+0x44>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60fb      	str	r3, [r7, #12]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <vPortFree+0x62>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60bb      	str	r3, [r7, #8]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	4b11      	ldr	r3, [pc, #68]	; (800b1d0 <vPortFree+0xac>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4013      	ands	r3, r2
 800b190:	2b00      	cmp	r3, #0
 800b192:	d019      	beq.n	800b1c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d115      	bne.n	800b1c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	4b0b      	ldr	r3, [pc, #44]	; (800b1d0 <vPortFree+0xac>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	43db      	mvns	r3, r3
 800b1a6:	401a      	ands	r2, r3
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1ac:	f7fe fd24 	bl	8009bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <vPortFree+0xb0>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	4a06      	ldr	r2, [pc, #24]	; (800b1d4 <vPortFree+0xb0>)
 800b1bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1be:	6938      	ldr	r0, [r7, #16]
 800b1c0:	f000 f86c 	bl	800b29c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b1c4:	f7fe fd26 	bl	8009c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1c8:	bf00      	nop
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	200034c4 	.word	0x200034c4
 800b1d4:	200034bc 	.word	0x200034bc

0800b1d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1e4:	4b27      	ldr	r3, [pc, #156]	; (800b284 <prvHeapInit+0xac>)
 800b1e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f003 0307 	and.w	r3, r3, #7
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00c      	beq.n	800b20c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3307      	adds	r3, #7
 800b1f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 0307 	bic.w	r3, r3, #7
 800b1fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	4a1f      	ldr	r2, [pc, #124]	; (800b284 <prvHeapInit+0xac>)
 800b208:	4413      	add	r3, r2
 800b20a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b210:	4a1d      	ldr	r2, [pc, #116]	; (800b288 <prvHeapInit+0xb0>)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b216:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <prvHeapInit+0xb0>)
 800b218:	2200      	movs	r2, #0
 800b21a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	4413      	add	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b224:	2208      	movs	r2, #8
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	1a9b      	subs	r3, r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f023 0307 	bic.w	r3, r3, #7
 800b232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4a15      	ldr	r2, [pc, #84]	; (800b28c <prvHeapInit+0xb4>)
 800b238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b23a:	4b14      	ldr	r3, [pc, #80]	; (800b28c <prvHeapInit+0xb4>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2200      	movs	r2, #0
 800b240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b242:	4b12      	ldr	r3, [pc, #72]	; (800b28c <prvHeapInit+0xb4>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	1ad2      	subs	r2, r2, r3
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b258:	4b0c      	ldr	r3, [pc, #48]	; (800b28c <prvHeapInit+0xb4>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	4a0a      	ldr	r2, [pc, #40]	; (800b290 <prvHeapInit+0xb8>)
 800b266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	4a09      	ldr	r2, [pc, #36]	; (800b294 <prvHeapInit+0xbc>)
 800b26e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b270:	4b09      	ldr	r3, [pc, #36]	; (800b298 <prvHeapInit+0xc0>)
 800b272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b276:	601a      	str	r2, [r3, #0]
}
 800b278:	bf00      	nop
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bc80      	pop	{r7}
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	200014b0 	.word	0x200014b0
 800b288:	200034b0 	.word	0x200034b0
 800b28c:	200034b8 	.word	0x200034b8
 800b290:	200034c0 	.word	0x200034c0
 800b294:	200034bc 	.word	0x200034bc
 800b298:	200034c4 	.word	0x200034c4

0800b29c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2a4:	4b27      	ldr	r3, [pc, #156]	; (800b344 <prvInsertBlockIntoFreeList+0xa8>)
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e002      	b.n	800b2b0 <prvInsertBlockIntoFreeList+0x14>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d8f7      	bhi.n	800b2aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d108      	bne.n	800b2de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	441a      	add	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d118      	bne.n	800b324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <prvInsertBlockIntoFreeList+0xac>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d00d      	beq.n	800b31a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	441a      	add	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	e008      	b.n	800b32c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b31a:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <prvInsertBlockIntoFreeList+0xac>)
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	e003      	b.n	800b32c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d002      	beq.n	800b33a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b33a:	bf00      	nop
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	bc80      	pop	{r7}
 800b342:	4770      	bx	lr
 800b344:	200034b0 	.word	0x200034b0
 800b348:	200034b8 	.word	0x200034b8

0800b34c <malloc>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <malloc+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f000 b82b 	b.w	800b3ac <_malloc_r>
 800b356:	bf00      	nop
 800b358:	200001fc 	.word	0x200001fc

0800b35c <free>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	; (800b368 <free+0xc>)
 800b35e:	4601      	mov	r1, r0
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	f001 b9b7 	b.w	800c6d4 <_free_r>
 800b366:	bf00      	nop
 800b368:	200001fc 	.word	0x200001fc

0800b36c <sbrk_aligned>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	4e0e      	ldr	r6, [pc, #56]	; (800b3a8 <sbrk_aligned+0x3c>)
 800b370:	460c      	mov	r4, r1
 800b372:	6831      	ldr	r1, [r6, #0]
 800b374:	4605      	mov	r5, r0
 800b376:	b911      	cbnz	r1, 800b37e <sbrk_aligned+0x12>
 800b378:	f001 f94a 	bl	800c610 <_sbrk_r>
 800b37c:	6030      	str	r0, [r6, #0]
 800b37e:	4621      	mov	r1, r4
 800b380:	4628      	mov	r0, r5
 800b382:	f001 f945 	bl	800c610 <_sbrk_r>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d00a      	beq.n	800b3a0 <sbrk_aligned+0x34>
 800b38a:	1cc4      	adds	r4, r0, #3
 800b38c:	f024 0403 	bic.w	r4, r4, #3
 800b390:	42a0      	cmp	r0, r4
 800b392:	d007      	beq.n	800b3a4 <sbrk_aligned+0x38>
 800b394:	1a21      	subs	r1, r4, r0
 800b396:	4628      	mov	r0, r5
 800b398:	f001 f93a 	bl	800c610 <_sbrk_r>
 800b39c:	3001      	adds	r0, #1
 800b39e:	d101      	bne.n	800b3a4 <sbrk_aligned+0x38>
 800b3a0:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	200034cc 	.word	0x200034cc

0800b3ac <_malloc_r>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	1ccd      	adds	r5, r1, #3
 800b3b2:	f025 0503 	bic.w	r5, r5, #3
 800b3b6:	3508      	adds	r5, #8
 800b3b8:	2d0c      	cmp	r5, #12
 800b3ba:	bf38      	it	cc
 800b3bc:	250c      	movcc	r5, #12
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	db01      	blt.n	800b3c8 <_malloc_r+0x1c>
 800b3c4:	42a9      	cmp	r1, r5
 800b3c6:	d905      	bls.n	800b3d4 <_malloc_r+0x28>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	2600      	movs	r6, #0
 800b3cc:	603b      	str	r3, [r7, #0]
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4a8 <_malloc_r+0xfc>
 800b3d8:	f000 f868 	bl	800b4ac <__malloc_lock>
 800b3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	bb5c      	cbnz	r4, 800b43c <_malloc_r+0x90>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ffc0 	bl	800b36c <sbrk_aligned>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	d155      	bne.n	800b49e <_malloc_r+0xf2>
 800b3f2:	f8d8 4000 	ldr.w	r4, [r8]
 800b3f6:	4626      	mov	r6, r4
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	d145      	bne.n	800b488 <_malloc_r+0xdc>
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d048      	beq.n	800b492 <_malloc_r+0xe6>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	4631      	mov	r1, r6
 800b404:	4638      	mov	r0, r7
 800b406:	eb04 0903 	add.w	r9, r4, r3
 800b40a:	f001 f901 	bl	800c610 <_sbrk_r>
 800b40e:	4581      	cmp	r9, r0
 800b410:	d13f      	bne.n	800b492 <_malloc_r+0xe6>
 800b412:	6821      	ldr	r1, [r4, #0]
 800b414:	4638      	mov	r0, r7
 800b416:	1a6d      	subs	r5, r5, r1
 800b418:	4629      	mov	r1, r5
 800b41a:	f7ff ffa7 	bl	800b36c <sbrk_aligned>
 800b41e:	3001      	adds	r0, #1
 800b420:	d037      	beq.n	800b492 <_malloc_r+0xe6>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	442b      	add	r3, r5
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	f8d8 3000 	ldr.w	r3, [r8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d038      	beq.n	800b4a2 <_malloc_r+0xf6>
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	42a2      	cmp	r2, r4
 800b434:	d12b      	bne.n	800b48e <_malloc_r+0xe2>
 800b436:	2200      	movs	r2, #0
 800b438:	605a      	str	r2, [r3, #4]
 800b43a:	e00f      	b.n	800b45c <_malloc_r+0xb0>
 800b43c:	6822      	ldr	r2, [r4, #0]
 800b43e:	1b52      	subs	r2, r2, r5
 800b440:	d41f      	bmi.n	800b482 <_malloc_r+0xd6>
 800b442:	2a0b      	cmp	r2, #11
 800b444:	d917      	bls.n	800b476 <_malloc_r+0xca>
 800b446:	1961      	adds	r1, r4, r5
 800b448:	42a3      	cmp	r3, r4
 800b44a:	6025      	str	r5, [r4, #0]
 800b44c:	bf18      	it	ne
 800b44e:	6059      	strne	r1, [r3, #4]
 800b450:	6863      	ldr	r3, [r4, #4]
 800b452:	bf08      	it	eq
 800b454:	f8c8 1000 	streq.w	r1, [r8]
 800b458:	5162      	str	r2, [r4, r5]
 800b45a:	604b      	str	r3, [r1, #4]
 800b45c:	4638      	mov	r0, r7
 800b45e:	f104 060b 	add.w	r6, r4, #11
 800b462:	f000 f829 	bl	800b4b8 <__malloc_unlock>
 800b466:	f026 0607 	bic.w	r6, r6, #7
 800b46a:	1d23      	adds	r3, r4, #4
 800b46c:	1af2      	subs	r2, r6, r3
 800b46e:	d0ae      	beq.n	800b3ce <_malloc_r+0x22>
 800b470:	1b9b      	subs	r3, r3, r6
 800b472:	50a3      	str	r3, [r4, r2]
 800b474:	e7ab      	b.n	800b3ce <_malloc_r+0x22>
 800b476:	42a3      	cmp	r3, r4
 800b478:	6862      	ldr	r2, [r4, #4]
 800b47a:	d1dd      	bne.n	800b438 <_malloc_r+0x8c>
 800b47c:	f8c8 2000 	str.w	r2, [r8]
 800b480:	e7ec      	b.n	800b45c <_malloc_r+0xb0>
 800b482:	4623      	mov	r3, r4
 800b484:	6864      	ldr	r4, [r4, #4]
 800b486:	e7ac      	b.n	800b3e2 <_malloc_r+0x36>
 800b488:	4634      	mov	r4, r6
 800b48a:	6876      	ldr	r6, [r6, #4]
 800b48c:	e7b4      	b.n	800b3f8 <_malloc_r+0x4c>
 800b48e:	4613      	mov	r3, r2
 800b490:	e7cc      	b.n	800b42c <_malloc_r+0x80>
 800b492:	230c      	movs	r3, #12
 800b494:	4638      	mov	r0, r7
 800b496:	603b      	str	r3, [r7, #0]
 800b498:	f000 f80e 	bl	800b4b8 <__malloc_unlock>
 800b49c:	e797      	b.n	800b3ce <_malloc_r+0x22>
 800b49e:	6025      	str	r5, [r4, #0]
 800b4a0:	e7dc      	b.n	800b45c <_malloc_r+0xb0>
 800b4a2:	605b      	str	r3, [r3, #4]
 800b4a4:	deff      	udf	#255	; 0xff
 800b4a6:	bf00      	nop
 800b4a8:	200034c8 	.word	0x200034c8

0800b4ac <__malloc_lock>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__malloc_lock+0x8>)
 800b4ae:	f001 b8fb 	b.w	800c6a8 <__retarget_lock_acquire_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20003610 	.word	0x20003610

0800b4b8 <__malloc_unlock>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <__malloc_unlock+0x8>)
 800b4ba:	f001 b8f6 	b.w	800c6aa <__retarget_lock_release_recursive>
 800b4be:	bf00      	nop
 800b4c0:	20003610 	.word	0x20003610

0800b4c4 <realloc>:
 800b4c4:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <realloc+0xc>)
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	f000 b802 	b.w	800b4d4 <_realloc_r>
 800b4d0:	200001fc 	.word	0x200001fc

0800b4d4 <_realloc_r>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4614      	mov	r4, r2
 800b4dc:	460e      	mov	r6, r1
 800b4de:	b921      	cbnz	r1, 800b4ea <_realloc_r+0x16>
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e6:	f7ff bf61 	b.w	800b3ac <_malloc_r>
 800b4ea:	b92a      	cbnz	r2, 800b4f8 <_realloc_r+0x24>
 800b4ec:	f001 f8f2 	bl	800c6d4 <_free_r>
 800b4f0:	4625      	mov	r5, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	f002 f93c 	bl	800d774 <_malloc_usable_size_r>
 800b4fc:	4284      	cmp	r4, r0
 800b4fe:	4607      	mov	r7, r0
 800b500:	d802      	bhi.n	800b508 <_realloc_r+0x34>
 800b502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b506:	d812      	bhi.n	800b52e <_realloc_r+0x5a>
 800b508:	4621      	mov	r1, r4
 800b50a:	4640      	mov	r0, r8
 800b50c:	f7ff ff4e 	bl	800b3ac <_malloc_r>
 800b510:	4605      	mov	r5, r0
 800b512:	2800      	cmp	r0, #0
 800b514:	d0ed      	beq.n	800b4f2 <_realloc_r+0x1e>
 800b516:	42bc      	cmp	r4, r7
 800b518:	4622      	mov	r2, r4
 800b51a:	4631      	mov	r1, r6
 800b51c:	bf28      	it	cs
 800b51e:	463a      	movcs	r2, r7
 800b520:	f001 f8c4 	bl	800c6ac <memcpy>
 800b524:	4631      	mov	r1, r6
 800b526:	4640      	mov	r0, r8
 800b528:	f001 f8d4 	bl	800c6d4 <_free_r>
 800b52c:	e7e1      	b.n	800b4f2 <_realloc_r+0x1e>
 800b52e:	4635      	mov	r5, r6
 800b530:	e7df      	b.n	800b4f2 <_realloc_r+0x1e>

0800b532 <sulp>:
 800b532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b536:	460f      	mov	r7, r1
 800b538:	4690      	mov	r8, r2
 800b53a:	f001 ffeb 	bl	800d514 <__ulp>
 800b53e:	4604      	mov	r4, r0
 800b540:	460d      	mov	r5, r1
 800b542:	f1b8 0f00 	cmp.w	r8, #0
 800b546:	d011      	beq.n	800b56c <sulp+0x3a>
 800b548:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b54c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b550:	2b00      	cmp	r3, #0
 800b552:	dd0b      	ble.n	800b56c <sulp+0x3a>
 800b554:	2400      	movs	r4, #0
 800b556:	051b      	lsls	r3, r3, #20
 800b558:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b55c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b560:	4622      	mov	r2, r4
 800b562:	462b      	mov	r3, r5
 800b564:	f7f5 f832 	bl	80005cc <__aeabi_dmul>
 800b568:	4604      	mov	r4, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	4620      	mov	r0, r4
 800b56e:	4629      	mov	r1, r5
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	0000      	movs	r0, r0
	...

0800b578 <_strtod_l>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	b09f      	sub	sp, #124	; 0x7c
 800b57e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b580:	2200      	movs	r2, #0
 800b582:	4604      	mov	r4, r0
 800b584:	921a      	str	r2, [sp, #104]	; 0x68
 800b586:	460d      	mov	r5, r1
 800b588:	f04f 0800 	mov.w	r8, #0
 800b58c:	f04f 0900 	mov.w	r9, #0
 800b590:	460a      	mov	r2, r1
 800b592:	9219      	str	r2, [sp, #100]	; 0x64
 800b594:	7811      	ldrb	r1, [r2, #0]
 800b596:	292b      	cmp	r1, #43	; 0x2b
 800b598:	d04a      	beq.n	800b630 <_strtod_l+0xb8>
 800b59a:	d838      	bhi.n	800b60e <_strtod_l+0x96>
 800b59c:	290d      	cmp	r1, #13
 800b59e:	d832      	bhi.n	800b606 <_strtod_l+0x8e>
 800b5a0:	2908      	cmp	r1, #8
 800b5a2:	d832      	bhi.n	800b60a <_strtod_l+0x92>
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d03b      	beq.n	800b620 <_strtod_l+0xa8>
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	920e      	str	r2, [sp, #56]	; 0x38
 800b5ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b5ae:	7832      	ldrb	r2, [r6, #0]
 800b5b0:	2a30      	cmp	r2, #48	; 0x30
 800b5b2:	f040 80b2 	bne.w	800b71a <_strtod_l+0x1a2>
 800b5b6:	7872      	ldrb	r2, [r6, #1]
 800b5b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b5bc:	2a58      	cmp	r2, #88	; 0x58
 800b5be:	d16e      	bne.n	800b69e <_strtod_l+0x126>
 800b5c0:	9302      	str	r3, [sp, #8]
 800b5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	ab1a      	add	r3, sp, #104	; 0x68
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	4a8c      	ldr	r2, [pc, #560]	; (800b800 <_strtod_l+0x288>)
 800b5ce:	ab1b      	add	r3, sp, #108	; 0x6c
 800b5d0:	a919      	add	r1, sp, #100	; 0x64
 800b5d2:	f001 f92f 	bl	800c834 <__gethex>
 800b5d6:	f010 070f 	ands.w	r7, r0, #15
 800b5da:	4605      	mov	r5, r0
 800b5dc:	d005      	beq.n	800b5ea <_strtod_l+0x72>
 800b5de:	2f06      	cmp	r7, #6
 800b5e0:	d128      	bne.n	800b634 <_strtod_l+0xbc>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	3601      	adds	r6, #1
 800b5e6:	9619      	str	r6, [sp, #100]	; 0x64
 800b5e8:	930e      	str	r3, [sp, #56]	; 0x38
 800b5ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f040 85a0 	bne.w	800c132 <_strtod_l+0xbba>
 800b5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5f4:	b1cb      	cbz	r3, 800b62a <_strtod_l+0xb2>
 800b5f6:	4642      	mov	r2, r8
 800b5f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4619      	mov	r1, r3
 800b600:	b01f      	add	sp, #124	; 0x7c
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	2920      	cmp	r1, #32
 800b608:	d1ce      	bne.n	800b5a8 <_strtod_l+0x30>
 800b60a:	3201      	adds	r2, #1
 800b60c:	e7c1      	b.n	800b592 <_strtod_l+0x1a>
 800b60e:	292d      	cmp	r1, #45	; 0x2d
 800b610:	d1ca      	bne.n	800b5a8 <_strtod_l+0x30>
 800b612:	2101      	movs	r1, #1
 800b614:	910e      	str	r1, [sp, #56]	; 0x38
 800b616:	1c51      	adds	r1, r2, #1
 800b618:	9119      	str	r1, [sp, #100]	; 0x64
 800b61a:	7852      	ldrb	r2, [r2, #1]
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d1c5      	bne.n	800b5ac <_strtod_l+0x34>
 800b620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b622:	9519      	str	r5, [sp, #100]	; 0x64
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 8582 	bne.w	800c12e <_strtod_l+0xbb6>
 800b62a:	4642      	mov	r2, r8
 800b62c:	464b      	mov	r3, r9
 800b62e:	e7e5      	b.n	800b5fc <_strtod_l+0x84>
 800b630:	2100      	movs	r1, #0
 800b632:	e7ef      	b.n	800b614 <_strtod_l+0x9c>
 800b634:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b636:	b13a      	cbz	r2, 800b648 <_strtod_l+0xd0>
 800b638:	2135      	movs	r1, #53	; 0x35
 800b63a:	a81c      	add	r0, sp, #112	; 0x70
 800b63c:	f002 f856 	bl	800d6ec <__copybits>
 800b640:	4620      	mov	r0, r4
 800b642:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b644:	f001 fc3a 	bl	800cebc <_Bfree>
 800b648:	3f01      	subs	r7, #1
 800b64a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b64c:	2f04      	cmp	r7, #4
 800b64e:	d806      	bhi.n	800b65e <_strtod_l+0xe6>
 800b650:	e8df f007 	tbb	[pc, r7]
 800b654:	201d0314 	.word	0x201d0314
 800b658:	14          	.byte	0x14
 800b659:	00          	.byte	0x00
 800b65a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b65e:	05e9      	lsls	r1, r5, #23
 800b660:	bf48      	it	mi
 800b662:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b66a:	0d1b      	lsrs	r3, r3, #20
 800b66c:	051b      	lsls	r3, r3, #20
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1bb      	bne.n	800b5ea <_strtod_l+0x72>
 800b672:	f000 ffef 	bl	800c654 <__errno>
 800b676:	2322      	movs	r3, #34	; 0x22
 800b678:	6003      	str	r3, [r0, #0]
 800b67a:	e7b6      	b.n	800b5ea <_strtod_l+0x72>
 800b67c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b680:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b684:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b688:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b68c:	e7e7      	b.n	800b65e <_strtod_l+0xe6>
 800b68e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b804 <_strtod_l+0x28c>
 800b692:	e7e4      	b.n	800b65e <_strtod_l+0xe6>
 800b694:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b698:	f04f 38ff 	mov.w	r8, #4294967295
 800b69c:	e7df      	b.n	800b65e <_strtod_l+0xe6>
 800b69e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	9219      	str	r2, [sp, #100]	; 0x64
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	2b30      	cmp	r3, #48	; 0x30
 800b6a8:	d0f9      	beq.n	800b69e <_strtod_l+0x126>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d09d      	beq.n	800b5ea <_strtod_l+0x72>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	f04f 0a00 	mov.w	sl, #0
 800b6b4:	220a      	movs	r2, #10
 800b6b6:	46d3      	mov	fp, sl
 800b6b8:	9305      	str	r3, [sp, #20]
 800b6ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b6c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b6c4:	7806      	ldrb	r6, [r0, #0]
 800b6c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b6ca:	b2d9      	uxtb	r1, r3
 800b6cc:	2909      	cmp	r1, #9
 800b6ce:	d926      	bls.n	800b71e <_strtod_l+0x1a6>
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	494d      	ldr	r1, [pc, #308]	; (800b808 <_strtod_l+0x290>)
 800b6d4:	f000 ff00 	bl	800c4d8 <strncmp>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d030      	beq.n	800b73e <_strtod_l+0x1c6>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	4632      	mov	r2, r6
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	465e      	mov	r6, fp
 800b6e4:	9008      	str	r0, [sp, #32]
 800b6e6:	2a65      	cmp	r2, #101	; 0x65
 800b6e8:	d001      	beq.n	800b6ee <_strtod_l+0x176>
 800b6ea:	2a45      	cmp	r2, #69	; 0x45
 800b6ec:	d113      	bne.n	800b716 <_strtod_l+0x19e>
 800b6ee:	b91e      	cbnz	r6, 800b6f8 <_strtod_l+0x180>
 800b6f0:	9a05      	ldr	r2, [sp, #20]
 800b6f2:	4302      	orrs	r2, r0
 800b6f4:	d094      	beq.n	800b620 <_strtod_l+0xa8>
 800b6f6:	2600      	movs	r6, #0
 800b6f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b6fa:	1c6a      	adds	r2, r5, #1
 800b6fc:	9219      	str	r2, [sp, #100]	; 0x64
 800b6fe:	786a      	ldrb	r2, [r5, #1]
 800b700:	2a2b      	cmp	r2, #43	; 0x2b
 800b702:	d074      	beq.n	800b7ee <_strtod_l+0x276>
 800b704:	2a2d      	cmp	r2, #45	; 0x2d
 800b706:	d078      	beq.n	800b7fa <_strtod_l+0x282>
 800b708:	f04f 0c00 	mov.w	ip, #0
 800b70c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b710:	2909      	cmp	r1, #9
 800b712:	d97f      	bls.n	800b814 <_strtod_l+0x29c>
 800b714:	9519      	str	r5, [sp, #100]	; 0x64
 800b716:	2700      	movs	r7, #0
 800b718:	e09e      	b.n	800b858 <_strtod_l+0x2e0>
 800b71a:	2300      	movs	r3, #0
 800b71c:	e7c8      	b.n	800b6b0 <_strtod_l+0x138>
 800b71e:	f1bb 0f08 	cmp.w	fp, #8
 800b722:	bfd8      	it	le
 800b724:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800b726:	f100 0001 	add.w	r0, r0, #1
 800b72a:	bfd6      	itet	le
 800b72c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b730:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b734:	930a      	strle	r3, [sp, #40]	; 0x28
 800b736:	f10b 0b01 	add.w	fp, fp, #1
 800b73a:	9019      	str	r0, [sp, #100]	; 0x64
 800b73c:	e7c1      	b.n	800b6c2 <_strtod_l+0x14a>
 800b73e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	9219      	str	r2, [sp, #100]	; 0x64
 800b744:	785a      	ldrb	r2, [r3, #1]
 800b746:	f1bb 0f00 	cmp.w	fp, #0
 800b74a:	d037      	beq.n	800b7bc <_strtod_l+0x244>
 800b74c:	465e      	mov	r6, fp
 800b74e:	9008      	str	r0, [sp, #32]
 800b750:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b754:	2b09      	cmp	r3, #9
 800b756:	d912      	bls.n	800b77e <_strtod_l+0x206>
 800b758:	2301      	movs	r3, #1
 800b75a:	e7c4      	b.n	800b6e6 <_strtod_l+0x16e>
 800b75c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b75e:	3001      	adds	r0, #1
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	9219      	str	r2, [sp, #100]	; 0x64
 800b764:	785a      	ldrb	r2, [r3, #1]
 800b766:	2a30      	cmp	r2, #48	; 0x30
 800b768:	d0f8      	beq.n	800b75c <_strtod_l+0x1e4>
 800b76a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b76e:	2b08      	cmp	r3, #8
 800b770:	f200 84e4 	bhi.w	800c13c <_strtod_l+0xbc4>
 800b774:	9008      	str	r0, [sp, #32]
 800b776:	2000      	movs	r0, #0
 800b778:	4606      	mov	r6, r0
 800b77a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b77c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b77e:	3a30      	subs	r2, #48	; 0x30
 800b780:	f100 0301 	add.w	r3, r0, #1
 800b784:	d014      	beq.n	800b7b0 <_strtod_l+0x238>
 800b786:	9908      	ldr	r1, [sp, #32]
 800b788:	eb00 0c06 	add.w	ip, r0, r6
 800b78c:	4419      	add	r1, r3
 800b78e:	9108      	str	r1, [sp, #32]
 800b790:	4633      	mov	r3, r6
 800b792:	210a      	movs	r1, #10
 800b794:	4563      	cmp	r3, ip
 800b796:	d113      	bne.n	800b7c0 <_strtod_l+0x248>
 800b798:	1833      	adds	r3, r6, r0
 800b79a:	2b08      	cmp	r3, #8
 800b79c:	f106 0601 	add.w	r6, r6, #1
 800b7a0:	4406      	add	r6, r0
 800b7a2:	dc1a      	bgt.n	800b7da <_strtod_l+0x262>
 800b7a4:	230a      	movs	r3, #10
 800b7a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7a8:	fb03 2301 	mla	r3, r3, r1, r2
 800b7ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	1c51      	adds	r1, r2, #1
 800b7b6:	9119      	str	r1, [sp, #100]	; 0x64
 800b7b8:	7852      	ldrb	r2, [r2, #1]
 800b7ba:	e7c9      	b.n	800b750 <_strtod_l+0x1d8>
 800b7bc:	4658      	mov	r0, fp
 800b7be:	e7d2      	b.n	800b766 <_strtod_l+0x1ee>
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	f103 0301 	add.w	r3, r3, #1
 800b7c6:	dc03      	bgt.n	800b7d0 <_strtod_l+0x258>
 800b7c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b7ca:	434f      	muls	r7, r1
 800b7cc:	970a      	str	r7, [sp, #40]	; 0x28
 800b7ce:	e7e1      	b.n	800b794 <_strtod_l+0x21c>
 800b7d0:	2b10      	cmp	r3, #16
 800b7d2:	bfd8      	it	le
 800b7d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b7d8:	e7dc      	b.n	800b794 <_strtod_l+0x21c>
 800b7da:	2e10      	cmp	r6, #16
 800b7dc:	bfdc      	itt	le
 800b7de:	230a      	movle	r3, #10
 800b7e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b7e4:	e7e3      	b.n	800b7ae <_strtod_l+0x236>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	9308      	str	r3, [sp, #32]
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e780      	b.n	800b6f0 <_strtod_l+0x178>
 800b7ee:	f04f 0c00 	mov.w	ip, #0
 800b7f2:	1caa      	adds	r2, r5, #2
 800b7f4:	9219      	str	r2, [sp, #100]	; 0x64
 800b7f6:	78aa      	ldrb	r2, [r5, #2]
 800b7f8:	e788      	b.n	800b70c <_strtod_l+0x194>
 800b7fa:	f04f 0c01 	mov.w	ip, #1
 800b7fe:	e7f8      	b.n	800b7f2 <_strtod_l+0x27a>
 800b800:	0800f9dc 	.word	0x0800f9dc
 800b804:	7ff00000 	.word	0x7ff00000
 800b808:	0800f9ce 	.word	0x0800f9ce
 800b80c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b80e:	1c51      	adds	r1, r2, #1
 800b810:	9119      	str	r1, [sp, #100]	; 0x64
 800b812:	7852      	ldrb	r2, [r2, #1]
 800b814:	2a30      	cmp	r2, #48	; 0x30
 800b816:	d0f9      	beq.n	800b80c <_strtod_l+0x294>
 800b818:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b81c:	2908      	cmp	r1, #8
 800b81e:	f63f af7a 	bhi.w	800b716 <_strtod_l+0x19e>
 800b822:	3a30      	subs	r2, #48	; 0x30
 800b824:	9209      	str	r2, [sp, #36]	; 0x24
 800b826:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b828:	920c      	str	r2, [sp, #48]	; 0x30
 800b82a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b82c:	1c57      	adds	r7, r2, #1
 800b82e:	9719      	str	r7, [sp, #100]	; 0x64
 800b830:	7852      	ldrb	r2, [r2, #1]
 800b832:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b836:	f1be 0f09 	cmp.w	lr, #9
 800b83a:	d938      	bls.n	800b8ae <_strtod_l+0x336>
 800b83c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b83e:	1a7f      	subs	r7, r7, r1
 800b840:	2f08      	cmp	r7, #8
 800b842:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b846:	dc03      	bgt.n	800b850 <_strtod_l+0x2d8>
 800b848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b84a:	428f      	cmp	r7, r1
 800b84c:	bfa8      	it	ge
 800b84e:	460f      	movge	r7, r1
 800b850:	f1bc 0f00 	cmp.w	ip, #0
 800b854:	d000      	beq.n	800b858 <_strtod_l+0x2e0>
 800b856:	427f      	negs	r7, r7
 800b858:	2e00      	cmp	r6, #0
 800b85a:	d14f      	bne.n	800b8fc <_strtod_l+0x384>
 800b85c:	9905      	ldr	r1, [sp, #20]
 800b85e:	4301      	orrs	r1, r0
 800b860:	f47f aec3 	bne.w	800b5ea <_strtod_l+0x72>
 800b864:	2b00      	cmp	r3, #0
 800b866:	f47f aedb 	bne.w	800b620 <_strtod_l+0xa8>
 800b86a:	2a69      	cmp	r2, #105	; 0x69
 800b86c:	d029      	beq.n	800b8c2 <_strtod_l+0x34a>
 800b86e:	dc26      	bgt.n	800b8be <_strtod_l+0x346>
 800b870:	2a49      	cmp	r2, #73	; 0x49
 800b872:	d026      	beq.n	800b8c2 <_strtod_l+0x34a>
 800b874:	2a4e      	cmp	r2, #78	; 0x4e
 800b876:	f47f aed3 	bne.w	800b620 <_strtod_l+0xa8>
 800b87a:	499a      	ldr	r1, [pc, #616]	; (800bae4 <_strtod_l+0x56c>)
 800b87c:	a819      	add	r0, sp, #100	; 0x64
 800b87e:	f001 fa1b 	bl	800ccb8 <__match>
 800b882:	2800      	cmp	r0, #0
 800b884:	f43f aecc 	beq.w	800b620 <_strtod_l+0xa8>
 800b888:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b28      	cmp	r3, #40	; 0x28
 800b88e:	d12f      	bne.n	800b8f0 <_strtod_l+0x378>
 800b890:	4995      	ldr	r1, [pc, #596]	; (800bae8 <_strtod_l+0x570>)
 800b892:	aa1c      	add	r2, sp, #112	; 0x70
 800b894:	a819      	add	r0, sp, #100	; 0x64
 800b896:	f001 fa23 	bl	800cce0 <__hexnan>
 800b89a:	2805      	cmp	r0, #5
 800b89c:	d128      	bne.n	800b8f0 <_strtod_l+0x378>
 800b89e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800b8a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b8a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b8ac:	e69d      	b.n	800b5ea <_strtod_l+0x72>
 800b8ae:	210a      	movs	r1, #10
 800b8b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b8b2:	fb01 2107 	mla	r1, r1, r7, r2
 800b8b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b8ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b8bc:	e7b5      	b.n	800b82a <_strtod_l+0x2b2>
 800b8be:	2a6e      	cmp	r2, #110	; 0x6e
 800b8c0:	e7d9      	b.n	800b876 <_strtod_l+0x2fe>
 800b8c2:	498a      	ldr	r1, [pc, #552]	; (800baec <_strtod_l+0x574>)
 800b8c4:	a819      	add	r0, sp, #100	; 0x64
 800b8c6:	f001 f9f7 	bl	800ccb8 <__match>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f43f aea8 	beq.w	800b620 <_strtod_l+0xa8>
 800b8d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8d2:	4987      	ldr	r1, [pc, #540]	; (800baf0 <_strtod_l+0x578>)
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	a819      	add	r0, sp, #100	; 0x64
 800b8d8:	9319      	str	r3, [sp, #100]	; 0x64
 800b8da:	f001 f9ed 	bl	800ccb8 <__match>
 800b8de:	b910      	cbnz	r0, 800b8e6 <_strtod_l+0x36e>
 800b8e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	9319      	str	r3, [sp, #100]	; 0x64
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800baf4 <_strtod_l+0x57c>
 800b8ee:	e67c      	b.n	800b5ea <_strtod_l+0x72>
 800b8f0:	4881      	ldr	r0, [pc, #516]	; (800baf8 <_strtod_l+0x580>)
 800b8f2:	f000 fee9 	bl	800c6c8 <nan>
 800b8f6:	4680      	mov	r8, r0
 800b8f8:	4689      	mov	r9, r1
 800b8fa:	e676      	b.n	800b5ea <_strtod_l+0x72>
 800b8fc:	9b08      	ldr	r3, [sp, #32]
 800b8fe:	f1bb 0f00 	cmp.w	fp, #0
 800b902:	bf08      	it	eq
 800b904:	46b3      	moveq	fp, r6
 800b906:	1afb      	subs	r3, r7, r3
 800b908:	2e10      	cmp	r6, #16
 800b90a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b90c:	4635      	mov	r5, r6
 800b90e:	9309      	str	r3, [sp, #36]	; 0x24
 800b910:	bfa8      	it	ge
 800b912:	2510      	movge	r5, #16
 800b914:	f7f4 fde0 	bl	80004d8 <__aeabi_ui2d>
 800b918:	2e09      	cmp	r6, #9
 800b91a:	4680      	mov	r8, r0
 800b91c:	4689      	mov	r9, r1
 800b91e:	dd13      	ble.n	800b948 <_strtod_l+0x3d0>
 800b920:	4b76      	ldr	r3, [pc, #472]	; (800bafc <_strtod_l+0x584>)
 800b922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b926:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b92a:	f7f4 fe4f 	bl	80005cc <__aeabi_dmul>
 800b92e:	4680      	mov	r8, r0
 800b930:	4650      	mov	r0, sl
 800b932:	4689      	mov	r9, r1
 800b934:	f7f4 fdd0 	bl	80004d8 <__aeabi_ui2d>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4640      	mov	r0, r8
 800b93e:	4649      	mov	r1, r9
 800b940:	f7f4 fc8e 	bl	8000260 <__adddf3>
 800b944:	4680      	mov	r8, r0
 800b946:	4689      	mov	r9, r1
 800b948:	2e0f      	cmp	r6, #15
 800b94a:	dc36      	bgt.n	800b9ba <_strtod_l+0x442>
 800b94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f43f ae4b 	beq.w	800b5ea <_strtod_l+0x72>
 800b954:	dd22      	ble.n	800b99c <_strtod_l+0x424>
 800b956:	2b16      	cmp	r3, #22
 800b958:	dc09      	bgt.n	800b96e <_strtod_l+0x3f6>
 800b95a:	4968      	ldr	r1, [pc, #416]	; (800bafc <_strtod_l+0x584>)
 800b95c:	4642      	mov	r2, r8
 800b95e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b962:	464b      	mov	r3, r9
 800b964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b968:	f7f4 fe30 	bl	80005cc <__aeabi_dmul>
 800b96c:	e7c3      	b.n	800b8f6 <_strtod_l+0x37e>
 800b96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b970:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b974:	4293      	cmp	r3, r2
 800b976:	db20      	blt.n	800b9ba <_strtod_l+0x442>
 800b978:	4c60      	ldr	r4, [pc, #384]	; (800bafc <_strtod_l+0x584>)
 800b97a:	f1c6 060f 	rsb	r6, r6, #15
 800b97e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b982:	4642      	mov	r2, r8
 800b984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b988:	464b      	mov	r3, r9
 800b98a:	f7f4 fe1f 	bl	80005cc <__aeabi_dmul>
 800b98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b990:	1b9e      	subs	r6, r3, r6
 800b992:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b996:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b99a:	e7e5      	b.n	800b968 <_strtod_l+0x3f0>
 800b99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99e:	3316      	adds	r3, #22
 800b9a0:	db0b      	blt.n	800b9ba <_strtod_l+0x442>
 800b9a2:	9b08      	ldr	r3, [sp, #32]
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	1bdf      	subs	r7, r3, r7
 800b9a8:	4b54      	ldr	r3, [pc, #336]	; (800bafc <_strtod_l+0x584>)
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b4:	f7f4 ff34 	bl	8000820 <__aeabi_ddiv>
 800b9b8:	e79d      	b.n	800b8f6 <_strtod_l+0x37e>
 800b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9bc:	1b75      	subs	r5, r6, r5
 800b9be:	441d      	add	r5, r3
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	dd70      	ble.n	800baa6 <_strtod_l+0x52e>
 800b9c4:	f015 030f 	ands.w	r3, r5, #15
 800b9c8:	d00a      	beq.n	800b9e0 <_strtod_l+0x468>
 800b9ca:	494c      	ldr	r1, [pc, #304]	; (800bafc <_strtod_l+0x584>)
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f7f4 fdf8 	bl	80005cc <__aeabi_dmul>
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	f035 050f 	bics.w	r5, r5, #15
 800b9e4:	d04d      	beq.n	800ba82 <_strtod_l+0x50a>
 800b9e6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b9ea:	dd22      	ble.n	800ba32 <_strtod_l+0x4ba>
 800b9ec:	2600      	movs	r6, #0
 800b9ee:	46b3      	mov	fp, r6
 800b9f0:	960b      	str	r6, [sp, #44]	; 0x2c
 800b9f2:	9608      	str	r6, [sp, #32]
 800b9f4:	2322      	movs	r3, #34	; 0x22
 800b9f6:	f04f 0800 	mov.w	r8, #0
 800b9fa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800baf4 <_strtod_l+0x57c>
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f43f adf1 	beq.w	800b5ea <_strtod_l+0x72>
 800ba08:	4620      	mov	r0, r4
 800ba0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ba0c:	f001 fa56 	bl	800cebc <_Bfree>
 800ba10:	4620      	mov	r0, r4
 800ba12:	9908      	ldr	r1, [sp, #32]
 800ba14:	f001 fa52 	bl	800cebc <_Bfree>
 800ba18:	4659      	mov	r1, fp
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f001 fa4e 	bl	800cebc <_Bfree>
 800ba20:	4620      	mov	r0, r4
 800ba22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba24:	f001 fa4a 	bl	800cebc <_Bfree>
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f001 fa46 	bl	800cebc <_Bfree>
 800ba30:	e5db      	b.n	800b5ea <_strtod_l+0x72>
 800ba32:	4b33      	ldr	r3, [pc, #204]	; (800bb00 <_strtod_l+0x588>)
 800ba34:	4640      	mov	r0, r8
 800ba36:	9305      	str	r3, [sp, #20]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	469a      	mov	sl, r3
 800ba3e:	112d      	asrs	r5, r5, #4
 800ba40:	2d01      	cmp	r5, #1
 800ba42:	dc21      	bgt.n	800ba88 <_strtod_l+0x510>
 800ba44:	b10b      	cbz	r3, 800ba4a <_strtod_l+0x4d2>
 800ba46:	4680      	mov	r8, r0
 800ba48:	4689      	mov	r9, r1
 800ba4a:	492d      	ldr	r1, [pc, #180]	; (800bb00 <_strtod_l+0x588>)
 800ba4c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ba50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ba54:	4642      	mov	r2, r8
 800ba56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba5a:	464b      	mov	r3, r9
 800ba5c:	f7f4 fdb6 	bl	80005cc <__aeabi_dmul>
 800ba60:	4b24      	ldr	r3, [pc, #144]	; (800baf4 <_strtod_l+0x57c>)
 800ba62:	460a      	mov	r2, r1
 800ba64:	400b      	ands	r3, r1
 800ba66:	4927      	ldr	r1, [pc, #156]	; (800bb04 <_strtod_l+0x58c>)
 800ba68:	4680      	mov	r8, r0
 800ba6a:	428b      	cmp	r3, r1
 800ba6c:	d8be      	bhi.n	800b9ec <_strtod_l+0x474>
 800ba6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ba72:	428b      	cmp	r3, r1
 800ba74:	bf86      	itte	hi
 800ba76:	f04f 38ff 	movhi.w	r8, #4294967295
 800ba7a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800bb08 <_strtod_l+0x590>
 800ba7e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ba82:	2300      	movs	r3, #0
 800ba84:	9305      	str	r3, [sp, #20]
 800ba86:	e07b      	b.n	800bb80 <_strtod_l+0x608>
 800ba88:	07ea      	lsls	r2, r5, #31
 800ba8a:	d505      	bpl.n	800ba98 <_strtod_l+0x520>
 800ba8c:	9b05      	ldr	r3, [sp, #20]
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f7f4 fd9b 	bl	80005cc <__aeabi_dmul>
 800ba96:	2301      	movs	r3, #1
 800ba98:	9a05      	ldr	r2, [sp, #20]
 800ba9a:	f10a 0a01 	add.w	sl, sl, #1
 800ba9e:	3208      	adds	r2, #8
 800baa0:	106d      	asrs	r5, r5, #1
 800baa2:	9205      	str	r2, [sp, #20]
 800baa4:	e7cc      	b.n	800ba40 <_strtod_l+0x4c8>
 800baa6:	d0ec      	beq.n	800ba82 <_strtod_l+0x50a>
 800baa8:	426d      	negs	r5, r5
 800baaa:	f015 020f 	ands.w	r2, r5, #15
 800baae:	d00a      	beq.n	800bac6 <_strtod_l+0x54e>
 800bab0:	4b12      	ldr	r3, [pc, #72]	; (800bafc <_strtod_l+0x584>)
 800bab2:	4640      	mov	r0, r8
 800bab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab8:	4649      	mov	r1, r9
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 feaf 	bl	8000820 <__aeabi_ddiv>
 800bac2:	4680      	mov	r8, r0
 800bac4:	4689      	mov	r9, r1
 800bac6:	112d      	asrs	r5, r5, #4
 800bac8:	d0db      	beq.n	800ba82 <_strtod_l+0x50a>
 800baca:	2d1f      	cmp	r5, #31
 800bacc:	dd1e      	ble.n	800bb0c <_strtod_l+0x594>
 800bace:	2600      	movs	r6, #0
 800bad0:	46b3      	mov	fp, r6
 800bad2:	960b      	str	r6, [sp, #44]	; 0x2c
 800bad4:	9608      	str	r6, [sp, #32]
 800bad6:	2322      	movs	r3, #34	; 0x22
 800bad8:	f04f 0800 	mov.w	r8, #0
 800badc:	f04f 0900 	mov.w	r9, #0
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	e78d      	b.n	800ba00 <_strtod_l+0x488>
 800bae4:	0800f9d9 	.word	0x0800f9d9
 800bae8:	0800f9f0 	.word	0x0800f9f0
 800baec:	0800f9d0 	.word	0x0800f9d0
 800baf0:	0800f9d3 	.word	0x0800f9d3
 800baf4:	7ff00000 	.word	0x7ff00000
 800baf8:	0800fd8a 	.word	0x0800fd8a
 800bafc:	0800fc48 	.word	0x0800fc48
 800bb00:	0800fc20 	.word	0x0800fc20
 800bb04:	7ca00000 	.word	0x7ca00000
 800bb08:	7fefffff 	.word	0x7fefffff
 800bb0c:	f015 0310 	ands.w	r3, r5, #16
 800bb10:	bf18      	it	ne
 800bb12:	236a      	movne	r3, #106	; 0x6a
 800bb14:	4640      	mov	r0, r8
 800bb16:	9305      	str	r3, [sp, #20]
 800bb18:	4649      	mov	r1, r9
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800bde8 <_strtod_l+0x870>
 800bb20:	07ea      	lsls	r2, r5, #31
 800bb22:	d504      	bpl.n	800bb2e <_strtod_l+0x5b6>
 800bb24:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb28:	f7f4 fd50 	bl	80005cc <__aeabi_dmul>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	106d      	asrs	r5, r5, #1
 800bb30:	f10a 0a08 	add.w	sl, sl, #8
 800bb34:	d1f4      	bne.n	800bb20 <_strtod_l+0x5a8>
 800bb36:	b10b      	cbz	r3, 800bb3c <_strtod_l+0x5c4>
 800bb38:	4680      	mov	r8, r0
 800bb3a:	4689      	mov	r9, r1
 800bb3c:	9b05      	ldr	r3, [sp, #20]
 800bb3e:	b1bb      	cbz	r3, 800bb70 <_strtod_l+0x5f8>
 800bb40:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bb44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	dd10      	ble.n	800bb70 <_strtod_l+0x5f8>
 800bb4e:	2b1f      	cmp	r3, #31
 800bb50:	f340 8128 	ble.w	800bda4 <_strtod_l+0x82c>
 800bb54:	2b34      	cmp	r3, #52	; 0x34
 800bb56:	bfd8      	it	le
 800bb58:	f04f 33ff 	movle.w	r3, #4294967295
 800bb5c:	f04f 0800 	mov.w	r8, #0
 800bb60:	bfcf      	iteee	gt
 800bb62:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bb66:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bb6a:	4093      	lslle	r3, r2
 800bb6c:	ea03 0901 	andle.w	r9, r3, r1
 800bb70:	2200      	movs	r2, #0
 800bb72:	2300      	movs	r3, #0
 800bb74:	4640      	mov	r0, r8
 800bb76:	4649      	mov	r1, r9
 800bb78:	f7f4 ff90 	bl	8000a9c <__aeabi_dcmpeq>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d1a6      	bne.n	800bace <_strtod_l+0x556>
 800bb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb82:	465a      	mov	r2, fp
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	4620      	mov	r0, r4
 800bb88:	4633      	mov	r3, r6
 800bb8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb8c:	f001 f9fe 	bl	800cf8c <__s2b>
 800bb90:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f43f af2a 	beq.w	800b9ec <_strtod_l+0x474>
 800bb98:	2600      	movs	r6, #0
 800bb9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	eba3 0307 	sub.w	r3, r3, r7
 800bba4:	bfa8      	it	ge
 800bba6:	2300      	movge	r3, #0
 800bba8:	46b3      	mov	fp, r6
 800bbaa:	9312      	str	r3, [sp, #72]	; 0x48
 800bbac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bbb0:	9316      	str	r3, [sp, #88]	; 0x58
 800bbb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	6859      	ldr	r1, [r3, #4]
 800bbb8:	f001 f940 	bl	800ce3c <_Balloc>
 800bbbc:	9008      	str	r0, [sp, #32]
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f43f af18 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bbc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbc6:	300c      	adds	r0, #12
 800bbc8:	691a      	ldr	r2, [r3, #16]
 800bbca:	f103 010c 	add.w	r1, r3, #12
 800bbce:	3202      	adds	r2, #2
 800bbd0:	0092      	lsls	r2, r2, #2
 800bbd2:	f000 fd6b 	bl	800c6ac <memcpy>
 800bbd6:	ab1c      	add	r3, sp, #112	; 0x70
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	ab1b      	add	r3, sp, #108	; 0x6c
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	4642      	mov	r2, r8
 800bbe0:	464b      	mov	r3, r9
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800bbe8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800bbec:	f001 fcfa 	bl	800d5e4 <__d2b>
 800bbf0:	901a      	str	r0, [sp, #104]	; 0x68
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	f43f aefe 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f001 fa5e 	bl	800d0bc <__i2b>
 800bc00:	4683      	mov	fp, r0
 800bc02:	2800      	cmp	r0, #0
 800bc04:	f43f aef6 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bc08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bc0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	bfab      	itete	ge
 800bc10:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800bc12:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bc14:	eb07 0a03 	addge.w	sl, r7, r3
 800bc18:	1bdd      	sublt	r5, r3, r7
 800bc1a:	9b05      	ldr	r3, [sp, #20]
 800bc1c:	bfa8      	it	ge
 800bc1e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bc20:	eba7 0703 	sub.w	r7, r7, r3
 800bc24:	4417      	add	r7, r2
 800bc26:	4b71      	ldr	r3, [pc, #452]	; (800bdec <_strtod_l+0x874>)
 800bc28:	f107 37ff 	add.w	r7, r7, #4294967295
 800bc2c:	bfb8      	it	lt
 800bc2e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800bc32:	429f      	cmp	r7, r3
 800bc34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc38:	f280 80c7 	bge.w	800bdca <_strtod_l+0x852>
 800bc3c:	1bdb      	subs	r3, r3, r7
 800bc3e:	2b1f      	cmp	r3, #31
 800bc40:	f04f 0101 	mov.w	r1, #1
 800bc44:	eba2 0203 	sub.w	r2, r2, r3
 800bc48:	f300 80b3 	bgt.w	800bdb2 <_strtod_l+0x83a>
 800bc4c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc50:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc52:	2300      	movs	r3, #0
 800bc54:	9310      	str	r3, [sp, #64]	; 0x40
 800bc56:	eb0a 0702 	add.w	r7, sl, r2
 800bc5a:	9b05      	ldr	r3, [sp, #20]
 800bc5c:	45ba      	cmp	sl, r7
 800bc5e:	4415      	add	r5, r2
 800bc60:	441d      	add	r5, r3
 800bc62:	4653      	mov	r3, sl
 800bc64:	bfa8      	it	ge
 800bc66:	463b      	movge	r3, r7
 800bc68:	42ab      	cmp	r3, r5
 800bc6a:	bfa8      	it	ge
 800bc6c:	462b      	movge	r3, r5
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	bfc2      	ittt	gt
 800bc72:	1aff      	subgt	r7, r7, r3
 800bc74:	1aed      	subgt	r5, r5, r3
 800bc76:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bc7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd17      	ble.n	800bcb0 <_strtod_l+0x738>
 800bc80:	4659      	mov	r1, fp
 800bc82:	461a      	mov	r2, r3
 800bc84:	4620      	mov	r0, r4
 800bc86:	f001 fad7 	bl	800d238 <__pow5mult>
 800bc8a:	4683      	mov	fp, r0
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f43f aeb1 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bc92:	4601      	mov	r1, r0
 800bc94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc96:	4620      	mov	r0, r4
 800bc98:	f001 fa26 	bl	800d0e8 <__multiply>
 800bc9c:	900a      	str	r0, [sp, #40]	; 0x28
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f43f aea8 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bca4:	4620      	mov	r0, r4
 800bca6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bca8:	f001 f908 	bl	800cebc <_Bfree>
 800bcac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcae:	931a      	str	r3, [sp, #104]	; 0x68
 800bcb0:	2f00      	cmp	r7, #0
 800bcb2:	f300 808f 	bgt.w	800bdd4 <_strtod_l+0x85c>
 800bcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	dd08      	ble.n	800bcce <_strtod_l+0x756>
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bcc0:	9908      	ldr	r1, [sp, #32]
 800bcc2:	f001 fab9 	bl	800d238 <__pow5mult>
 800bcc6:	9008      	str	r0, [sp, #32]
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	f43f ae93 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bcce:	2d00      	cmp	r5, #0
 800bcd0:	dd08      	ble.n	800bce4 <_strtod_l+0x76c>
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	9908      	ldr	r1, [sp, #32]
 800bcd8:	f001 fb08 	bl	800d2ec <__lshift>
 800bcdc:	9008      	str	r0, [sp, #32]
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f43f ae88 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bce4:	f1ba 0f00 	cmp.w	sl, #0
 800bce8:	dd08      	ble.n	800bcfc <_strtod_l+0x784>
 800bcea:	4659      	mov	r1, fp
 800bcec:	4652      	mov	r2, sl
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f001 fafc 	bl	800d2ec <__lshift>
 800bcf4:	4683      	mov	fp, r0
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f43f ae7c 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	9a08      	ldr	r2, [sp, #32]
 800bd00:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bd02:	f001 fb7b 	bl	800d3fc <__mdiff>
 800bd06:	4606      	mov	r6, r0
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	f43f ae73 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bd0e:	2500      	movs	r5, #0
 800bd10:	68c3      	ldr	r3, [r0, #12]
 800bd12:	4659      	mov	r1, fp
 800bd14:	60c5      	str	r5, [r0, #12]
 800bd16:	930a      	str	r3, [sp, #40]	; 0x28
 800bd18:	f001 fb54 	bl	800d3c4 <__mcmp>
 800bd1c:	42a8      	cmp	r0, r5
 800bd1e:	da6b      	bge.n	800bdf8 <_strtod_l+0x880>
 800bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd22:	ea53 0308 	orrs.w	r3, r3, r8
 800bd26:	f040 808f 	bne.w	800be48 <_strtod_l+0x8d0>
 800bd2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f040 808a 	bne.w	800be48 <_strtod_l+0x8d0>
 800bd34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd38:	0d1b      	lsrs	r3, r3, #20
 800bd3a:	051b      	lsls	r3, r3, #20
 800bd3c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bd40:	f240 8082 	bls.w	800be48 <_strtod_l+0x8d0>
 800bd44:	6973      	ldr	r3, [r6, #20]
 800bd46:	b913      	cbnz	r3, 800bd4e <_strtod_l+0x7d6>
 800bd48:	6933      	ldr	r3, [r6, #16]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	dd7c      	ble.n	800be48 <_strtod_l+0x8d0>
 800bd4e:	4631      	mov	r1, r6
 800bd50:	2201      	movs	r2, #1
 800bd52:	4620      	mov	r0, r4
 800bd54:	f001 faca 	bl	800d2ec <__lshift>
 800bd58:	4659      	mov	r1, fp
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	f001 fb32 	bl	800d3c4 <__mcmp>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	dd71      	ble.n	800be48 <_strtod_l+0x8d0>
 800bd64:	9905      	ldr	r1, [sp, #20]
 800bd66:	464b      	mov	r3, r9
 800bd68:	4a21      	ldr	r2, [pc, #132]	; (800bdf0 <_strtod_l+0x878>)
 800bd6a:	2900      	cmp	r1, #0
 800bd6c:	f000 808d 	beq.w	800be8a <_strtod_l+0x912>
 800bd70:	ea02 0109 	and.w	r1, r2, r9
 800bd74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bd78:	f300 8087 	bgt.w	800be8a <_strtod_l+0x912>
 800bd7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bd80:	f77f aea9 	ble.w	800bad6 <_strtod_l+0x55e>
 800bd84:	4640      	mov	r0, r8
 800bd86:	4649      	mov	r1, r9
 800bd88:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <_strtod_l+0x87c>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f7f4 fc1e 	bl	80005cc <__aeabi_dmul>
 800bd90:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <_strtod_l+0x878>)
 800bd92:	4680      	mov	r8, r0
 800bd94:	400b      	ands	r3, r1
 800bd96:	4689      	mov	r9, r1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f47f ae35 	bne.w	800ba08 <_strtod_l+0x490>
 800bd9e:	2322      	movs	r3, #34	; 0x22
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	e631      	b.n	800ba08 <_strtod_l+0x490>
 800bda4:	f04f 32ff 	mov.w	r2, #4294967295
 800bda8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdac:	ea03 0808 	and.w	r8, r3, r8
 800bdb0:	e6de      	b.n	800bb70 <_strtod_l+0x5f8>
 800bdb2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800bdb6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800bdba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800bdbe:	37e2      	adds	r7, #226	; 0xe2
 800bdc0:	fa01 f307 	lsl.w	r3, r1, r7
 800bdc4:	9310      	str	r3, [sp, #64]	; 0x40
 800bdc6:	9113      	str	r1, [sp, #76]	; 0x4c
 800bdc8:	e745      	b.n	800bc56 <_strtod_l+0x6de>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9310      	str	r3, [sp, #64]	; 0x40
 800bdce:	2301      	movs	r3, #1
 800bdd0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdd2:	e740      	b.n	800bc56 <_strtod_l+0x6de>
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bdda:	f001 fa87 	bl	800d2ec <__lshift>
 800bdde:	901a      	str	r0, [sp, #104]	; 0x68
 800bde0:	2800      	cmp	r0, #0
 800bde2:	f47f af68 	bne.w	800bcb6 <_strtod_l+0x73e>
 800bde6:	e605      	b.n	800b9f4 <_strtod_l+0x47c>
 800bde8:	0800fa08 	.word	0x0800fa08
 800bdec:	fffffc02 	.word	0xfffffc02
 800bdf0:	7ff00000 	.word	0x7ff00000
 800bdf4:	39500000 	.word	0x39500000
 800bdf8:	46ca      	mov	sl, r9
 800bdfa:	d165      	bne.n	800bec8 <_strtod_l+0x950>
 800bdfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be02:	b352      	cbz	r2, 800be5a <_strtod_l+0x8e2>
 800be04:	4a9e      	ldr	r2, [pc, #632]	; (800c080 <_strtod_l+0xb08>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d12a      	bne.n	800be60 <_strtod_l+0x8e8>
 800be0a:	9b05      	ldr	r3, [sp, #20]
 800be0c:	4641      	mov	r1, r8
 800be0e:	b1fb      	cbz	r3, 800be50 <_strtod_l+0x8d8>
 800be10:	4b9c      	ldr	r3, [pc, #624]	; (800c084 <_strtod_l+0xb0c>)
 800be12:	f04f 32ff 	mov.w	r2, #4294967295
 800be16:	ea09 0303 	and.w	r3, r9, r3
 800be1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be1e:	d81a      	bhi.n	800be56 <_strtod_l+0x8de>
 800be20:	0d1b      	lsrs	r3, r3, #20
 800be22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be26:	fa02 f303 	lsl.w	r3, r2, r3
 800be2a:	4299      	cmp	r1, r3
 800be2c:	d118      	bne.n	800be60 <_strtod_l+0x8e8>
 800be2e:	4b96      	ldr	r3, [pc, #600]	; (800c088 <_strtod_l+0xb10>)
 800be30:	459a      	cmp	sl, r3
 800be32:	d102      	bne.n	800be3a <_strtod_l+0x8c2>
 800be34:	3101      	adds	r1, #1
 800be36:	f43f addd 	beq.w	800b9f4 <_strtod_l+0x47c>
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	4b91      	ldr	r3, [pc, #580]	; (800c084 <_strtod_l+0xb0c>)
 800be40:	ea0a 0303 	and.w	r3, sl, r3
 800be44:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800be48:	9b05      	ldr	r3, [sp, #20]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d19a      	bne.n	800bd84 <_strtod_l+0x80c>
 800be4e:	e5db      	b.n	800ba08 <_strtod_l+0x490>
 800be50:	f04f 33ff 	mov.w	r3, #4294967295
 800be54:	e7e9      	b.n	800be2a <_strtod_l+0x8b2>
 800be56:	4613      	mov	r3, r2
 800be58:	e7e7      	b.n	800be2a <_strtod_l+0x8b2>
 800be5a:	ea53 0308 	orrs.w	r3, r3, r8
 800be5e:	d081      	beq.n	800bd64 <_strtod_l+0x7ec>
 800be60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be62:	b1e3      	cbz	r3, 800be9e <_strtod_l+0x926>
 800be64:	ea13 0f0a 	tst.w	r3, sl
 800be68:	d0ee      	beq.n	800be48 <_strtod_l+0x8d0>
 800be6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be6c:	4640      	mov	r0, r8
 800be6e:	4649      	mov	r1, r9
 800be70:	9a05      	ldr	r2, [sp, #20]
 800be72:	b1c3      	cbz	r3, 800bea6 <_strtod_l+0x92e>
 800be74:	f7ff fb5d 	bl	800b532 <sulp>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800be7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be80:	f7f4 f9ee 	bl	8000260 <__adddf3>
 800be84:	4680      	mov	r8, r0
 800be86:	4689      	mov	r9, r1
 800be88:	e7de      	b.n	800be48 <_strtod_l+0x8d0>
 800be8a:	4013      	ands	r3, r2
 800be8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800be94:	f04f 38ff 	mov.w	r8, #4294967295
 800be98:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800be9c:	e7d4      	b.n	800be48 <_strtod_l+0x8d0>
 800be9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bea0:	ea13 0f08 	tst.w	r3, r8
 800bea4:	e7e0      	b.n	800be68 <_strtod_l+0x8f0>
 800bea6:	f7ff fb44 	bl	800b532 <sulp>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	980c      	ldr	r0, [sp, #48]	; 0x30
 800beb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800beb2:	f7f4 f9d3 	bl	800025c <__aeabi_dsub>
 800beb6:	2200      	movs	r2, #0
 800beb8:	2300      	movs	r3, #0
 800beba:	4680      	mov	r8, r0
 800bebc:	4689      	mov	r9, r1
 800bebe:	f7f4 fded 	bl	8000a9c <__aeabi_dcmpeq>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d0c0      	beq.n	800be48 <_strtod_l+0x8d0>
 800bec6:	e606      	b.n	800bad6 <_strtod_l+0x55e>
 800bec8:	4659      	mov	r1, fp
 800beca:	4630      	mov	r0, r6
 800becc:	f001 fbe0 	bl	800d690 <__ratio>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bed8:	2200      	movs	r2, #0
 800beda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bede:	f7f4 fdf1 	bl	8000ac4 <__aeabi_dcmple>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d06f      	beq.n	800bfc6 <_strtod_l+0xa4e>
 800bee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d17c      	bne.n	800bfe6 <_strtod_l+0xa6e>
 800beec:	f1b8 0f00 	cmp.w	r8, #0
 800bef0:	d159      	bne.n	800bfa6 <_strtod_l+0xa2e>
 800bef2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d17b      	bne.n	800bff2 <_strtod_l+0xa7a>
 800befa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800befe:	2200      	movs	r2, #0
 800bf00:	4b62      	ldr	r3, [pc, #392]	; (800c08c <_strtod_l+0xb14>)
 800bf02:	f7f4 fdd5 	bl	8000ab0 <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d15a      	bne.n	800bfc0 <_strtod_l+0xa48>
 800bf0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4b5f      	ldr	r3, [pc, #380]	; (800c090 <_strtod_l+0xb18>)
 800bf12:	f7f4 fb5b 	bl	80005cc <__aeabi_dmul>
 800bf16:	4605      	mov	r5, r0
 800bf18:	460f      	mov	r7, r1
 800bf1a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bf1e:	9506      	str	r5, [sp, #24]
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800bf2a:	4b56      	ldr	r3, [pc, #344]	; (800c084 <_strtod_l+0xb0c>)
 800bf2c:	4a55      	ldr	r2, [pc, #340]	; (800c084 <_strtod_l+0xb0c>)
 800bf2e:	ea0a 0303 	and.w	r3, sl, r3
 800bf32:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf34:	4b57      	ldr	r3, [pc, #348]	; (800c094 <_strtod_l+0xb1c>)
 800bf36:	ea0a 0202 	and.w	r2, sl, r2
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	f040 80b0 	bne.w	800c0a0 <_strtod_l+0xb28>
 800bf40:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bf44:	4640      	mov	r0, r8
 800bf46:	4649      	mov	r1, r9
 800bf48:	f001 fae4 	bl	800d514 <__ulp>
 800bf4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf50:	f7f4 fb3c 	bl	80005cc <__aeabi_dmul>
 800bf54:	4642      	mov	r2, r8
 800bf56:	464b      	mov	r3, r9
 800bf58:	f7f4 f982 	bl	8000260 <__adddf3>
 800bf5c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800c084 <_strtod_l+0xb0c>
 800bf60:	4a4d      	ldr	r2, [pc, #308]	; (800c098 <_strtod_l+0xb20>)
 800bf62:	ea01 0a0a 	and.w	sl, r1, sl
 800bf66:	4592      	cmp	sl, r2
 800bf68:	4680      	mov	r8, r0
 800bf6a:	d948      	bls.n	800bffe <_strtod_l+0xa86>
 800bf6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf6e:	4b46      	ldr	r3, [pc, #280]	; (800c088 <_strtod_l+0xb10>)
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d103      	bne.n	800bf7c <_strtod_l+0xa04>
 800bf74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf76:	3301      	adds	r3, #1
 800bf78:	f43f ad3c 	beq.w	800b9f4 <_strtod_l+0x47c>
 800bf7c:	f04f 38ff 	mov.w	r8, #4294967295
 800bf80:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800c088 <_strtod_l+0xb10>
 800bf84:	4620      	mov	r0, r4
 800bf86:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bf88:	f000 ff98 	bl	800cebc <_Bfree>
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	9908      	ldr	r1, [sp, #32]
 800bf90:	f000 ff94 	bl	800cebc <_Bfree>
 800bf94:	4659      	mov	r1, fp
 800bf96:	4620      	mov	r0, r4
 800bf98:	f000 ff90 	bl	800cebc <_Bfree>
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 ff8c 	bl	800cebc <_Bfree>
 800bfa4:	e605      	b.n	800bbb2 <_strtod_l+0x63a>
 800bfa6:	f1b8 0f01 	cmp.w	r8, #1
 800bfaa:	d103      	bne.n	800bfb4 <_strtod_l+0xa3c>
 800bfac:	f1b9 0f00 	cmp.w	r9, #0
 800bfb0:	f43f ad91 	beq.w	800bad6 <_strtod_l+0x55e>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4b39      	ldr	r3, [pc, #228]	; (800c09c <_strtod_l+0xb24>)
 800bfb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bfba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfbe:	e016      	b.n	800bfee <_strtod_l+0xa76>
 800bfc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bfc2:	4f33      	ldr	r7, [pc, #204]	; (800c090 <_strtod_l+0xb18>)
 800bfc4:	e7a9      	b.n	800bf1a <_strtod_l+0x9a2>
 800bfc6:	4b32      	ldr	r3, [pc, #200]	; (800c090 <_strtod_l+0xb18>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfce:	f7f4 fafd 	bl	80005cc <__aeabi_dmul>
 800bfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d09e      	beq.n	800bf1a <_strtod_l+0x9a2>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfe4:	e79d      	b.n	800bf22 <_strtod_l+0x9aa>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	4b28      	ldr	r3, [pc, #160]	; (800c08c <_strtod_l+0xb14>)
 800bfea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfee:	4f27      	ldr	r7, [pc, #156]	; (800c08c <_strtod_l+0xb14>)
 800bff0:	e797      	b.n	800bf22 <_strtod_l+0x9aa>
 800bff2:	2200      	movs	r2, #0
 800bff4:	4b29      	ldr	r3, [pc, #164]	; (800c09c <_strtod_l+0xb24>)
 800bff6:	4645      	mov	r5, r8
 800bff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bffc:	e7f7      	b.n	800bfee <_strtod_l+0xa76>
 800bffe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800c002:	9b05      	ldr	r3, [sp, #20]
 800c004:	46ca      	mov	sl, r9
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1bc      	bne.n	800bf84 <_strtod_l+0xa0c>
 800c00a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c00e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c010:	0d1b      	lsrs	r3, r3, #20
 800c012:	051b      	lsls	r3, r3, #20
 800c014:	429a      	cmp	r2, r3
 800c016:	d1b5      	bne.n	800bf84 <_strtod_l+0xa0c>
 800c018:	4628      	mov	r0, r5
 800c01a:	4639      	mov	r1, r7
 800c01c:	f7f5 f902 	bl	8001224 <__aeabi_d2lz>
 800c020:	f7f4 faa6 	bl	8000570 <__aeabi_l2d>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4628      	mov	r0, r5
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 f916 	bl	800025c <__aeabi_dsub>
 800c030:	460b      	mov	r3, r1
 800c032:	4602      	mov	r2, r0
 800c034:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800c038:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c03e:	ea4a 0a08 	orr.w	sl, sl, r8
 800c042:	ea5a 0a03 	orrs.w	sl, sl, r3
 800c046:	d06c      	beq.n	800c122 <_strtod_l+0xbaa>
 800c048:	a309      	add	r3, pc, #36	; (adr r3, 800c070 <_strtod_l+0xaf8>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 fd2f 	bl	8000ab0 <__aeabi_dcmplt>
 800c052:	2800      	cmp	r0, #0
 800c054:	f47f acd8 	bne.w	800ba08 <_strtod_l+0x490>
 800c058:	a307      	add	r3, pc, #28	; (adr r3, 800c078 <_strtod_l+0xb00>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c062:	f7f4 fd43 	bl	8000aec <__aeabi_dcmpgt>
 800c066:	2800      	cmp	r0, #0
 800c068:	d08c      	beq.n	800bf84 <_strtod_l+0xa0c>
 800c06a:	e4cd      	b.n	800ba08 <_strtod_l+0x490>
 800c06c:	f3af 8000 	nop.w
 800c070:	94a03595 	.word	0x94a03595
 800c074:	3fdfffff 	.word	0x3fdfffff
 800c078:	35afe535 	.word	0x35afe535
 800c07c:	3fe00000 	.word	0x3fe00000
 800c080:	000fffff 	.word	0x000fffff
 800c084:	7ff00000 	.word	0x7ff00000
 800c088:	7fefffff 	.word	0x7fefffff
 800c08c:	3ff00000 	.word	0x3ff00000
 800c090:	3fe00000 	.word	0x3fe00000
 800c094:	7fe00000 	.word	0x7fe00000
 800c098:	7c9fffff 	.word	0x7c9fffff
 800c09c:	bff00000 	.word	0xbff00000
 800c0a0:	9b05      	ldr	r3, [sp, #20]
 800c0a2:	b333      	cbz	r3, 800c0f2 <_strtod_l+0xb7a>
 800c0a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0aa:	d822      	bhi.n	800c0f2 <_strtod_l+0xb7a>
 800c0ac:	a328      	add	r3, pc, #160	; (adr r3, 800c150 <_strtod_l+0xbd8>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	f7f4 fd05 	bl	8000ac4 <__aeabi_dcmple>
 800c0ba:	b1a0      	cbz	r0, 800c0e6 <_strtod_l+0xb6e>
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f7f4 fd46 	bl	8000b50 <__aeabi_d2uiz>
 800c0c4:	2801      	cmp	r0, #1
 800c0c6:	bf38      	it	cc
 800c0c8:	2001      	movcc	r0, #1
 800c0ca:	f7f4 fa05 	bl	80004d8 <__aeabi_ui2d>
 800c0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	460f      	mov	r7, r1
 800c0d4:	bb03      	cbnz	r3, 800c118 <_strtod_l+0xba0>
 800c0d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0da:	9014      	str	r0, [sp, #80]	; 0x50
 800c0dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c0de:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c0e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0ea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c0ee:	1a9b      	subs	r3, r3, r2
 800c0f0:	9311      	str	r3, [sp, #68]	; 0x44
 800c0f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c0f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c0f6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800c0fa:	f001 fa0b 	bl	800d514 <__ulp>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4640      	mov	r0, r8
 800c104:	4649      	mov	r1, r9
 800c106:	f7f4 fa61 	bl	80005cc <__aeabi_dmul>
 800c10a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c10e:	f7f4 f8a7 	bl	8000260 <__adddf3>
 800c112:	4680      	mov	r8, r0
 800c114:	4689      	mov	r9, r1
 800c116:	e774      	b.n	800c002 <_strtod_l+0xa8a>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c120:	e7dd      	b.n	800c0de <_strtod_l+0xb66>
 800c122:	a30d      	add	r3, pc, #52	; (adr r3, 800c158 <_strtod_l+0xbe0>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 fcc2 	bl	8000ab0 <__aeabi_dcmplt>
 800c12c:	e79b      	b.n	800c066 <_strtod_l+0xaee>
 800c12e:	2300      	movs	r3, #0
 800c130:	930e      	str	r3, [sp, #56]	; 0x38
 800c132:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	f7ff ba5b 	b.w	800b5f2 <_strtod_l+0x7a>
 800c13c:	2a65      	cmp	r2, #101	; 0x65
 800c13e:	f43f ab52 	beq.w	800b7e6 <_strtod_l+0x26e>
 800c142:	2a45      	cmp	r2, #69	; 0x45
 800c144:	f43f ab4f 	beq.w	800b7e6 <_strtod_l+0x26e>
 800c148:	2301      	movs	r3, #1
 800c14a:	f7ff bb87 	b.w	800b85c <_strtod_l+0x2e4>
 800c14e:	bf00      	nop
 800c150:	ffc00000 	.word	0xffc00000
 800c154:	41dfffff 	.word	0x41dfffff
 800c158:	94a03595 	.word	0x94a03595
 800c15c:	3fcfffff 	.word	0x3fcfffff

0800c160 <strtod>:
 800c160:	460a      	mov	r2, r1
 800c162:	4601      	mov	r1, r0
 800c164:	4802      	ldr	r0, [pc, #8]	; (800c170 <strtod+0x10>)
 800c166:	4b03      	ldr	r3, [pc, #12]	; (800c174 <strtod+0x14>)
 800c168:	6800      	ldr	r0, [r0, #0]
 800c16a:	f7ff ba05 	b.w	800b578 <_strtod_l>
 800c16e:	bf00      	nop
 800c170:	200001fc 	.word	0x200001fc
 800c174:	20000044 	.word	0x20000044

0800c178 <std>:
 800c178:	2300      	movs	r3, #0
 800c17a:	b510      	push	{r4, lr}
 800c17c:	4604      	mov	r4, r0
 800c17e:	e9c0 3300 	strd	r3, r3, [r0]
 800c182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c186:	6083      	str	r3, [r0, #8]
 800c188:	8181      	strh	r1, [r0, #12]
 800c18a:	6643      	str	r3, [r0, #100]	; 0x64
 800c18c:	81c2      	strh	r2, [r0, #14]
 800c18e:	6183      	str	r3, [r0, #24]
 800c190:	4619      	mov	r1, r3
 800c192:	2208      	movs	r2, #8
 800c194:	305c      	adds	r0, #92	; 0x5c
 800c196:	f000 f997 	bl	800c4c8 <memset>
 800c19a:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <std+0x38>)
 800c19c:	6224      	str	r4, [r4, #32]
 800c19e:	6263      	str	r3, [r4, #36]	; 0x24
 800c1a0:	4b04      	ldr	r3, [pc, #16]	; (800c1b4 <std+0x3c>)
 800c1a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1a4:	4b04      	ldr	r3, [pc, #16]	; (800c1b8 <std+0x40>)
 800c1a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1a8:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <std+0x44>)
 800c1aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c1ac:	bd10      	pop	{r4, pc}
 800c1ae:	bf00      	nop
 800c1b0:	0800c319 	.word	0x0800c319
 800c1b4:	0800c33b 	.word	0x0800c33b
 800c1b8:	0800c373 	.word	0x0800c373
 800c1bc:	0800c397 	.word	0x0800c397

0800c1c0 <stdio_exit_handler>:
 800c1c0:	4a02      	ldr	r2, [pc, #8]	; (800c1cc <stdio_exit_handler+0xc>)
 800c1c2:	4903      	ldr	r1, [pc, #12]	; (800c1d0 <stdio_exit_handler+0x10>)
 800c1c4:	4803      	ldr	r0, [pc, #12]	; (800c1d4 <stdio_exit_handler+0x14>)
 800c1c6:	f000 b869 	b.w	800c29c <_fwalk_sglue>
 800c1ca:	bf00      	nop
 800c1cc:	20000038 	.word	0x20000038
 800c1d0:	0800e101 	.word	0x0800e101
 800c1d4:	200001b0 	.word	0x200001b0

0800c1d8 <cleanup_stdio>:
 800c1d8:	6841      	ldr	r1, [r0, #4]
 800c1da:	4b0c      	ldr	r3, [pc, #48]	; (800c20c <cleanup_stdio+0x34>)
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	4299      	cmp	r1, r3
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	d001      	beq.n	800c1e8 <cleanup_stdio+0x10>
 800c1e4:	f001 ff8c 	bl	800e100 <_fflush_r>
 800c1e8:	68a1      	ldr	r1, [r4, #8]
 800c1ea:	4b09      	ldr	r3, [pc, #36]	; (800c210 <cleanup_stdio+0x38>)
 800c1ec:	4299      	cmp	r1, r3
 800c1ee:	d002      	beq.n	800c1f6 <cleanup_stdio+0x1e>
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f001 ff85 	bl	800e100 <_fflush_r>
 800c1f6:	68e1      	ldr	r1, [r4, #12]
 800c1f8:	4b06      	ldr	r3, [pc, #24]	; (800c214 <cleanup_stdio+0x3c>)
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	d004      	beq.n	800c208 <cleanup_stdio+0x30>
 800c1fe:	4620      	mov	r0, r4
 800c200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c204:	f001 bf7c 	b.w	800e100 <_fflush_r>
 800c208:	bd10      	pop	{r4, pc}
 800c20a:	bf00      	nop
 800c20c:	200034d0 	.word	0x200034d0
 800c210:	20003538 	.word	0x20003538
 800c214:	200035a0 	.word	0x200035a0

0800c218 <global_stdio_init.part.0>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	4b0b      	ldr	r3, [pc, #44]	; (800c248 <global_stdio_init.part.0+0x30>)
 800c21c:	4c0b      	ldr	r4, [pc, #44]	; (800c24c <global_stdio_init.part.0+0x34>)
 800c21e:	4a0c      	ldr	r2, [pc, #48]	; (800c250 <global_stdio_init.part.0+0x38>)
 800c220:	4620      	mov	r0, r4
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	2104      	movs	r1, #4
 800c226:	2200      	movs	r2, #0
 800c228:	f7ff ffa6 	bl	800c178 <std>
 800c22c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c230:	2201      	movs	r2, #1
 800c232:	2109      	movs	r1, #9
 800c234:	f7ff ffa0 	bl	800c178 <std>
 800c238:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c23c:	2202      	movs	r2, #2
 800c23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c242:	2112      	movs	r1, #18
 800c244:	f7ff bf98 	b.w	800c178 <std>
 800c248:	20003608 	.word	0x20003608
 800c24c:	200034d0 	.word	0x200034d0
 800c250:	0800c1c1 	.word	0x0800c1c1

0800c254 <__sfp_lock_acquire>:
 800c254:	4801      	ldr	r0, [pc, #4]	; (800c25c <__sfp_lock_acquire+0x8>)
 800c256:	f000 ba27 	b.w	800c6a8 <__retarget_lock_acquire_recursive>
 800c25a:	bf00      	nop
 800c25c:	20003611 	.word	0x20003611

0800c260 <__sfp_lock_release>:
 800c260:	4801      	ldr	r0, [pc, #4]	; (800c268 <__sfp_lock_release+0x8>)
 800c262:	f000 ba22 	b.w	800c6aa <__retarget_lock_release_recursive>
 800c266:	bf00      	nop
 800c268:	20003611 	.word	0x20003611

0800c26c <__sinit>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	4604      	mov	r4, r0
 800c270:	f7ff fff0 	bl	800c254 <__sfp_lock_acquire>
 800c274:	6a23      	ldr	r3, [r4, #32]
 800c276:	b11b      	cbz	r3, 800c280 <__sinit+0x14>
 800c278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c27c:	f7ff bff0 	b.w	800c260 <__sfp_lock_release>
 800c280:	4b04      	ldr	r3, [pc, #16]	; (800c294 <__sinit+0x28>)
 800c282:	6223      	str	r3, [r4, #32]
 800c284:	4b04      	ldr	r3, [pc, #16]	; (800c298 <__sinit+0x2c>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1f5      	bne.n	800c278 <__sinit+0xc>
 800c28c:	f7ff ffc4 	bl	800c218 <global_stdio_init.part.0>
 800c290:	e7f2      	b.n	800c278 <__sinit+0xc>
 800c292:	bf00      	nop
 800c294:	0800c1d9 	.word	0x0800c1d9
 800c298:	20003608 	.word	0x20003608

0800c29c <_fwalk_sglue>:
 800c29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	4688      	mov	r8, r1
 800c2a4:	4614      	mov	r4, r2
 800c2a6:	2600      	movs	r6, #0
 800c2a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ac:	f1b9 0901 	subs.w	r9, r9, #1
 800c2b0:	d505      	bpl.n	800c2be <_fwalk_sglue+0x22>
 800c2b2:	6824      	ldr	r4, [r4, #0]
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	d1f7      	bne.n	800c2a8 <_fwalk_sglue+0xc>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d907      	bls.n	800c2d4 <_fwalk_sglue+0x38>
 800c2c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	d003      	beq.n	800c2d4 <_fwalk_sglue+0x38>
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	47c0      	blx	r8
 800c2d2:	4306      	orrs	r6, r0
 800c2d4:	3568      	adds	r5, #104	; 0x68
 800c2d6:	e7e9      	b.n	800c2ac <_fwalk_sglue+0x10>

0800c2d8 <siprintf>:
 800c2d8:	b40e      	push	{r1, r2, r3}
 800c2da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2de:	b500      	push	{lr}
 800c2e0:	b09c      	sub	sp, #112	; 0x70
 800c2e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c2e4:	9002      	str	r0, [sp, #8]
 800c2e6:	9006      	str	r0, [sp, #24]
 800c2e8:	9107      	str	r1, [sp, #28]
 800c2ea:	9104      	str	r1, [sp, #16]
 800c2ec:	4808      	ldr	r0, [pc, #32]	; (800c310 <siprintf+0x38>)
 800c2ee:	4909      	ldr	r1, [pc, #36]	; (800c314 <siprintf+0x3c>)
 800c2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f4:	9105      	str	r1, [sp, #20]
 800c2f6:	6800      	ldr	r0, [r0, #0]
 800c2f8:	a902      	add	r1, sp, #8
 800c2fa:	9301      	str	r3, [sp, #4]
 800c2fc:	f001 faaa 	bl	800d854 <_svfiprintf_r>
 800c300:	2200      	movs	r2, #0
 800c302:	9b02      	ldr	r3, [sp, #8]
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	b01c      	add	sp, #112	; 0x70
 800c308:	f85d eb04 	ldr.w	lr, [sp], #4
 800c30c:	b003      	add	sp, #12
 800c30e:	4770      	bx	lr
 800c310:	200001fc 	.word	0x200001fc
 800c314:	ffff0208 	.word	0xffff0208

0800c318 <__sread>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	460c      	mov	r4, r1
 800c31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c320:	f000 f964 	bl	800c5ec <_read_r>
 800c324:	2800      	cmp	r0, #0
 800c326:	bfab      	itete	ge
 800c328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c32a:	89a3      	ldrhlt	r3, [r4, #12]
 800c32c:	181b      	addge	r3, r3, r0
 800c32e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c332:	bfac      	ite	ge
 800c334:	6563      	strge	r3, [r4, #84]	; 0x54
 800c336:	81a3      	strhlt	r3, [r4, #12]
 800c338:	bd10      	pop	{r4, pc}

0800c33a <__swrite>:
 800c33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c33e:	461f      	mov	r7, r3
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	4605      	mov	r5, r0
 800c344:	05db      	lsls	r3, r3, #23
 800c346:	460c      	mov	r4, r1
 800c348:	4616      	mov	r6, r2
 800c34a:	d505      	bpl.n	800c358 <__swrite+0x1e>
 800c34c:	2302      	movs	r3, #2
 800c34e:	2200      	movs	r2, #0
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	f000 f938 	bl	800c5c8 <_lseek_r>
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	4632      	mov	r2, r6
 800c35c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	4628      	mov	r0, r5
 800c364:	463b      	mov	r3, r7
 800c366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c36e:	f000 b95f 	b.w	800c630 <_write_r>

0800c372 <__sseek>:
 800c372:	b510      	push	{r4, lr}
 800c374:	460c      	mov	r4, r1
 800c376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37a:	f000 f925 	bl	800c5c8 <_lseek_r>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	bf15      	itete	ne
 800c384:	6560      	strne	r0, [r4, #84]	; 0x54
 800c386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c38a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c38e:	81a3      	strheq	r3, [r4, #12]
 800c390:	bf18      	it	ne
 800c392:	81a3      	strhne	r3, [r4, #12]
 800c394:	bd10      	pop	{r4, pc}

0800c396 <__sclose>:
 800c396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39a:	f000 b8af 	b.w	800c4fc <_close_r>

0800c39e <__swbuf_r>:
 800c39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a0:	460e      	mov	r6, r1
 800c3a2:	4614      	mov	r4, r2
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	b118      	cbz	r0, 800c3b0 <__swbuf_r+0x12>
 800c3a8:	6a03      	ldr	r3, [r0, #32]
 800c3aa:	b90b      	cbnz	r3, 800c3b0 <__swbuf_r+0x12>
 800c3ac:	f7ff ff5e 	bl	800c26c <__sinit>
 800c3b0:	69a3      	ldr	r3, [r4, #24]
 800c3b2:	60a3      	str	r3, [r4, #8]
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	071a      	lsls	r2, r3, #28
 800c3b8:	d525      	bpl.n	800c406 <__swbuf_r+0x68>
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	b31b      	cbz	r3, 800c406 <__swbuf_r+0x68>
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	6922      	ldr	r2, [r4, #16]
 800c3c2:	b2f6      	uxtb	r6, r6
 800c3c4:	1a98      	subs	r0, r3, r2
 800c3c6:	6963      	ldr	r3, [r4, #20]
 800c3c8:	4637      	mov	r7, r6
 800c3ca:	4283      	cmp	r3, r0
 800c3cc:	dc04      	bgt.n	800c3d8 <__swbuf_r+0x3a>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f001 fe95 	bl	800e100 <_fflush_r>
 800c3d6:	b9e0      	cbnz	r0, 800c412 <__swbuf_r+0x74>
 800c3d8:	68a3      	ldr	r3, [r4, #8]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	60a3      	str	r3, [r4, #8]
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	6022      	str	r2, [r4, #0]
 800c3e4:	701e      	strb	r6, [r3, #0]
 800c3e6:	6962      	ldr	r2, [r4, #20]
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d004      	beq.n	800c3f8 <__swbuf_r+0x5a>
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	07db      	lsls	r3, r3, #31
 800c3f2:	d506      	bpl.n	800c402 <__swbuf_r+0x64>
 800c3f4:	2e0a      	cmp	r6, #10
 800c3f6:	d104      	bne.n	800c402 <__swbuf_r+0x64>
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f001 fe80 	bl	800e100 <_fflush_r>
 800c400:	b938      	cbnz	r0, 800c412 <__swbuf_r+0x74>
 800c402:	4638      	mov	r0, r7
 800c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c406:	4621      	mov	r1, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	f000 f805 	bl	800c418 <__swsetup_r>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0d5      	beq.n	800c3be <__swbuf_r+0x20>
 800c412:	f04f 37ff 	mov.w	r7, #4294967295
 800c416:	e7f4      	b.n	800c402 <__swbuf_r+0x64>

0800c418 <__swsetup_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4b2a      	ldr	r3, [pc, #168]	; (800c4c4 <__swsetup_r+0xac>)
 800c41c:	4605      	mov	r5, r0
 800c41e:	6818      	ldr	r0, [r3, #0]
 800c420:	460c      	mov	r4, r1
 800c422:	b118      	cbz	r0, 800c42c <__swsetup_r+0x14>
 800c424:	6a03      	ldr	r3, [r0, #32]
 800c426:	b90b      	cbnz	r3, 800c42c <__swsetup_r+0x14>
 800c428:	f7ff ff20 	bl	800c26c <__sinit>
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c432:	0718      	lsls	r0, r3, #28
 800c434:	d422      	bmi.n	800c47c <__swsetup_r+0x64>
 800c436:	06d9      	lsls	r1, r3, #27
 800c438:	d407      	bmi.n	800c44a <__swsetup_r+0x32>
 800c43a:	2309      	movs	r3, #9
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c442:	f04f 30ff 	mov.w	r0, #4294967295
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	e034      	b.n	800c4b4 <__swsetup_r+0x9c>
 800c44a:	0758      	lsls	r0, r3, #29
 800c44c:	d512      	bpl.n	800c474 <__swsetup_r+0x5c>
 800c44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c450:	b141      	cbz	r1, 800c464 <__swsetup_r+0x4c>
 800c452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c456:	4299      	cmp	r1, r3
 800c458:	d002      	beq.n	800c460 <__swsetup_r+0x48>
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 f93a 	bl	800c6d4 <_free_r>
 800c460:	2300      	movs	r3, #0
 800c462:	6363      	str	r3, [r4, #52]	; 0x34
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c46a:	81a3      	strh	r3, [r4, #12]
 800c46c:	2300      	movs	r3, #0
 800c46e:	6063      	str	r3, [r4, #4]
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	f043 0308 	orr.w	r3, r3, #8
 800c47a:	81a3      	strh	r3, [r4, #12]
 800c47c:	6923      	ldr	r3, [r4, #16]
 800c47e:	b94b      	cbnz	r3, 800c494 <__swsetup_r+0x7c>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c48a:	d003      	beq.n	800c494 <__swsetup_r+0x7c>
 800c48c:	4621      	mov	r1, r4
 800c48e:	4628      	mov	r0, r5
 800c490:	f001 fe83 	bl	800e19a <__smakebuf_r>
 800c494:	89a0      	ldrh	r0, [r4, #12]
 800c496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c49a:	f010 0301 	ands.w	r3, r0, #1
 800c49e:	d00a      	beq.n	800c4b6 <__swsetup_r+0x9e>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60a3      	str	r3, [r4, #8]
 800c4a4:	6963      	ldr	r3, [r4, #20]
 800c4a6:	425b      	negs	r3, r3
 800c4a8:	61a3      	str	r3, [r4, #24]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	b943      	cbnz	r3, 800c4c0 <__swsetup_r+0xa8>
 800c4ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4b2:	d1c4      	bne.n	800c43e <__swsetup_r+0x26>
 800c4b4:	bd38      	pop	{r3, r4, r5, pc}
 800c4b6:	0781      	lsls	r1, r0, #30
 800c4b8:	bf58      	it	pl
 800c4ba:	6963      	ldrpl	r3, [r4, #20]
 800c4bc:	60a3      	str	r3, [r4, #8]
 800c4be:	e7f4      	b.n	800c4aa <__swsetup_r+0x92>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e7f7      	b.n	800c4b4 <__swsetup_r+0x9c>
 800c4c4:	200001fc 	.word	0x200001fc

0800c4c8 <memset>:
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	4402      	add	r2, r0
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d100      	bne.n	800c4d2 <memset+0xa>
 800c4d0:	4770      	bx	lr
 800c4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4d6:	e7f9      	b.n	800c4cc <memset+0x4>

0800c4d8 <strncmp>:
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	b16a      	cbz	r2, 800c4f8 <strncmp+0x20>
 800c4dc:	3901      	subs	r1, #1
 800c4de:	1884      	adds	r4, r0, r2
 800c4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d103      	bne.n	800c4f4 <strncmp+0x1c>
 800c4ec:	42a0      	cmp	r0, r4
 800c4ee:	d001      	beq.n	800c4f4 <strncmp+0x1c>
 800c4f0:	2a00      	cmp	r2, #0
 800c4f2:	d1f5      	bne.n	800c4e0 <strncmp+0x8>
 800c4f4:	1ad0      	subs	r0, r2, r3
 800c4f6:	bd10      	pop	{r4, pc}
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	e7fc      	b.n	800c4f6 <strncmp+0x1e>

0800c4fc <_close_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	2300      	movs	r3, #0
 800c500:	4d05      	ldr	r5, [pc, #20]	; (800c518 <_close_r+0x1c>)
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f7 ffde 	bl	80044c8 <_close>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_close_r+0x1a>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_close_r+0x1a>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	2000360c 	.word	0x2000360c

0800c51c <_reclaim_reent>:
 800c51c:	4b29      	ldr	r3, [pc, #164]	; (800c5c4 <_reclaim_reent+0xa8>)
 800c51e:	b570      	push	{r4, r5, r6, lr}
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4604      	mov	r4, r0
 800c524:	4283      	cmp	r3, r0
 800c526:	d04b      	beq.n	800c5c0 <_reclaim_reent+0xa4>
 800c528:	69c3      	ldr	r3, [r0, #28]
 800c52a:	b143      	cbz	r3, 800c53e <_reclaim_reent+0x22>
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d144      	bne.n	800c5bc <_reclaim_reent+0xa0>
 800c532:	69e3      	ldr	r3, [r4, #28]
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	b111      	cbz	r1, 800c53e <_reclaim_reent+0x22>
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 f8cb 	bl	800c6d4 <_free_r>
 800c53e:	6961      	ldr	r1, [r4, #20]
 800c540:	b111      	cbz	r1, 800c548 <_reclaim_reent+0x2c>
 800c542:	4620      	mov	r0, r4
 800c544:	f000 f8c6 	bl	800c6d4 <_free_r>
 800c548:	69e1      	ldr	r1, [r4, #28]
 800c54a:	b111      	cbz	r1, 800c552 <_reclaim_reent+0x36>
 800c54c:	4620      	mov	r0, r4
 800c54e:	f000 f8c1 	bl	800c6d4 <_free_r>
 800c552:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c554:	b111      	cbz	r1, 800c55c <_reclaim_reent+0x40>
 800c556:	4620      	mov	r0, r4
 800c558:	f000 f8bc 	bl	800c6d4 <_free_r>
 800c55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c55e:	b111      	cbz	r1, 800c566 <_reclaim_reent+0x4a>
 800c560:	4620      	mov	r0, r4
 800c562:	f000 f8b7 	bl	800c6d4 <_free_r>
 800c566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c568:	b111      	cbz	r1, 800c570 <_reclaim_reent+0x54>
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 f8b2 	bl	800c6d4 <_free_r>
 800c570:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c572:	b111      	cbz	r1, 800c57a <_reclaim_reent+0x5e>
 800c574:	4620      	mov	r0, r4
 800c576:	f000 f8ad 	bl	800c6d4 <_free_r>
 800c57a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c57c:	b111      	cbz	r1, 800c584 <_reclaim_reent+0x68>
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 f8a8 	bl	800c6d4 <_free_r>
 800c584:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c586:	b111      	cbz	r1, 800c58e <_reclaim_reent+0x72>
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 f8a3 	bl	800c6d4 <_free_r>
 800c58e:	6a23      	ldr	r3, [r4, #32]
 800c590:	b1b3      	cbz	r3, 800c5c0 <_reclaim_reent+0xa4>
 800c592:	4620      	mov	r0, r4
 800c594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c598:	4718      	bx	r3
 800c59a:	5949      	ldr	r1, [r1, r5]
 800c59c:	b941      	cbnz	r1, 800c5b0 <_reclaim_reent+0x94>
 800c59e:	3504      	adds	r5, #4
 800c5a0:	69e3      	ldr	r3, [r4, #28]
 800c5a2:	2d80      	cmp	r5, #128	; 0x80
 800c5a4:	68d9      	ldr	r1, [r3, #12]
 800c5a6:	d1f8      	bne.n	800c59a <_reclaim_reent+0x7e>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 f893 	bl	800c6d4 <_free_r>
 800c5ae:	e7c0      	b.n	800c532 <_reclaim_reent+0x16>
 800c5b0:	680e      	ldr	r6, [r1, #0]
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 f88e 	bl	800c6d4 <_free_r>
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	e7ef      	b.n	800c59c <_reclaim_reent+0x80>
 800c5bc:	2500      	movs	r5, #0
 800c5be:	e7ef      	b.n	800c5a0 <_reclaim_reent+0x84>
 800c5c0:	bd70      	pop	{r4, r5, r6, pc}
 800c5c2:	bf00      	nop
 800c5c4:	200001fc 	.word	0x200001fc

0800c5c8 <_lseek_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4608      	mov	r0, r1
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	4d05      	ldr	r5, [pc, #20]	; (800c5e8 <_lseek_r+0x20>)
 800c5d4:	602a      	str	r2, [r5, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f7f7 ff9a 	bl	8004510 <_lseek>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_lseek_r+0x1e>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_lseek_r+0x1e>
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	2000360c 	.word	0x2000360c

0800c5ec <_read_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	4d05      	ldr	r5, [pc, #20]	; (800c60c <_read_r+0x20>)
 800c5f8:	602a      	str	r2, [r5, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f7f7 ff47 	bl	800448e <_read>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_read_r+0x1e>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_read_r+0x1e>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	2000360c 	.word	0x2000360c

0800c610 <_sbrk_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	2300      	movs	r3, #0
 800c614:	4d05      	ldr	r5, [pc, #20]	; (800c62c <_sbrk_r+0x1c>)
 800c616:	4604      	mov	r4, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	f7f7 ff84 	bl	8004528 <_sbrk>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_sbrk_r+0x1a>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_sbrk_r+0x1a>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	2000360c 	.word	0x2000360c

0800c630 <_write_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	4611      	mov	r1, r2
 800c638:	2200      	movs	r2, #0
 800c63a:	4d05      	ldr	r5, [pc, #20]	; (800c650 <_write_r+0x20>)
 800c63c:	602a      	str	r2, [r5, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f7f6 fc6e 	bl	8002f20 <_write>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_write_r+0x1e>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_write_r+0x1e>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	2000360c 	.word	0x2000360c

0800c654 <__errno>:
 800c654:	4b01      	ldr	r3, [pc, #4]	; (800c65c <__errno+0x8>)
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	200001fc 	.word	0x200001fc

0800c660 <__libc_init_array>:
 800c660:	b570      	push	{r4, r5, r6, lr}
 800c662:	2600      	movs	r6, #0
 800c664:	4d0c      	ldr	r5, [pc, #48]	; (800c698 <__libc_init_array+0x38>)
 800c666:	4c0d      	ldr	r4, [pc, #52]	; (800c69c <__libc_init_array+0x3c>)
 800c668:	1b64      	subs	r4, r4, r5
 800c66a:	10a4      	asrs	r4, r4, #2
 800c66c:	42a6      	cmp	r6, r4
 800c66e:	d109      	bne.n	800c684 <__libc_init_array+0x24>
 800c670:	f003 f8c2 	bl	800f7f8 <_init>
 800c674:	2600      	movs	r6, #0
 800c676:	4d0a      	ldr	r5, [pc, #40]	; (800c6a0 <__libc_init_array+0x40>)
 800c678:	4c0a      	ldr	r4, [pc, #40]	; (800c6a4 <__libc_init_array+0x44>)
 800c67a:	1b64      	subs	r4, r4, r5
 800c67c:	10a4      	asrs	r4, r4, #2
 800c67e:	42a6      	cmp	r6, r4
 800c680:	d105      	bne.n	800c68e <__libc_init_array+0x2e>
 800c682:	bd70      	pop	{r4, r5, r6, pc}
 800c684:	f855 3b04 	ldr.w	r3, [r5], #4
 800c688:	4798      	blx	r3
 800c68a:	3601      	adds	r6, #1
 800c68c:	e7ee      	b.n	800c66c <__libc_init_array+0xc>
 800c68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c692:	4798      	blx	r3
 800c694:	3601      	adds	r6, #1
 800c696:	e7f2      	b.n	800c67e <__libc_init_array+0x1e>
 800c698:	0800ff68 	.word	0x0800ff68
 800c69c:	0800ff68 	.word	0x0800ff68
 800c6a0:	0800ff68 	.word	0x0800ff68
 800c6a4:	0800ff6c 	.word	0x0800ff6c

0800c6a8 <__retarget_lock_acquire_recursive>:
 800c6a8:	4770      	bx	lr

0800c6aa <__retarget_lock_release_recursive>:
 800c6aa:	4770      	bx	lr

0800c6ac <memcpy>:
 800c6ac:	440a      	add	r2, r1
 800c6ae:	4291      	cmp	r1, r2
 800c6b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6b4:	d100      	bne.n	800c6b8 <memcpy+0xc>
 800c6b6:	4770      	bx	lr
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6be:	4291      	cmp	r1, r2
 800c6c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6c4:	d1f9      	bne.n	800c6ba <memcpy+0xe>
 800c6c6:	bd10      	pop	{r4, pc}

0800c6c8 <nan>:
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	4901      	ldr	r1, [pc, #4]	; (800c6d0 <nan+0x8>)
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	7ff80000 	.word	0x7ff80000

0800c6d4 <_free_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	d040      	beq.n	800c75e <_free_r+0x8a>
 800c6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e0:	1f0c      	subs	r4, r1, #4
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bfb8      	it	lt
 800c6e6:	18e4      	addlt	r4, r4, r3
 800c6e8:	f7fe fee0 	bl	800b4ac <__malloc_lock>
 800c6ec:	4a1c      	ldr	r2, [pc, #112]	; (800c760 <_free_r+0x8c>)
 800c6ee:	6813      	ldr	r3, [r2, #0]
 800c6f0:	b933      	cbnz	r3, 800c700 <_free_r+0x2c>
 800c6f2:	6063      	str	r3, [r4, #4]
 800c6f4:	6014      	str	r4, [r2, #0]
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6fc:	f7fe bedc 	b.w	800b4b8 <__malloc_unlock>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d908      	bls.n	800c716 <_free_r+0x42>
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	1821      	adds	r1, r4, r0
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf01      	itttt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	1809      	addeq	r1, r1, r0
 800c712:	6021      	streq	r1, [r4, #0]
 800c714:	e7ed      	b.n	800c6f2 <_free_r+0x1e>
 800c716:	461a      	mov	r2, r3
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	b10b      	cbz	r3, 800c720 <_free_r+0x4c>
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	d9fa      	bls.n	800c716 <_free_r+0x42>
 800c720:	6811      	ldr	r1, [r2, #0]
 800c722:	1850      	adds	r0, r2, r1
 800c724:	42a0      	cmp	r0, r4
 800c726:	d10b      	bne.n	800c740 <_free_r+0x6c>
 800c728:	6820      	ldr	r0, [r4, #0]
 800c72a:	4401      	add	r1, r0
 800c72c:	1850      	adds	r0, r2, r1
 800c72e:	4283      	cmp	r3, r0
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	d1e0      	bne.n	800c6f6 <_free_r+0x22>
 800c734:	6818      	ldr	r0, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	4408      	add	r0, r1
 800c73a:	6010      	str	r0, [r2, #0]
 800c73c:	6053      	str	r3, [r2, #4]
 800c73e:	e7da      	b.n	800c6f6 <_free_r+0x22>
 800c740:	d902      	bls.n	800c748 <_free_r+0x74>
 800c742:	230c      	movs	r3, #12
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	e7d6      	b.n	800c6f6 <_free_r+0x22>
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	1821      	adds	r1, r4, r0
 800c74c:	428b      	cmp	r3, r1
 800c74e:	bf01      	itttt	eq
 800c750:	6819      	ldreq	r1, [r3, #0]
 800c752:	685b      	ldreq	r3, [r3, #4]
 800c754:	1809      	addeq	r1, r1, r0
 800c756:	6021      	streq	r1, [r4, #0]
 800c758:	6063      	str	r3, [r4, #4]
 800c75a:	6054      	str	r4, [r2, #4]
 800c75c:	e7cb      	b.n	800c6f6 <_free_r+0x22>
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	200034c8 	.word	0x200034c8

0800c764 <rshift>:
 800c764:	6903      	ldr	r3, [r0, #16]
 800c766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c76a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c76e:	f100 0414 	add.w	r4, r0, #20
 800c772:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c776:	dd46      	ble.n	800c806 <rshift+0xa2>
 800c778:	f011 011f 	ands.w	r1, r1, #31
 800c77c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c780:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c784:	d10c      	bne.n	800c7a0 <rshift+0x3c>
 800c786:	4629      	mov	r1, r5
 800c788:	f100 0710 	add.w	r7, r0, #16
 800c78c:	42b1      	cmp	r1, r6
 800c78e:	d335      	bcc.n	800c7fc <rshift+0x98>
 800c790:	1a9b      	subs	r3, r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	1eea      	subs	r2, r5, #3
 800c796:	4296      	cmp	r6, r2
 800c798:	bf38      	it	cc
 800c79a:	2300      	movcc	r3, #0
 800c79c:	4423      	add	r3, r4
 800c79e:	e015      	b.n	800c7cc <rshift+0x68>
 800c7a0:	46a1      	mov	r9, r4
 800c7a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7a6:	f1c1 0820 	rsb	r8, r1, #32
 800c7aa:	40cf      	lsrs	r7, r1
 800c7ac:	f105 0e04 	add.w	lr, r5, #4
 800c7b0:	4576      	cmp	r6, lr
 800c7b2:	46f4      	mov	ip, lr
 800c7b4:	d816      	bhi.n	800c7e4 <rshift+0x80>
 800c7b6:	1a9a      	subs	r2, r3, r2
 800c7b8:	0092      	lsls	r2, r2, #2
 800c7ba:	3a04      	subs	r2, #4
 800c7bc:	3501      	adds	r5, #1
 800c7be:	42ae      	cmp	r6, r5
 800c7c0:	bf38      	it	cc
 800c7c2:	2200      	movcc	r2, #0
 800c7c4:	18a3      	adds	r3, r4, r2
 800c7c6:	50a7      	str	r7, [r4, r2]
 800c7c8:	b107      	cbz	r7, 800c7cc <rshift+0x68>
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	42a3      	cmp	r3, r4
 800c7ce:	eba3 0204 	sub.w	r2, r3, r4
 800c7d2:	bf08      	it	eq
 800c7d4:	2300      	moveq	r3, #0
 800c7d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7da:	6102      	str	r2, [r0, #16]
 800c7dc:	bf08      	it	eq
 800c7de:	6143      	streq	r3, [r0, #20]
 800c7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e4:	f8dc c000 	ldr.w	ip, [ip]
 800c7e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7ec:	ea4c 0707 	orr.w	r7, ip, r7
 800c7f0:	f849 7b04 	str.w	r7, [r9], #4
 800c7f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7f8:	40cf      	lsrs	r7, r1
 800c7fa:	e7d9      	b.n	800c7b0 <rshift+0x4c>
 800c7fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c800:	f847 cf04 	str.w	ip, [r7, #4]!
 800c804:	e7c2      	b.n	800c78c <rshift+0x28>
 800c806:	4623      	mov	r3, r4
 800c808:	e7e0      	b.n	800c7cc <rshift+0x68>

0800c80a <__hexdig_fun>:
 800c80a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c80e:	2b09      	cmp	r3, #9
 800c810:	d802      	bhi.n	800c818 <__hexdig_fun+0xe>
 800c812:	3820      	subs	r0, #32
 800c814:	b2c0      	uxtb	r0, r0
 800c816:	4770      	bx	lr
 800c818:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c81c:	2b05      	cmp	r3, #5
 800c81e:	d801      	bhi.n	800c824 <__hexdig_fun+0x1a>
 800c820:	3847      	subs	r0, #71	; 0x47
 800c822:	e7f7      	b.n	800c814 <__hexdig_fun+0xa>
 800c824:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c828:	2b05      	cmp	r3, #5
 800c82a:	d801      	bhi.n	800c830 <__hexdig_fun+0x26>
 800c82c:	3827      	subs	r0, #39	; 0x27
 800c82e:	e7f1      	b.n	800c814 <__hexdig_fun+0xa>
 800c830:	2000      	movs	r0, #0
 800c832:	4770      	bx	lr

0800c834 <__gethex>:
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	4681      	mov	r9, r0
 800c83a:	468a      	mov	sl, r1
 800c83c:	4617      	mov	r7, r2
 800c83e:	680a      	ldr	r2, [r1, #0]
 800c840:	b085      	sub	sp, #20
 800c842:	f102 0b02 	add.w	fp, r2, #2
 800c846:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c84a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c84e:	9302      	str	r3, [sp, #8]
 800c850:	32fe      	adds	r2, #254	; 0xfe
 800c852:	eb02 030b 	add.w	r3, r2, fp
 800c856:	46d8      	mov	r8, fp
 800c858:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	2830      	cmp	r0, #48	; 0x30
 800c860:	d0f7      	beq.n	800c852 <__gethex+0x1e>
 800c862:	f7ff ffd2 	bl	800c80a <__hexdig_fun>
 800c866:	4604      	mov	r4, r0
 800c868:	2800      	cmp	r0, #0
 800c86a:	d138      	bne.n	800c8de <__gethex+0xaa>
 800c86c:	2201      	movs	r2, #1
 800c86e:	4640      	mov	r0, r8
 800c870:	49a7      	ldr	r1, [pc, #668]	; (800cb10 <__gethex+0x2dc>)
 800c872:	f7ff fe31 	bl	800c4d8 <strncmp>
 800c876:	4606      	mov	r6, r0
 800c878:	2800      	cmp	r0, #0
 800c87a:	d169      	bne.n	800c950 <__gethex+0x11c>
 800c87c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c880:	465d      	mov	r5, fp
 800c882:	f7ff ffc2 	bl	800c80a <__hexdig_fun>
 800c886:	2800      	cmp	r0, #0
 800c888:	d064      	beq.n	800c954 <__gethex+0x120>
 800c88a:	465a      	mov	r2, fp
 800c88c:	7810      	ldrb	r0, [r2, #0]
 800c88e:	4690      	mov	r8, r2
 800c890:	2830      	cmp	r0, #48	; 0x30
 800c892:	f102 0201 	add.w	r2, r2, #1
 800c896:	d0f9      	beq.n	800c88c <__gethex+0x58>
 800c898:	f7ff ffb7 	bl	800c80a <__hexdig_fun>
 800c89c:	2301      	movs	r3, #1
 800c89e:	fab0 f480 	clz	r4, r0
 800c8a2:	465e      	mov	r6, fp
 800c8a4:	0964      	lsrs	r4, r4, #5
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	4642      	mov	r2, r8
 800c8aa:	4615      	mov	r5, r2
 800c8ac:	7828      	ldrb	r0, [r5, #0]
 800c8ae:	3201      	adds	r2, #1
 800c8b0:	f7ff ffab 	bl	800c80a <__hexdig_fun>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1f8      	bne.n	800c8aa <__gethex+0x76>
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	4994      	ldr	r1, [pc, #592]	; (800cb10 <__gethex+0x2dc>)
 800c8be:	f7ff fe0b 	bl	800c4d8 <strncmp>
 800c8c2:	b978      	cbnz	r0, 800c8e4 <__gethex+0xb0>
 800c8c4:	b946      	cbnz	r6, 800c8d8 <__gethex+0xa4>
 800c8c6:	1c6e      	adds	r6, r5, #1
 800c8c8:	4632      	mov	r2, r6
 800c8ca:	4615      	mov	r5, r2
 800c8cc:	7828      	ldrb	r0, [r5, #0]
 800c8ce:	3201      	adds	r2, #1
 800c8d0:	f7ff ff9b 	bl	800c80a <__hexdig_fun>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d1f8      	bne.n	800c8ca <__gethex+0x96>
 800c8d8:	1b73      	subs	r3, r6, r5
 800c8da:	009e      	lsls	r6, r3, #2
 800c8dc:	e004      	b.n	800c8e8 <__gethex+0xb4>
 800c8de:	2400      	movs	r4, #0
 800c8e0:	4626      	mov	r6, r4
 800c8e2:	e7e1      	b.n	800c8a8 <__gethex+0x74>
 800c8e4:	2e00      	cmp	r6, #0
 800c8e6:	d1f7      	bne.n	800c8d8 <__gethex+0xa4>
 800c8e8:	782b      	ldrb	r3, [r5, #0]
 800c8ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c8ee:	2b50      	cmp	r3, #80	; 0x50
 800c8f0:	d13d      	bne.n	800c96e <__gethex+0x13a>
 800c8f2:	786b      	ldrb	r3, [r5, #1]
 800c8f4:	2b2b      	cmp	r3, #43	; 0x2b
 800c8f6:	d02f      	beq.n	800c958 <__gethex+0x124>
 800c8f8:	2b2d      	cmp	r3, #45	; 0x2d
 800c8fa:	d031      	beq.n	800c960 <__gethex+0x12c>
 800c8fc:	f04f 0b00 	mov.w	fp, #0
 800c900:	1c69      	adds	r1, r5, #1
 800c902:	7808      	ldrb	r0, [r1, #0]
 800c904:	f7ff ff81 	bl	800c80a <__hexdig_fun>
 800c908:	1e42      	subs	r2, r0, #1
 800c90a:	b2d2      	uxtb	r2, r2
 800c90c:	2a18      	cmp	r2, #24
 800c90e:	d82e      	bhi.n	800c96e <__gethex+0x13a>
 800c910:	f1a0 0210 	sub.w	r2, r0, #16
 800c914:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c918:	f7ff ff77 	bl	800c80a <__hexdig_fun>
 800c91c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c920:	fa5f fc8c 	uxtb.w	ip, ip
 800c924:	f1bc 0f18 	cmp.w	ip, #24
 800c928:	d91d      	bls.n	800c966 <__gethex+0x132>
 800c92a:	f1bb 0f00 	cmp.w	fp, #0
 800c92e:	d000      	beq.n	800c932 <__gethex+0xfe>
 800c930:	4252      	negs	r2, r2
 800c932:	4416      	add	r6, r2
 800c934:	f8ca 1000 	str.w	r1, [sl]
 800c938:	b1dc      	cbz	r4, 800c972 <__gethex+0x13e>
 800c93a:	9b01      	ldr	r3, [sp, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bf14      	ite	ne
 800c940:	f04f 0800 	movne.w	r8, #0
 800c944:	f04f 0806 	moveq.w	r8, #6
 800c948:	4640      	mov	r0, r8
 800c94a:	b005      	add	sp, #20
 800c94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c950:	4645      	mov	r5, r8
 800c952:	4626      	mov	r6, r4
 800c954:	2401      	movs	r4, #1
 800c956:	e7c7      	b.n	800c8e8 <__gethex+0xb4>
 800c958:	f04f 0b00 	mov.w	fp, #0
 800c95c:	1ca9      	adds	r1, r5, #2
 800c95e:	e7d0      	b.n	800c902 <__gethex+0xce>
 800c960:	f04f 0b01 	mov.w	fp, #1
 800c964:	e7fa      	b.n	800c95c <__gethex+0x128>
 800c966:	230a      	movs	r3, #10
 800c968:	fb03 0002 	mla	r0, r3, r2, r0
 800c96c:	e7d0      	b.n	800c910 <__gethex+0xdc>
 800c96e:	4629      	mov	r1, r5
 800c970:	e7e0      	b.n	800c934 <__gethex+0x100>
 800c972:	4621      	mov	r1, r4
 800c974:	eba5 0308 	sub.w	r3, r5, r8
 800c978:	3b01      	subs	r3, #1
 800c97a:	2b07      	cmp	r3, #7
 800c97c:	dc0a      	bgt.n	800c994 <__gethex+0x160>
 800c97e:	4648      	mov	r0, r9
 800c980:	f000 fa5c 	bl	800ce3c <_Balloc>
 800c984:	4604      	mov	r4, r0
 800c986:	b940      	cbnz	r0, 800c99a <__gethex+0x166>
 800c988:	4602      	mov	r2, r0
 800c98a:	21e4      	movs	r1, #228	; 0xe4
 800c98c:	4b61      	ldr	r3, [pc, #388]	; (800cb14 <__gethex+0x2e0>)
 800c98e:	4862      	ldr	r0, [pc, #392]	; (800cb18 <__gethex+0x2e4>)
 800c990:	f001 fc8a 	bl	800e2a8 <__assert_func>
 800c994:	3101      	adds	r1, #1
 800c996:	105b      	asrs	r3, r3, #1
 800c998:	e7ef      	b.n	800c97a <__gethex+0x146>
 800c99a:	2300      	movs	r3, #0
 800c99c:	469b      	mov	fp, r3
 800c99e:	f100 0a14 	add.w	sl, r0, #20
 800c9a2:	f8cd a004 	str.w	sl, [sp, #4]
 800c9a6:	45a8      	cmp	r8, r5
 800c9a8:	d344      	bcc.n	800ca34 <__gethex+0x200>
 800c9aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c9ae:	4658      	mov	r0, fp
 800c9b0:	f848 bb04 	str.w	fp, [r8], #4
 800c9b4:	eba8 080a 	sub.w	r8, r8, sl
 800c9b8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c9bc:	6122      	str	r2, [r4, #16]
 800c9be:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c9c2:	f000 fb2d 	bl	800d020 <__hi0bits>
 800c9c6:	683d      	ldr	r5, [r7, #0]
 800c9c8:	eba8 0800 	sub.w	r8, r8, r0
 800c9cc:	45a8      	cmp	r8, r5
 800c9ce:	dd59      	ble.n	800ca84 <__gethex+0x250>
 800c9d0:	eba8 0805 	sub.w	r8, r8, r5
 800c9d4:	4641      	mov	r1, r8
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 feab 	bl	800d732 <__any_on>
 800c9dc:	4683      	mov	fp, r0
 800c9de:	b1b8      	cbz	r0, 800ca10 <__gethex+0x1dc>
 800c9e0:	f04f 0b01 	mov.w	fp, #1
 800c9e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800c9e8:	1159      	asrs	r1, r3, #5
 800c9ea:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c9ee:	f003 021f 	and.w	r2, r3, #31
 800c9f2:	fa0b f202 	lsl.w	r2, fp, r2
 800c9f6:	420a      	tst	r2, r1
 800c9f8:	d00a      	beq.n	800ca10 <__gethex+0x1dc>
 800c9fa:	455b      	cmp	r3, fp
 800c9fc:	dd06      	ble.n	800ca0c <__gethex+0x1d8>
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f1a8 0102 	sub.w	r1, r8, #2
 800ca04:	f000 fe95 	bl	800d732 <__any_on>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d138      	bne.n	800ca7e <__gethex+0x24a>
 800ca0c:	f04f 0b02 	mov.w	fp, #2
 800ca10:	4641      	mov	r1, r8
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7ff fea6 	bl	800c764 <rshift>
 800ca18:	4446      	add	r6, r8
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	42b3      	cmp	r3, r6
 800ca1e:	da41      	bge.n	800caa4 <__gethex+0x270>
 800ca20:	4621      	mov	r1, r4
 800ca22:	4648      	mov	r0, r9
 800ca24:	f000 fa4a 	bl	800cebc <_Bfree>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca2c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ca30:	6013      	str	r3, [r2, #0]
 800ca32:	e789      	b.n	800c948 <__gethex+0x114>
 800ca34:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ca38:	2a2e      	cmp	r2, #46	; 0x2e
 800ca3a:	d014      	beq.n	800ca66 <__gethex+0x232>
 800ca3c:	2b20      	cmp	r3, #32
 800ca3e:	d106      	bne.n	800ca4e <__gethex+0x21a>
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	f843 bb04 	str.w	fp, [r3], #4
 800ca46:	f04f 0b00 	mov.w	fp, #0
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	465b      	mov	r3, fp
 800ca4e:	7828      	ldrb	r0, [r5, #0]
 800ca50:	9303      	str	r3, [sp, #12]
 800ca52:	f7ff feda 	bl	800c80a <__hexdig_fun>
 800ca56:	9b03      	ldr	r3, [sp, #12]
 800ca58:	f000 000f 	and.w	r0, r0, #15
 800ca5c:	4098      	lsls	r0, r3
 800ca5e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca62:	3304      	adds	r3, #4
 800ca64:	e79f      	b.n	800c9a6 <__gethex+0x172>
 800ca66:	45a8      	cmp	r8, r5
 800ca68:	d8e8      	bhi.n	800ca3c <__gethex+0x208>
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	4928      	ldr	r1, [pc, #160]	; (800cb10 <__gethex+0x2dc>)
 800ca70:	9303      	str	r3, [sp, #12]
 800ca72:	f7ff fd31 	bl	800c4d8 <strncmp>
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d1df      	bne.n	800ca3c <__gethex+0x208>
 800ca7c:	e793      	b.n	800c9a6 <__gethex+0x172>
 800ca7e:	f04f 0b03 	mov.w	fp, #3
 800ca82:	e7c5      	b.n	800ca10 <__gethex+0x1dc>
 800ca84:	da0b      	bge.n	800ca9e <__gethex+0x26a>
 800ca86:	eba5 0808 	sub.w	r8, r5, r8
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	4648      	mov	r0, r9
 800ca90:	f000 fc2c 	bl	800d2ec <__lshift>
 800ca94:	4604      	mov	r4, r0
 800ca96:	eba6 0608 	sub.w	r6, r6, r8
 800ca9a:	f100 0a14 	add.w	sl, r0, #20
 800ca9e:	f04f 0b00 	mov.w	fp, #0
 800caa2:	e7ba      	b.n	800ca1a <__gethex+0x1e6>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	42b3      	cmp	r3, r6
 800caa8:	dd74      	ble.n	800cb94 <__gethex+0x360>
 800caaa:	1b9e      	subs	r6, r3, r6
 800caac:	42b5      	cmp	r5, r6
 800caae:	dc35      	bgt.n	800cb1c <__gethex+0x2e8>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d023      	beq.n	800cafe <__gethex+0x2ca>
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d025      	beq.n	800cb06 <__gethex+0x2d2>
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d115      	bne.n	800caea <__gethex+0x2b6>
 800cabe:	42b5      	cmp	r5, r6
 800cac0:	d113      	bne.n	800caea <__gethex+0x2b6>
 800cac2:	2d01      	cmp	r5, #1
 800cac4:	d10b      	bne.n	800cade <__gethex+0x2aa>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	9a02      	ldr	r2, [sp, #8]
 800caca:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cace:	6013      	str	r3, [r2, #0]
 800cad0:	2301      	movs	r3, #1
 800cad2:	6123      	str	r3, [r4, #16]
 800cad4:	f8ca 3000 	str.w	r3, [sl]
 800cad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cada:	601c      	str	r4, [r3, #0]
 800cadc:	e734      	b.n	800c948 <__gethex+0x114>
 800cade:	4620      	mov	r0, r4
 800cae0:	1e69      	subs	r1, r5, #1
 800cae2:	f000 fe26 	bl	800d732 <__any_on>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d1ed      	bne.n	800cac6 <__gethex+0x292>
 800caea:	4621      	mov	r1, r4
 800caec:	4648      	mov	r0, r9
 800caee:	f000 f9e5 	bl	800cebc <_Bfree>
 800caf2:	2300      	movs	r3, #0
 800caf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caf6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	e724      	b.n	800c948 <__gethex+0x114>
 800cafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1f2      	bne.n	800caea <__gethex+0x2b6>
 800cb04:	e7df      	b.n	800cac6 <__gethex+0x292>
 800cb06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1dc      	bne.n	800cac6 <__gethex+0x292>
 800cb0c:	e7ed      	b.n	800caea <__gethex+0x2b6>
 800cb0e:	bf00      	nop
 800cb10:	0800f9ce 	.word	0x0800f9ce
 800cb14:	0800fb39 	.word	0x0800fb39
 800cb18:	0800fb4a 	.word	0x0800fb4a
 800cb1c:	f106 38ff 	add.w	r8, r6, #4294967295
 800cb20:	f1bb 0f00 	cmp.w	fp, #0
 800cb24:	d133      	bne.n	800cb8e <__gethex+0x35a>
 800cb26:	f1b8 0f00 	cmp.w	r8, #0
 800cb2a:	d004      	beq.n	800cb36 <__gethex+0x302>
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 fdff 	bl	800d732 <__any_on>
 800cb34:	4683      	mov	fp, r0
 800cb36:	2301      	movs	r3, #1
 800cb38:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cb3c:	f008 081f 	and.w	r8, r8, #31
 800cb40:	fa03 f308 	lsl.w	r3, r3, r8
 800cb44:	f04f 0802 	mov.w	r8, #2
 800cb48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4213      	tst	r3, r2
 800cb50:	4620      	mov	r0, r4
 800cb52:	bf18      	it	ne
 800cb54:	f04b 0b02 	orrne.w	fp, fp, #2
 800cb58:	1bad      	subs	r5, r5, r6
 800cb5a:	f7ff fe03 	bl	800c764 <rshift>
 800cb5e:	687e      	ldr	r6, [r7, #4]
 800cb60:	f1bb 0f00 	cmp.w	fp, #0
 800cb64:	d04a      	beq.n	800cbfc <__gethex+0x3c8>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d016      	beq.n	800cb9a <__gethex+0x366>
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d018      	beq.n	800cba2 <__gethex+0x36e>
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d109      	bne.n	800cb88 <__gethex+0x354>
 800cb74:	f01b 0f02 	tst.w	fp, #2
 800cb78:	d006      	beq.n	800cb88 <__gethex+0x354>
 800cb7a:	f8da 3000 	ldr.w	r3, [sl]
 800cb7e:	ea4b 0b03 	orr.w	fp, fp, r3
 800cb82:	f01b 0f01 	tst.w	fp, #1
 800cb86:	d10f      	bne.n	800cba8 <__gethex+0x374>
 800cb88:	f048 0810 	orr.w	r8, r8, #16
 800cb8c:	e036      	b.n	800cbfc <__gethex+0x3c8>
 800cb8e:	f04f 0b01 	mov.w	fp, #1
 800cb92:	e7d0      	b.n	800cb36 <__gethex+0x302>
 800cb94:	f04f 0801 	mov.w	r8, #1
 800cb98:	e7e2      	b.n	800cb60 <__gethex+0x32c>
 800cb9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb9c:	f1c3 0301 	rsb	r3, r3, #1
 800cba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d0ef      	beq.n	800cb88 <__gethex+0x354>
 800cba8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbac:	f104 0214 	add.w	r2, r4, #20
 800cbb0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cbbc:	4694      	mov	ip, r2
 800cbbe:	f852 1b04 	ldr.w	r1, [r2], #4
 800cbc2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cbc6:	d01e      	beq.n	800cc06 <__gethex+0x3d2>
 800cbc8:	3101      	adds	r1, #1
 800cbca:	f8cc 1000 	str.w	r1, [ip]
 800cbce:	f1b8 0f02 	cmp.w	r8, #2
 800cbd2:	f104 0214 	add.w	r2, r4, #20
 800cbd6:	d13d      	bne.n	800cc54 <__gethex+0x420>
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	42ab      	cmp	r3, r5
 800cbde:	d10b      	bne.n	800cbf8 <__gethex+0x3c4>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	1169      	asrs	r1, r5, #5
 800cbe4:	f005 051f 	and.w	r5, r5, #31
 800cbe8:	fa03 f505 	lsl.w	r5, r3, r5
 800cbec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbf0:	421d      	tst	r5, r3
 800cbf2:	bf18      	it	ne
 800cbf4:	f04f 0801 	movne.w	r8, #1
 800cbf8:	f048 0820 	orr.w	r8, r8, #32
 800cbfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbfe:	601c      	str	r4, [r3, #0]
 800cc00:	9b02      	ldr	r3, [sp, #8]
 800cc02:	601e      	str	r6, [r3, #0]
 800cc04:	e6a0      	b.n	800c948 <__gethex+0x114>
 800cc06:	4290      	cmp	r0, r2
 800cc08:	f842 3c04 	str.w	r3, [r2, #-4]
 800cc0c:	d8d6      	bhi.n	800cbbc <__gethex+0x388>
 800cc0e:	68a2      	ldr	r2, [r4, #8]
 800cc10:	4593      	cmp	fp, r2
 800cc12:	db17      	blt.n	800cc44 <__gethex+0x410>
 800cc14:	6861      	ldr	r1, [r4, #4]
 800cc16:	4648      	mov	r0, r9
 800cc18:	3101      	adds	r1, #1
 800cc1a:	f000 f90f 	bl	800ce3c <_Balloc>
 800cc1e:	4682      	mov	sl, r0
 800cc20:	b918      	cbnz	r0, 800cc2a <__gethex+0x3f6>
 800cc22:	4602      	mov	r2, r0
 800cc24:	2184      	movs	r1, #132	; 0x84
 800cc26:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <__gethex+0x45c>)
 800cc28:	e6b1      	b.n	800c98e <__gethex+0x15a>
 800cc2a:	6922      	ldr	r2, [r4, #16]
 800cc2c:	f104 010c 	add.w	r1, r4, #12
 800cc30:	3202      	adds	r2, #2
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	300c      	adds	r0, #12
 800cc36:	f7ff fd39 	bl	800c6ac <memcpy>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4648      	mov	r0, r9
 800cc3e:	f000 f93d 	bl	800cebc <_Bfree>
 800cc42:	4654      	mov	r4, sl
 800cc44:	6922      	ldr	r2, [r4, #16]
 800cc46:	1c51      	adds	r1, r2, #1
 800cc48:	6121      	str	r1, [r4, #16]
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cc50:	6151      	str	r1, [r2, #20]
 800cc52:	e7bc      	b.n	800cbce <__gethex+0x39a>
 800cc54:	6921      	ldr	r1, [r4, #16]
 800cc56:	4559      	cmp	r1, fp
 800cc58:	dd0b      	ble.n	800cc72 <__gethex+0x43e>
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f7ff fd81 	bl	800c764 <rshift>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	3601      	adds	r6, #1
 800cc66:	42b3      	cmp	r3, r6
 800cc68:	f6ff aeda 	blt.w	800ca20 <__gethex+0x1ec>
 800cc6c:	f04f 0801 	mov.w	r8, #1
 800cc70:	e7c2      	b.n	800cbf8 <__gethex+0x3c4>
 800cc72:	f015 051f 	ands.w	r5, r5, #31
 800cc76:	d0f9      	beq.n	800cc6c <__gethex+0x438>
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	f1c5 0520 	rsb	r5, r5, #32
 800cc7e:	441a      	add	r2, r3
 800cc80:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cc84:	f000 f9cc 	bl	800d020 <__hi0bits>
 800cc88:	42a8      	cmp	r0, r5
 800cc8a:	dbe6      	blt.n	800cc5a <__gethex+0x426>
 800cc8c:	e7ee      	b.n	800cc6c <__gethex+0x438>
 800cc8e:	bf00      	nop
 800cc90:	0800fb39 	.word	0x0800fb39

0800cc94 <L_shift>:
 800cc94:	f1c2 0208 	rsb	r2, r2, #8
 800cc98:	0092      	lsls	r2, r2, #2
 800cc9a:	b570      	push	{r4, r5, r6, lr}
 800cc9c:	f1c2 0620 	rsb	r6, r2, #32
 800cca0:	6843      	ldr	r3, [r0, #4]
 800cca2:	6804      	ldr	r4, [r0, #0]
 800cca4:	fa03 f506 	lsl.w	r5, r3, r6
 800cca8:	432c      	orrs	r4, r5
 800ccaa:	40d3      	lsrs	r3, r2
 800ccac:	6004      	str	r4, [r0, #0]
 800ccae:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccb2:	4288      	cmp	r0, r1
 800ccb4:	d3f4      	bcc.n	800cca0 <L_shift+0xc>
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}

0800ccb8 <__match>:
 800ccb8:	b530      	push	{r4, r5, lr}
 800ccba:	6803      	ldr	r3, [r0, #0]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccc2:	b914      	cbnz	r4, 800ccca <__match+0x12>
 800ccc4:	6003      	str	r3, [r0, #0]
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	bd30      	pop	{r4, r5, pc}
 800ccca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ccd2:	2d19      	cmp	r5, #25
 800ccd4:	bf98      	it	ls
 800ccd6:	3220      	addls	r2, #32
 800ccd8:	42a2      	cmp	r2, r4
 800ccda:	d0f0      	beq.n	800ccbe <__match+0x6>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	e7f3      	b.n	800ccc8 <__match+0x10>

0800cce0 <__hexnan>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	2500      	movs	r5, #0
 800cce6:	680b      	ldr	r3, [r1, #0]
 800cce8:	4682      	mov	sl, r0
 800ccea:	115e      	asrs	r6, r3, #5
 800ccec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ccf0:	f013 031f 	ands.w	r3, r3, #31
 800ccf4:	bf18      	it	ne
 800ccf6:	3604      	addne	r6, #4
 800ccf8:	1f37      	subs	r7, r6, #4
 800ccfa:	4690      	mov	r8, r2
 800ccfc:	46b9      	mov	r9, r7
 800ccfe:	463c      	mov	r4, r7
 800cd00:	46ab      	mov	fp, r5
 800cd02:	b087      	sub	sp, #28
 800cd04:	6801      	ldr	r1, [r0, #0]
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd0c:	9502      	str	r5, [sp, #8]
 800cd0e:	784a      	ldrb	r2, [r1, #1]
 800cd10:	1c4b      	adds	r3, r1, #1
 800cd12:	9303      	str	r3, [sp, #12]
 800cd14:	b342      	cbz	r2, 800cd68 <__hexnan+0x88>
 800cd16:	4610      	mov	r0, r2
 800cd18:	9105      	str	r1, [sp, #20]
 800cd1a:	9204      	str	r2, [sp, #16]
 800cd1c:	f7ff fd75 	bl	800c80a <__hexdig_fun>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d14f      	bne.n	800cdc4 <__hexnan+0xe4>
 800cd24:	9a04      	ldr	r2, [sp, #16]
 800cd26:	9905      	ldr	r1, [sp, #20]
 800cd28:	2a20      	cmp	r2, #32
 800cd2a:	d818      	bhi.n	800cd5e <__hexnan+0x7e>
 800cd2c:	9b02      	ldr	r3, [sp, #8]
 800cd2e:	459b      	cmp	fp, r3
 800cd30:	dd13      	ble.n	800cd5a <__hexnan+0x7a>
 800cd32:	454c      	cmp	r4, r9
 800cd34:	d206      	bcs.n	800cd44 <__hexnan+0x64>
 800cd36:	2d07      	cmp	r5, #7
 800cd38:	dc04      	bgt.n	800cd44 <__hexnan+0x64>
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f7ff ffa8 	bl	800cc94 <L_shift>
 800cd44:	4544      	cmp	r4, r8
 800cd46:	d950      	bls.n	800cdea <__hexnan+0x10a>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f1a4 0904 	sub.w	r9, r4, #4
 800cd4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd52:	461d      	mov	r5, r3
 800cd54:	464c      	mov	r4, r9
 800cd56:	f8cd b008 	str.w	fp, [sp, #8]
 800cd5a:	9903      	ldr	r1, [sp, #12]
 800cd5c:	e7d7      	b.n	800cd0e <__hexnan+0x2e>
 800cd5e:	2a29      	cmp	r2, #41	; 0x29
 800cd60:	d155      	bne.n	800ce0e <__hexnan+0x12e>
 800cd62:	3102      	adds	r1, #2
 800cd64:	f8ca 1000 	str.w	r1, [sl]
 800cd68:	f1bb 0f00 	cmp.w	fp, #0
 800cd6c:	d04f      	beq.n	800ce0e <__hexnan+0x12e>
 800cd6e:	454c      	cmp	r4, r9
 800cd70:	d206      	bcs.n	800cd80 <__hexnan+0xa0>
 800cd72:	2d07      	cmp	r5, #7
 800cd74:	dc04      	bgt.n	800cd80 <__hexnan+0xa0>
 800cd76:	462a      	mov	r2, r5
 800cd78:	4649      	mov	r1, r9
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff ff8a 	bl	800cc94 <L_shift>
 800cd80:	4544      	cmp	r4, r8
 800cd82:	d934      	bls.n	800cdee <__hexnan+0x10e>
 800cd84:	4623      	mov	r3, r4
 800cd86:	f1a8 0204 	sub.w	r2, r8, #4
 800cd8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd8e:	429f      	cmp	r7, r3
 800cd90:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd94:	d2f9      	bcs.n	800cd8a <__hexnan+0xaa>
 800cd96:	1b3b      	subs	r3, r7, r4
 800cd98:	f023 0303 	bic.w	r3, r3, #3
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	3e03      	subs	r6, #3
 800cda0:	3401      	adds	r4, #1
 800cda2:	42a6      	cmp	r6, r4
 800cda4:	bf38      	it	cc
 800cda6:	2304      	movcc	r3, #4
 800cda8:	2200      	movs	r2, #0
 800cdaa:	4443      	add	r3, r8
 800cdac:	f843 2b04 	str.w	r2, [r3], #4
 800cdb0:	429f      	cmp	r7, r3
 800cdb2:	d2fb      	bcs.n	800cdac <__hexnan+0xcc>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	b91b      	cbnz	r3, 800cdc0 <__hexnan+0xe0>
 800cdb8:	4547      	cmp	r7, r8
 800cdba:	d126      	bne.n	800ce0a <__hexnan+0x12a>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	603b      	str	r3, [r7, #0]
 800cdc0:	2005      	movs	r0, #5
 800cdc2:	e025      	b.n	800ce10 <__hexnan+0x130>
 800cdc4:	3501      	adds	r5, #1
 800cdc6:	2d08      	cmp	r5, #8
 800cdc8:	f10b 0b01 	add.w	fp, fp, #1
 800cdcc:	dd06      	ble.n	800cddc <__hexnan+0xfc>
 800cdce:	4544      	cmp	r4, r8
 800cdd0:	d9c3      	bls.n	800cd5a <__hexnan+0x7a>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	2501      	movs	r5, #1
 800cdd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdda:	3c04      	subs	r4, #4
 800cddc:	6822      	ldr	r2, [r4, #0]
 800cdde:	f000 000f 	and.w	r0, r0, #15
 800cde2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cde6:	6020      	str	r0, [r4, #0]
 800cde8:	e7b7      	b.n	800cd5a <__hexnan+0x7a>
 800cdea:	2508      	movs	r5, #8
 800cdec:	e7b5      	b.n	800cd5a <__hexnan+0x7a>
 800cdee:	9b01      	ldr	r3, [sp, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0df      	beq.n	800cdb4 <__hexnan+0xd4>
 800cdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf8:	f1c3 0320 	rsb	r3, r3, #32
 800cdfc:	40da      	lsrs	r2, r3
 800cdfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce02:	4013      	ands	r3, r2
 800ce04:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce08:	e7d4      	b.n	800cdb4 <__hexnan+0xd4>
 800ce0a:	3f04      	subs	r7, #4
 800ce0c:	e7d2      	b.n	800cdb4 <__hexnan+0xd4>
 800ce0e:	2004      	movs	r0, #4
 800ce10:	b007      	add	sp, #28
 800ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce16 <__ascii_mbtowc>:
 800ce16:	b082      	sub	sp, #8
 800ce18:	b901      	cbnz	r1, 800ce1c <__ascii_mbtowc+0x6>
 800ce1a:	a901      	add	r1, sp, #4
 800ce1c:	b142      	cbz	r2, 800ce30 <__ascii_mbtowc+0x1a>
 800ce1e:	b14b      	cbz	r3, 800ce34 <__ascii_mbtowc+0x1e>
 800ce20:	7813      	ldrb	r3, [r2, #0]
 800ce22:	600b      	str	r3, [r1, #0]
 800ce24:	7812      	ldrb	r2, [r2, #0]
 800ce26:	1e10      	subs	r0, r2, #0
 800ce28:	bf18      	it	ne
 800ce2a:	2001      	movne	r0, #1
 800ce2c:	b002      	add	sp, #8
 800ce2e:	4770      	bx	lr
 800ce30:	4610      	mov	r0, r2
 800ce32:	e7fb      	b.n	800ce2c <__ascii_mbtowc+0x16>
 800ce34:	f06f 0001 	mvn.w	r0, #1
 800ce38:	e7f8      	b.n	800ce2c <__ascii_mbtowc+0x16>
	...

0800ce3c <_Balloc>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	69c6      	ldr	r6, [r0, #28]
 800ce40:	4604      	mov	r4, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	b976      	cbnz	r6, 800ce64 <_Balloc+0x28>
 800ce46:	2010      	movs	r0, #16
 800ce48:	f7fe fa80 	bl	800b34c <malloc>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	61e0      	str	r0, [r4, #28]
 800ce50:	b920      	cbnz	r0, 800ce5c <_Balloc+0x20>
 800ce52:	216b      	movs	r1, #107	; 0x6b
 800ce54:	4b17      	ldr	r3, [pc, #92]	; (800ceb4 <_Balloc+0x78>)
 800ce56:	4818      	ldr	r0, [pc, #96]	; (800ceb8 <_Balloc+0x7c>)
 800ce58:	f001 fa26 	bl	800e2a8 <__assert_func>
 800ce5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce60:	6006      	str	r6, [r0, #0]
 800ce62:	60c6      	str	r6, [r0, #12]
 800ce64:	69e6      	ldr	r6, [r4, #28]
 800ce66:	68f3      	ldr	r3, [r6, #12]
 800ce68:	b183      	cbz	r3, 800ce8c <_Balloc+0x50>
 800ce6a:	69e3      	ldr	r3, [r4, #28]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce72:	b9b8      	cbnz	r0, 800cea4 <_Balloc+0x68>
 800ce74:	2101      	movs	r1, #1
 800ce76:	fa01 f605 	lsl.w	r6, r1, r5
 800ce7a:	1d72      	adds	r2, r6, #5
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	0092      	lsls	r2, r2, #2
 800ce80:	f001 fa30 	bl	800e2e4 <_calloc_r>
 800ce84:	b160      	cbz	r0, 800cea0 <_Balloc+0x64>
 800ce86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce8a:	e00e      	b.n	800ceaa <_Balloc+0x6e>
 800ce8c:	2221      	movs	r2, #33	; 0x21
 800ce8e:	2104      	movs	r1, #4
 800ce90:	4620      	mov	r0, r4
 800ce92:	f001 fa27 	bl	800e2e4 <_calloc_r>
 800ce96:	69e3      	ldr	r3, [r4, #28]
 800ce98:	60f0      	str	r0, [r6, #12]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e4      	bne.n	800ce6a <_Balloc+0x2e>
 800cea0:	2000      	movs	r0, #0
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	6802      	ldr	r2, [r0, #0]
 800cea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ceb0:	e7f7      	b.n	800cea2 <_Balloc+0x66>
 800ceb2:	bf00      	nop
 800ceb4:	0800fbaa 	.word	0x0800fbaa
 800ceb8:	0800fbc1 	.word	0x0800fbc1

0800cebc <_Bfree>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	69c6      	ldr	r6, [r0, #28]
 800cec0:	4605      	mov	r5, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	b976      	cbnz	r6, 800cee4 <_Bfree+0x28>
 800cec6:	2010      	movs	r0, #16
 800cec8:	f7fe fa40 	bl	800b34c <malloc>
 800cecc:	4602      	mov	r2, r0
 800cece:	61e8      	str	r0, [r5, #28]
 800ced0:	b920      	cbnz	r0, 800cedc <_Bfree+0x20>
 800ced2:	218f      	movs	r1, #143	; 0x8f
 800ced4:	4b08      	ldr	r3, [pc, #32]	; (800cef8 <_Bfree+0x3c>)
 800ced6:	4809      	ldr	r0, [pc, #36]	; (800cefc <_Bfree+0x40>)
 800ced8:	f001 f9e6 	bl	800e2a8 <__assert_func>
 800cedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cee0:	6006      	str	r6, [r0, #0]
 800cee2:	60c6      	str	r6, [r0, #12]
 800cee4:	b13c      	cbz	r4, 800cef6 <_Bfree+0x3a>
 800cee6:	69eb      	ldr	r3, [r5, #28]
 800cee8:	6862      	ldr	r2, [r4, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cef0:	6021      	str	r1, [r4, #0]
 800cef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	0800fbaa 	.word	0x0800fbaa
 800cefc:	0800fbc1 	.word	0x0800fbc1

0800cf00 <__multadd>:
 800cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	4607      	mov	r7, r0
 800cf06:	460c      	mov	r4, r1
 800cf08:	461e      	mov	r6, r3
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	690d      	ldr	r5, [r1, #16]
 800cf0e:	f101 0c14 	add.w	ip, r1, #20
 800cf12:	f8dc 3000 	ldr.w	r3, [ip]
 800cf16:	3001      	adds	r0, #1
 800cf18:	b299      	uxth	r1, r3
 800cf1a:	fb02 6101 	mla	r1, r2, r1, r6
 800cf1e:	0c1e      	lsrs	r6, r3, #16
 800cf20:	0c0b      	lsrs	r3, r1, #16
 800cf22:	fb02 3306 	mla	r3, r2, r6, r3
 800cf26:	b289      	uxth	r1, r1
 800cf28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf2c:	4285      	cmp	r5, r0
 800cf2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf32:	f84c 1b04 	str.w	r1, [ip], #4
 800cf36:	dcec      	bgt.n	800cf12 <__multadd+0x12>
 800cf38:	b30e      	cbz	r6, 800cf7e <__multadd+0x7e>
 800cf3a:	68a3      	ldr	r3, [r4, #8]
 800cf3c:	42ab      	cmp	r3, r5
 800cf3e:	dc19      	bgt.n	800cf74 <__multadd+0x74>
 800cf40:	6861      	ldr	r1, [r4, #4]
 800cf42:	4638      	mov	r0, r7
 800cf44:	3101      	adds	r1, #1
 800cf46:	f7ff ff79 	bl	800ce3c <_Balloc>
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	b928      	cbnz	r0, 800cf5a <__multadd+0x5a>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	21ba      	movs	r1, #186	; 0xba
 800cf52:	4b0c      	ldr	r3, [pc, #48]	; (800cf84 <__multadd+0x84>)
 800cf54:	480c      	ldr	r0, [pc, #48]	; (800cf88 <__multadd+0x88>)
 800cf56:	f001 f9a7 	bl	800e2a8 <__assert_func>
 800cf5a:	6922      	ldr	r2, [r4, #16]
 800cf5c:	f104 010c 	add.w	r1, r4, #12
 800cf60:	3202      	adds	r2, #2
 800cf62:	0092      	lsls	r2, r2, #2
 800cf64:	300c      	adds	r0, #12
 800cf66:	f7ff fba1 	bl	800c6ac <memcpy>
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f7ff ffa5 	bl	800cebc <_Bfree>
 800cf72:	4644      	mov	r4, r8
 800cf74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf78:	3501      	adds	r5, #1
 800cf7a:	615e      	str	r6, [r3, #20]
 800cf7c:	6125      	str	r5, [r4, #16]
 800cf7e:	4620      	mov	r0, r4
 800cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf84:	0800fb39 	.word	0x0800fb39
 800cf88:	0800fbc1 	.word	0x0800fbc1

0800cf8c <__s2b>:
 800cf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf90:	4615      	mov	r5, r2
 800cf92:	2209      	movs	r2, #9
 800cf94:	461f      	mov	r7, r3
 800cf96:	3308      	adds	r3, #8
 800cf98:	460c      	mov	r4, r1
 800cf9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	db09      	blt.n	800cfbc <__s2b+0x30>
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7ff ff47 	bl	800ce3c <_Balloc>
 800cfae:	b940      	cbnz	r0, 800cfc2 <__s2b+0x36>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	21d3      	movs	r1, #211	; 0xd3
 800cfb4:	4b18      	ldr	r3, [pc, #96]	; (800d018 <__s2b+0x8c>)
 800cfb6:	4819      	ldr	r0, [pc, #100]	; (800d01c <__s2b+0x90>)
 800cfb8:	f001 f976 	bl	800e2a8 <__assert_func>
 800cfbc:	0052      	lsls	r2, r2, #1
 800cfbe:	3101      	adds	r1, #1
 800cfc0:	e7f0      	b.n	800cfa4 <__s2b+0x18>
 800cfc2:	9b08      	ldr	r3, [sp, #32]
 800cfc4:	2d09      	cmp	r5, #9
 800cfc6:	6143      	str	r3, [r0, #20]
 800cfc8:	f04f 0301 	mov.w	r3, #1
 800cfcc:	6103      	str	r3, [r0, #16]
 800cfce:	dd16      	ble.n	800cffe <__s2b+0x72>
 800cfd0:	f104 0909 	add.w	r9, r4, #9
 800cfd4:	46c8      	mov	r8, r9
 800cfd6:	442c      	add	r4, r5
 800cfd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cfdc:	4601      	mov	r1, r0
 800cfde:	220a      	movs	r2, #10
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	3b30      	subs	r3, #48	; 0x30
 800cfe4:	f7ff ff8c 	bl	800cf00 <__multadd>
 800cfe8:	45a0      	cmp	r8, r4
 800cfea:	d1f5      	bne.n	800cfd8 <__s2b+0x4c>
 800cfec:	f1a5 0408 	sub.w	r4, r5, #8
 800cff0:	444c      	add	r4, r9
 800cff2:	1b2d      	subs	r5, r5, r4
 800cff4:	1963      	adds	r3, r4, r5
 800cff6:	42bb      	cmp	r3, r7
 800cff8:	db04      	blt.n	800d004 <__s2b+0x78>
 800cffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffe:	2509      	movs	r5, #9
 800d000:	340a      	adds	r4, #10
 800d002:	e7f6      	b.n	800cff2 <__s2b+0x66>
 800d004:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d008:	4601      	mov	r1, r0
 800d00a:	220a      	movs	r2, #10
 800d00c:	4630      	mov	r0, r6
 800d00e:	3b30      	subs	r3, #48	; 0x30
 800d010:	f7ff ff76 	bl	800cf00 <__multadd>
 800d014:	e7ee      	b.n	800cff4 <__s2b+0x68>
 800d016:	bf00      	nop
 800d018:	0800fb39 	.word	0x0800fb39
 800d01c:	0800fbc1 	.word	0x0800fbc1

0800d020 <__hi0bits>:
 800d020:	0c02      	lsrs	r2, r0, #16
 800d022:	0412      	lsls	r2, r2, #16
 800d024:	4603      	mov	r3, r0
 800d026:	b9ca      	cbnz	r2, 800d05c <__hi0bits+0x3c>
 800d028:	0403      	lsls	r3, r0, #16
 800d02a:	2010      	movs	r0, #16
 800d02c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d030:	bf04      	itt	eq
 800d032:	021b      	lsleq	r3, r3, #8
 800d034:	3008      	addeq	r0, #8
 800d036:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d03a:	bf04      	itt	eq
 800d03c:	011b      	lsleq	r3, r3, #4
 800d03e:	3004      	addeq	r0, #4
 800d040:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d044:	bf04      	itt	eq
 800d046:	009b      	lsleq	r3, r3, #2
 800d048:	3002      	addeq	r0, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	db05      	blt.n	800d05a <__hi0bits+0x3a>
 800d04e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d052:	f100 0001 	add.w	r0, r0, #1
 800d056:	bf08      	it	eq
 800d058:	2020      	moveq	r0, #32
 800d05a:	4770      	bx	lr
 800d05c:	2000      	movs	r0, #0
 800d05e:	e7e5      	b.n	800d02c <__hi0bits+0xc>

0800d060 <__lo0bits>:
 800d060:	6803      	ldr	r3, [r0, #0]
 800d062:	4602      	mov	r2, r0
 800d064:	f013 0007 	ands.w	r0, r3, #7
 800d068:	d00b      	beq.n	800d082 <__lo0bits+0x22>
 800d06a:	07d9      	lsls	r1, r3, #31
 800d06c:	d421      	bmi.n	800d0b2 <__lo0bits+0x52>
 800d06e:	0798      	lsls	r0, r3, #30
 800d070:	bf49      	itett	mi
 800d072:	085b      	lsrmi	r3, r3, #1
 800d074:	089b      	lsrpl	r3, r3, #2
 800d076:	2001      	movmi	r0, #1
 800d078:	6013      	strmi	r3, [r2, #0]
 800d07a:	bf5c      	itt	pl
 800d07c:	2002      	movpl	r0, #2
 800d07e:	6013      	strpl	r3, [r2, #0]
 800d080:	4770      	bx	lr
 800d082:	b299      	uxth	r1, r3
 800d084:	b909      	cbnz	r1, 800d08a <__lo0bits+0x2a>
 800d086:	2010      	movs	r0, #16
 800d088:	0c1b      	lsrs	r3, r3, #16
 800d08a:	b2d9      	uxtb	r1, r3
 800d08c:	b909      	cbnz	r1, 800d092 <__lo0bits+0x32>
 800d08e:	3008      	adds	r0, #8
 800d090:	0a1b      	lsrs	r3, r3, #8
 800d092:	0719      	lsls	r1, r3, #28
 800d094:	bf04      	itt	eq
 800d096:	091b      	lsreq	r3, r3, #4
 800d098:	3004      	addeq	r0, #4
 800d09a:	0799      	lsls	r1, r3, #30
 800d09c:	bf04      	itt	eq
 800d09e:	089b      	lsreq	r3, r3, #2
 800d0a0:	3002      	addeq	r0, #2
 800d0a2:	07d9      	lsls	r1, r3, #31
 800d0a4:	d403      	bmi.n	800d0ae <__lo0bits+0x4e>
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	f100 0001 	add.w	r0, r0, #1
 800d0ac:	d003      	beq.n	800d0b6 <__lo0bits+0x56>
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	4770      	bx	lr
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	4770      	bx	lr
 800d0b6:	2020      	movs	r0, #32
 800d0b8:	4770      	bx	lr
	...

0800d0bc <__i2b>:
 800d0bc:	b510      	push	{r4, lr}
 800d0be:	460c      	mov	r4, r1
 800d0c0:	2101      	movs	r1, #1
 800d0c2:	f7ff febb 	bl	800ce3c <_Balloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	b928      	cbnz	r0, 800d0d6 <__i2b+0x1a>
 800d0ca:	f240 1145 	movw	r1, #325	; 0x145
 800d0ce:	4b04      	ldr	r3, [pc, #16]	; (800d0e0 <__i2b+0x24>)
 800d0d0:	4804      	ldr	r0, [pc, #16]	; (800d0e4 <__i2b+0x28>)
 800d0d2:	f001 f8e9 	bl	800e2a8 <__assert_func>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	6144      	str	r4, [r0, #20]
 800d0da:	6103      	str	r3, [r0, #16]
 800d0dc:	bd10      	pop	{r4, pc}
 800d0de:	bf00      	nop
 800d0e0:	0800fb39 	.word	0x0800fb39
 800d0e4:	0800fbc1 	.word	0x0800fbc1

0800d0e8 <__multiply>:
 800d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ec:	4691      	mov	r9, r2
 800d0ee:	690a      	ldr	r2, [r1, #16]
 800d0f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	bfbe      	ittt	lt
 800d0fa:	460b      	movlt	r3, r1
 800d0fc:	464c      	movlt	r4, r9
 800d0fe:	4699      	movlt	r9, r3
 800d100:	6927      	ldr	r7, [r4, #16]
 800d102:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	eb07 060a 	add.w	r6, r7, sl
 800d10e:	42b3      	cmp	r3, r6
 800d110:	b085      	sub	sp, #20
 800d112:	bfb8      	it	lt
 800d114:	3101      	addlt	r1, #1
 800d116:	f7ff fe91 	bl	800ce3c <_Balloc>
 800d11a:	b930      	cbnz	r0, 800d12a <__multiply+0x42>
 800d11c:	4602      	mov	r2, r0
 800d11e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d122:	4b43      	ldr	r3, [pc, #268]	; (800d230 <__multiply+0x148>)
 800d124:	4843      	ldr	r0, [pc, #268]	; (800d234 <__multiply+0x14c>)
 800d126:	f001 f8bf 	bl	800e2a8 <__assert_func>
 800d12a:	f100 0514 	add.w	r5, r0, #20
 800d12e:	462b      	mov	r3, r5
 800d130:	2200      	movs	r2, #0
 800d132:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d136:	4543      	cmp	r3, r8
 800d138:	d321      	bcc.n	800d17e <__multiply+0x96>
 800d13a:	f104 0314 	add.w	r3, r4, #20
 800d13e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d142:	f109 0314 	add.w	r3, r9, #20
 800d146:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d14a:	9202      	str	r2, [sp, #8]
 800d14c:	1b3a      	subs	r2, r7, r4
 800d14e:	3a15      	subs	r2, #21
 800d150:	f022 0203 	bic.w	r2, r2, #3
 800d154:	3204      	adds	r2, #4
 800d156:	f104 0115 	add.w	r1, r4, #21
 800d15a:	428f      	cmp	r7, r1
 800d15c:	bf38      	it	cc
 800d15e:	2204      	movcc	r2, #4
 800d160:	9201      	str	r2, [sp, #4]
 800d162:	9a02      	ldr	r2, [sp, #8]
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	429a      	cmp	r2, r3
 800d168:	d80c      	bhi.n	800d184 <__multiply+0x9c>
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	dd03      	ble.n	800d176 <__multiply+0x8e>
 800d16e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d172:	2b00      	cmp	r3, #0
 800d174:	d05a      	beq.n	800d22c <__multiply+0x144>
 800d176:	6106      	str	r6, [r0, #16]
 800d178:	b005      	add	sp, #20
 800d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17e:	f843 2b04 	str.w	r2, [r3], #4
 800d182:	e7d8      	b.n	800d136 <__multiply+0x4e>
 800d184:	f8b3 a000 	ldrh.w	sl, [r3]
 800d188:	f1ba 0f00 	cmp.w	sl, #0
 800d18c:	d023      	beq.n	800d1d6 <__multiply+0xee>
 800d18e:	46a9      	mov	r9, r5
 800d190:	f04f 0c00 	mov.w	ip, #0
 800d194:	f104 0e14 	add.w	lr, r4, #20
 800d198:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d19c:	f8d9 1000 	ldr.w	r1, [r9]
 800d1a0:	fa1f fb82 	uxth.w	fp, r2
 800d1a4:	b289      	uxth	r1, r1
 800d1a6:	fb0a 110b 	mla	r1, sl, fp, r1
 800d1aa:	4461      	add	r1, ip
 800d1ac:	f8d9 c000 	ldr.w	ip, [r9]
 800d1b0:	0c12      	lsrs	r2, r2, #16
 800d1b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d1b6:	fb0a c202 	mla	r2, sl, r2, ip
 800d1ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d1be:	b289      	uxth	r1, r1
 800d1c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d1c4:	4577      	cmp	r7, lr
 800d1c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d1ca:	f849 1b04 	str.w	r1, [r9], #4
 800d1ce:	d8e3      	bhi.n	800d198 <__multiply+0xb0>
 800d1d0:	9a01      	ldr	r2, [sp, #4]
 800d1d2:	f845 c002 	str.w	ip, [r5, r2]
 800d1d6:	9a03      	ldr	r2, [sp, #12]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d1de:	f1b9 0f00 	cmp.w	r9, #0
 800d1e2:	d021      	beq.n	800d228 <__multiply+0x140>
 800d1e4:	46ae      	mov	lr, r5
 800d1e6:	f04f 0a00 	mov.w	sl, #0
 800d1ea:	6829      	ldr	r1, [r5, #0]
 800d1ec:	f104 0c14 	add.w	ip, r4, #20
 800d1f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d1f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d1f8:	b289      	uxth	r1, r1
 800d1fa:	fb09 220b 	mla	r2, r9, fp, r2
 800d1fe:	4452      	add	r2, sl
 800d200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d204:	f84e 1b04 	str.w	r1, [lr], #4
 800d208:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d20c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d210:	f8be 1000 	ldrh.w	r1, [lr]
 800d214:	4567      	cmp	r7, ip
 800d216:	fb09 110a 	mla	r1, r9, sl, r1
 800d21a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d21e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d222:	d8e5      	bhi.n	800d1f0 <__multiply+0x108>
 800d224:	9a01      	ldr	r2, [sp, #4]
 800d226:	50a9      	str	r1, [r5, r2]
 800d228:	3504      	adds	r5, #4
 800d22a:	e79a      	b.n	800d162 <__multiply+0x7a>
 800d22c:	3e01      	subs	r6, #1
 800d22e:	e79c      	b.n	800d16a <__multiply+0x82>
 800d230:	0800fb39 	.word	0x0800fb39
 800d234:	0800fbc1 	.word	0x0800fbc1

0800d238 <__pow5mult>:
 800d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d23c:	4615      	mov	r5, r2
 800d23e:	f012 0203 	ands.w	r2, r2, #3
 800d242:	4606      	mov	r6, r0
 800d244:	460f      	mov	r7, r1
 800d246:	d007      	beq.n	800d258 <__pow5mult+0x20>
 800d248:	4c25      	ldr	r4, [pc, #148]	; (800d2e0 <__pow5mult+0xa8>)
 800d24a:	3a01      	subs	r2, #1
 800d24c:	2300      	movs	r3, #0
 800d24e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d252:	f7ff fe55 	bl	800cf00 <__multadd>
 800d256:	4607      	mov	r7, r0
 800d258:	10ad      	asrs	r5, r5, #2
 800d25a:	d03d      	beq.n	800d2d8 <__pow5mult+0xa0>
 800d25c:	69f4      	ldr	r4, [r6, #28]
 800d25e:	b97c      	cbnz	r4, 800d280 <__pow5mult+0x48>
 800d260:	2010      	movs	r0, #16
 800d262:	f7fe f873 	bl	800b34c <malloc>
 800d266:	4602      	mov	r2, r0
 800d268:	61f0      	str	r0, [r6, #28]
 800d26a:	b928      	cbnz	r0, 800d278 <__pow5mult+0x40>
 800d26c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d270:	4b1c      	ldr	r3, [pc, #112]	; (800d2e4 <__pow5mult+0xac>)
 800d272:	481d      	ldr	r0, [pc, #116]	; (800d2e8 <__pow5mult+0xb0>)
 800d274:	f001 f818 	bl	800e2a8 <__assert_func>
 800d278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d27c:	6004      	str	r4, [r0, #0]
 800d27e:	60c4      	str	r4, [r0, #12]
 800d280:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d288:	b94c      	cbnz	r4, 800d29e <__pow5mult+0x66>
 800d28a:	f240 2171 	movw	r1, #625	; 0x271
 800d28e:	4630      	mov	r0, r6
 800d290:	f7ff ff14 	bl	800d0bc <__i2b>
 800d294:	2300      	movs	r3, #0
 800d296:	4604      	mov	r4, r0
 800d298:	f8c8 0008 	str.w	r0, [r8, #8]
 800d29c:	6003      	str	r3, [r0, #0]
 800d29e:	f04f 0900 	mov.w	r9, #0
 800d2a2:	07eb      	lsls	r3, r5, #31
 800d2a4:	d50a      	bpl.n	800d2bc <__pow5mult+0x84>
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f7ff ff1c 	bl	800d0e8 <__multiply>
 800d2b0:	4680      	mov	r8, r0
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	f7ff fe01 	bl	800cebc <_Bfree>
 800d2ba:	4647      	mov	r7, r8
 800d2bc:	106d      	asrs	r5, r5, #1
 800d2be:	d00b      	beq.n	800d2d8 <__pow5mult+0xa0>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	b938      	cbnz	r0, 800d2d4 <__pow5mult+0x9c>
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f7ff ff0d 	bl	800d0e8 <__multiply>
 800d2ce:	6020      	str	r0, [r4, #0]
 800d2d0:	f8c0 9000 	str.w	r9, [r0]
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	e7e4      	b.n	800d2a2 <__pow5mult+0x6a>
 800d2d8:	4638      	mov	r0, r7
 800d2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2de:	bf00      	nop
 800d2e0:	0800fd10 	.word	0x0800fd10
 800d2e4:	0800fbaa 	.word	0x0800fbaa
 800d2e8:	0800fbc1 	.word	0x0800fbc1

0800d2ec <__lshift>:
 800d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	4607      	mov	r7, r0
 800d2f4:	4691      	mov	r9, r2
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	6849      	ldr	r1, [r1, #4]
 800d2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2fe:	68a3      	ldr	r3, [r4, #8]
 800d300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d304:	f108 0601 	add.w	r6, r8, #1
 800d308:	42b3      	cmp	r3, r6
 800d30a:	db0b      	blt.n	800d324 <__lshift+0x38>
 800d30c:	4638      	mov	r0, r7
 800d30e:	f7ff fd95 	bl	800ce3c <_Balloc>
 800d312:	4605      	mov	r5, r0
 800d314:	b948      	cbnz	r0, 800d32a <__lshift+0x3e>
 800d316:	4602      	mov	r2, r0
 800d318:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d31c:	4b27      	ldr	r3, [pc, #156]	; (800d3bc <__lshift+0xd0>)
 800d31e:	4828      	ldr	r0, [pc, #160]	; (800d3c0 <__lshift+0xd4>)
 800d320:	f000 ffc2 	bl	800e2a8 <__assert_func>
 800d324:	3101      	adds	r1, #1
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	e7ee      	b.n	800d308 <__lshift+0x1c>
 800d32a:	2300      	movs	r3, #0
 800d32c:	f100 0114 	add.w	r1, r0, #20
 800d330:	f100 0210 	add.w	r2, r0, #16
 800d334:	4618      	mov	r0, r3
 800d336:	4553      	cmp	r3, sl
 800d338:	db33      	blt.n	800d3a2 <__lshift+0xb6>
 800d33a:	6920      	ldr	r0, [r4, #16]
 800d33c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d340:	f104 0314 	add.w	r3, r4, #20
 800d344:	f019 091f 	ands.w	r9, r9, #31
 800d348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d34c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d350:	d02b      	beq.n	800d3aa <__lshift+0xbe>
 800d352:	468a      	mov	sl, r1
 800d354:	2200      	movs	r2, #0
 800d356:	f1c9 0e20 	rsb	lr, r9, #32
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	fa00 f009 	lsl.w	r0, r0, r9
 800d360:	4310      	orrs	r0, r2
 800d362:	f84a 0b04 	str.w	r0, [sl], #4
 800d366:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36a:	459c      	cmp	ip, r3
 800d36c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d370:	d8f3      	bhi.n	800d35a <__lshift+0x6e>
 800d372:	ebac 0304 	sub.w	r3, ip, r4
 800d376:	3b15      	subs	r3, #21
 800d378:	f023 0303 	bic.w	r3, r3, #3
 800d37c:	3304      	adds	r3, #4
 800d37e:	f104 0015 	add.w	r0, r4, #21
 800d382:	4584      	cmp	ip, r0
 800d384:	bf38      	it	cc
 800d386:	2304      	movcc	r3, #4
 800d388:	50ca      	str	r2, [r1, r3]
 800d38a:	b10a      	cbz	r2, 800d390 <__lshift+0xa4>
 800d38c:	f108 0602 	add.w	r6, r8, #2
 800d390:	3e01      	subs	r6, #1
 800d392:	4638      	mov	r0, r7
 800d394:	4621      	mov	r1, r4
 800d396:	612e      	str	r6, [r5, #16]
 800d398:	f7ff fd90 	bl	800cebc <_Bfree>
 800d39c:	4628      	mov	r0, r5
 800d39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	e7c5      	b.n	800d336 <__lshift+0x4a>
 800d3aa:	3904      	subs	r1, #4
 800d3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b0:	459c      	cmp	ip, r3
 800d3b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3b6:	d8f9      	bhi.n	800d3ac <__lshift+0xc0>
 800d3b8:	e7ea      	b.n	800d390 <__lshift+0xa4>
 800d3ba:	bf00      	nop
 800d3bc:	0800fb39 	.word	0x0800fb39
 800d3c0:	0800fbc1 	.word	0x0800fbc1

0800d3c4 <__mcmp>:
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	690a      	ldr	r2, [r1, #16]
 800d3c8:	6900      	ldr	r0, [r0, #16]
 800d3ca:	b530      	push	{r4, r5, lr}
 800d3cc:	1a80      	subs	r0, r0, r2
 800d3ce:	d10d      	bne.n	800d3ec <__mcmp+0x28>
 800d3d0:	3314      	adds	r3, #20
 800d3d2:	3114      	adds	r1, #20
 800d3d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3e4:	4295      	cmp	r5, r2
 800d3e6:	d002      	beq.n	800d3ee <__mcmp+0x2a>
 800d3e8:	d304      	bcc.n	800d3f4 <__mcmp+0x30>
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	bd30      	pop	{r4, r5, pc}
 800d3ee:	42a3      	cmp	r3, r4
 800d3f0:	d3f4      	bcc.n	800d3dc <__mcmp+0x18>
 800d3f2:	e7fb      	b.n	800d3ec <__mcmp+0x28>
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	e7f8      	b.n	800d3ec <__mcmp+0x28>
	...

0800d3fc <__mdiff>:
 800d3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	460d      	mov	r5, r1
 800d402:	4607      	mov	r7, r0
 800d404:	4611      	mov	r1, r2
 800d406:	4628      	mov	r0, r5
 800d408:	4614      	mov	r4, r2
 800d40a:	f7ff ffdb 	bl	800d3c4 <__mcmp>
 800d40e:	1e06      	subs	r6, r0, #0
 800d410:	d111      	bne.n	800d436 <__mdiff+0x3a>
 800d412:	4631      	mov	r1, r6
 800d414:	4638      	mov	r0, r7
 800d416:	f7ff fd11 	bl	800ce3c <_Balloc>
 800d41a:	4602      	mov	r2, r0
 800d41c:	b928      	cbnz	r0, 800d42a <__mdiff+0x2e>
 800d41e:	f240 2137 	movw	r1, #567	; 0x237
 800d422:	4b3a      	ldr	r3, [pc, #232]	; (800d50c <__mdiff+0x110>)
 800d424:	483a      	ldr	r0, [pc, #232]	; (800d510 <__mdiff+0x114>)
 800d426:	f000 ff3f 	bl	800e2a8 <__assert_func>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d430:	4610      	mov	r0, r2
 800d432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d436:	bfa4      	itt	ge
 800d438:	4623      	movge	r3, r4
 800d43a:	462c      	movge	r4, r5
 800d43c:	4638      	mov	r0, r7
 800d43e:	6861      	ldr	r1, [r4, #4]
 800d440:	bfa6      	itte	ge
 800d442:	461d      	movge	r5, r3
 800d444:	2600      	movge	r6, #0
 800d446:	2601      	movlt	r6, #1
 800d448:	f7ff fcf8 	bl	800ce3c <_Balloc>
 800d44c:	4602      	mov	r2, r0
 800d44e:	b918      	cbnz	r0, 800d458 <__mdiff+0x5c>
 800d450:	f240 2145 	movw	r1, #581	; 0x245
 800d454:	4b2d      	ldr	r3, [pc, #180]	; (800d50c <__mdiff+0x110>)
 800d456:	e7e5      	b.n	800d424 <__mdiff+0x28>
 800d458:	f102 0814 	add.w	r8, r2, #20
 800d45c:	46c2      	mov	sl, r8
 800d45e:	f04f 0c00 	mov.w	ip, #0
 800d462:	6927      	ldr	r7, [r4, #16]
 800d464:	60c6      	str	r6, [r0, #12]
 800d466:	692e      	ldr	r6, [r5, #16]
 800d468:	f104 0014 	add.w	r0, r4, #20
 800d46c:	f105 0914 	add.w	r9, r5, #20
 800d470:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d478:	3410      	adds	r4, #16
 800d47a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d47e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d482:	fa1f f18b 	uxth.w	r1, fp
 800d486:	4461      	add	r1, ip
 800d488:	fa1f fc83 	uxth.w	ip, r3
 800d48c:	0c1b      	lsrs	r3, r3, #16
 800d48e:	eba1 010c 	sub.w	r1, r1, ip
 800d492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d496:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d49a:	b289      	uxth	r1, r1
 800d49c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d4a0:	454e      	cmp	r6, r9
 800d4a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d4a6:	f84a 1b04 	str.w	r1, [sl], #4
 800d4aa:	d8e6      	bhi.n	800d47a <__mdiff+0x7e>
 800d4ac:	1b73      	subs	r3, r6, r5
 800d4ae:	3b15      	subs	r3, #21
 800d4b0:	f023 0303 	bic.w	r3, r3, #3
 800d4b4:	3515      	adds	r5, #21
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	42ae      	cmp	r6, r5
 800d4ba:	bf38      	it	cc
 800d4bc:	2304      	movcc	r3, #4
 800d4be:	4418      	add	r0, r3
 800d4c0:	4443      	add	r3, r8
 800d4c2:	461e      	mov	r6, r3
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	4575      	cmp	r5, lr
 800d4c8:	d30e      	bcc.n	800d4e8 <__mdiff+0xec>
 800d4ca:	f10e 0103 	add.w	r1, lr, #3
 800d4ce:	1a09      	subs	r1, r1, r0
 800d4d0:	f021 0103 	bic.w	r1, r1, #3
 800d4d4:	3803      	subs	r0, #3
 800d4d6:	4586      	cmp	lr, r0
 800d4d8:	bf38      	it	cc
 800d4da:	2100      	movcc	r1, #0
 800d4dc:	440b      	add	r3, r1
 800d4de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4e2:	b189      	cbz	r1, 800d508 <__mdiff+0x10c>
 800d4e4:	6117      	str	r7, [r2, #16]
 800d4e6:	e7a3      	b.n	800d430 <__mdiff+0x34>
 800d4e8:	f855 8b04 	ldr.w	r8, [r5], #4
 800d4ec:	fa1f f188 	uxth.w	r1, r8
 800d4f0:	4461      	add	r1, ip
 800d4f2:	140c      	asrs	r4, r1, #16
 800d4f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d4f8:	b289      	uxth	r1, r1
 800d4fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d4fe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d502:	f846 1b04 	str.w	r1, [r6], #4
 800d506:	e7de      	b.n	800d4c6 <__mdiff+0xca>
 800d508:	3f01      	subs	r7, #1
 800d50a:	e7e8      	b.n	800d4de <__mdiff+0xe2>
 800d50c:	0800fb39 	.word	0x0800fb39
 800d510:	0800fbc1 	.word	0x0800fbc1

0800d514 <__ulp>:
 800d514:	4b0e      	ldr	r3, [pc, #56]	; (800d550 <__ulp+0x3c>)
 800d516:	400b      	ands	r3, r1
 800d518:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dc08      	bgt.n	800d532 <__ulp+0x1e>
 800d520:	425b      	negs	r3, r3
 800d522:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d526:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d52a:	da04      	bge.n	800d536 <__ulp+0x22>
 800d52c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d530:	4113      	asrs	r3, r2
 800d532:	2200      	movs	r2, #0
 800d534:	e008      	b.n	800d548 <__ulp+0x34>
 800d536:	f1a2 0314 	sub.w	r3, r2, #20
 800d53a:	2b1e      	cmp	r3, #30
 800d53c:	bfd6      	itet	le
 800d53e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d542:	2201      	movgt	r2, #1
 800d544:	40da      	lsrle	r2, r3
 800d546:	2300      	movs	r3, #0
 800d548:	4619      	mov	r1, r3
 800d54a:	4610      	mov	r0, r2
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	7ff00000 	.word	0x7ff00000

0800d554 <__b2d>:
 800d554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d556:	6905      	ldr	r5, [r0, #16]
 800d558:	f100 0714 	add.w	r7, r0, #20
 800d55c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d560:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d564:	1f2e      	subs	r6, r5, #4
 800d566:	4620      	mov	r0, r4
 800d568:	f7ff fd5a 	bl	800d020 <__hi0bits>
 800d56c:	f1c0 0220 	rsb	r2, r0, #32
 800d570:	280a      	cmp	r0, #10
 800d572:	4603      	mov	r3, r0
 800d574:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d5e0 <__b2d+0x8c>
 800d578:	600a      	str	r2, [r1, #0]
 800d57a:	dc12      	bgt.n	800d5a2 <__b2d+0x4e>
 800d57c:	f1c0 0e0b 	rsb	lr, r0, #11
 800d580:	fa24 f20e 	lsr.w	r2, r4, lr
 800d584:	42b7      	cmp	r7, r6
 800d586:	ea42 010c 	orr.w	r1, r2, ip
 800d58a:	bf2c      	ite	cs
 800d58c:	2200      	movcs	r2, #0
 800d58e:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d592:	3315      	adds	r3, #21
 800d594:	fa04 f303 	lsl.w	r3, r4, r3
 800d598:	fa22 f20e 	lsr.w	r2, r2, lr
 800d59c:	431a      	orrs	r2, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5a2:	42b7      	cmp	r7, r6
 800d5a4:	bf2e      	itee	cs
 800d5a6:	2200      	movcs	r2, #0
 800d5a8:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d5ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800d5b0:	3b0b      	subs	r3, #11
 800d5b2:	d012      	beq.n	800d5da <__b2d+0x86>
 800d5b4:	f1c3 0520 	rsb	r5, r3, #32
 800d5b8:	fa22 f105 	lsr.w	r1, r2, r5
 800d5bc:	409c      	lsls	r4, r3
 800d5be:	430c      	orrs	r4, r1
 800d5c0:	42be      	cmp	r6, r7
 800d5c2:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800d5c6:	bf94      	ite	ls
 800d5c8:	2400      	movls	r4, #0
 800d5ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d5ce:	409a      	lsls	r2, r3
 800d5d0:	40ec      	lsrs	r4, r5
 800d5d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d5d6:	4322      	orrs	r2, r4
 800d5d8:	e7e1      	b.n	800d59e <__b2d+0x4a>
 800d5da:	ea44 010c 	orr.w	r1, r4, ip
 800d5de:	e7de      	b.n	800d59e <__b2d+0x4a>
 800d5e0:	3ff00000 	.word	0x3ff00000

0800d5e4 <__d2b>:
 800d5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5e6:	2101      	movs	r1, #1
 800d5e8:	4617      	mov	r7, r2
 800d5ea:	461c      	mov	r4, r3
 800d5ec:	9e08      	ldr	r6, [sp, #32]
 800d5ee:	f7ff fc25 	bl	800ce3c <_Balloc>
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	b930      	cbnz	r0, 800d604 <__d2b+0x20>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	f240 310f 	movw	r1, #783	; 0x30f
 800d5fc:	4b22      	ldr	r3, [pc, #136]	; (800d688 <__d2b+0xa4>)
 800d5fe:	4823      	ldr	r0, [pc, #140]	; (800d68c <__d2b+0xa8>)
 800d600:	f000 fe52 	bl	800e2a8 <__assert_func>
 800d604:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d608:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d60c:	bb24      	cbnz	r4, 800d658 <__d2b+0x74>
 800d60e:	2f00      	cmp	r7, #0
 800d610:	9301      	str	r3, [sp, #4]
 800d612:	d026      	beq.n	800d662 <__d2b+0x7e>
 800d614:	4668      	mov	r0, sp
 800d616:	9700      	str	r7, [sp, #0]
 800d618:	f7ff fd22 	bl	800d060 <__lo0bits>
 800d61c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d620:	b1e8      	cbz	r0, 800d65e <__d2b+0x7a>
 800d622:	f1c0 0320 	rsb	r3, r0, #32
 800d626:	fa02 f303 	lsl.w	r3, r2, r3
 800d62a:	430b      	orrs	r3, r1
 800d62c:	40c2      	lsrs	r2, r0
 800d62e:	616b      	str	r3, [r5, #20]
 800d630:	9201      	str	r2, [sp, #4]
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	bf14      	ite	ne
 800d638:	2102      	movne	r1, #2
 800d63a:	2101      	moveq	r1, #1
 800d63c:	61ab      	str	r3, [r5, #24]
 800d63e:	6129      	str	r1, [r5, #16]
 800d640:	b1bc      	cbz	r4, 800d672 <__d2b+0x8e>
 800d642:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d646:	4404      	add	r4, r0
 800d648:	6034      	str	r4, [r6, #0]
 800d64a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d650:	6018      	str	r0, [r3, #0]
 800d652:	4628      	mov	r0, r5
 800d654:	b003      	add	sp, #12
 800d656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d65c:	e7d7      	b.n	800d60e <__d2b+0x2a>
 800d65e:	6169      	str	r1, [r5, #20]
 800d660:	e7e7      	b.n	800d632 <__d2b+0x4e>
 800d662:	a801      	add	r0, sp, #4
 800d664:	f7ff fcfc 	bl	800d060 <__lo0bits>
 800d668:	9b01      	ldr	r3, [sp, #4]
 800d66a:	2101      	movs	r1, #1
 800d66c:	616b      	str	r3, [r5, #20]
 800d66e:	3020      	adds	r0, #32
 800d670:	e7e5      	b.n	800d63e <__d2b+0x5a>
 800d672:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d676:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d67a:	6030      	str	r0, [r6, #0]
 800d67c:	6918      	ldr	r0, [r3, #16]
 800d67e:	f7ff fccf 	bl	800d020 <__hi0bits>
 800d682:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d686:	e7e2      	b.n	800d64e <__d2b+0x6a>
 800d688:	0800fb39 	.word	0x0800fb39
 800d68c:	0800fbc1 	.word	0x0800fbc1

0800d690 <__ratio>:
 800d690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	4688      	mov	r8, r1
 800d696:	4669      	mov	r1, sp
 800d698:	4681      	mov	r9, r0
 800d69a:	f7ff ff5b 	bl	800d554 <__b2d>
 800d69e:	460f      	mov	r7, r1
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	a901      	add	r1, sp, #4
 800d6a8:	f7ff ff54 	bl	800d554 <__b2d>
 800d6ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d6b4:	468b      	mov	fp, r1
 800d6b6:	eba3 0c02 	sub.w	ip, r3, r2
 800d6ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6be:	1a9b      	subs	r3, r3, r2
 800d6c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfd5      	itete	le
 800d6c8:	460a      	movle	r2, r1
 800d6ca:	462a      	movgt	r2, r5
 800d6cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6d0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6d4:	bfd8      	it	le
 800d6d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d6da:	465b      	mov	r3, fp
 800d6dc:	4602      	mov	r2, r0
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f7f3 f89d 	bl	8000820 <__aeabi_ddiv>
 800d6e6:	b003      	add	sp, #12
 800d6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6ec <__copybits>:
 800d6ec:	3901      	subs	r1, #1
 800d6ee:	b570      	push	{r4, r5, r6, lr}
 800d6f0:	1149      	asrs	r1, r1, #5
 800d6f2:	6914      	ldr	r4, [r2, #16]
 800d6f4:	3101      	adds	r1, #1
 800d6f6:	f102 0314 	add.w	r3, r2, #20
 800d6fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d702:	1f05      	subs	r5, r0, #4
 800d704:	42a3      	cmp	r3, r4
 800d706:	d30c      	bcc.n	800d722 <__copybits+0x36>
 800d708:	1aa3      	subs	r3, r4, r2
 800d70a:	3b11      	subs	r3, #17
 800d70c:	f023 0303 	bic.w	r3, r3, #3
 800d710:	3211      	adds	r2, #17
 800d712:	42a2      	cmp	r2, r4
 800d714:	bf88      	it	hi
 800d716:	2300      	movhi	r3, #0
 800d718:	4418      	add	r0, r3
 800d71a:	2300      	movs	r3, #0
 800d71c:	4288      	cmp	r0, r1
 800d71e:	d305      	bcc.n	800d72c <__copybits+0x40>
 800d720:	bd70      	pop	{r4, r5, r6, pc}
 800d722:	f853 6b04 	ldr.w	r6, [r3], #4
 800d726:	f845 6f04 	str.w	r6, [r5, #4]!
 800d72a:	e7eb      	b.n	800d704 <__copybits+0x18>
 800d72c:	f840 3b04 	str.w	r3, [r0], #4
 800d730:	e7f4      	b.n	800d71c <__copybits+0x30>

0800d732 <__any_on>:
 800d732:	f100 0214 	add.w	r2, r0, #20
 800d736:	6900      	ldr	r0, [r0, #16]
 800d738:	114b      	asrs	r3, r1, #5
 800d73a:	4298      	cmp	r0, r3
 800d73c:	b510      	push	{r4, lr}
 800d73e:	db11      	blt.n	800d764 <__any_on+0x32>
 800d740:	dd0a      	ble.n	800d758 <__any_on+0x26>
 800d742:	f011 011f 	ands.w	r1, r1, #31
 800d746:	d007      	beq.n	800d758 <__any_on+0x26>
 800d748:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d74c:	fa24 f001 	lsr.w	r0, r4, r1
 800d750:	fa00 f101 	lsl.w	r1, r0, r1
 800d754:	428c      	cmp	r4, r1
 800d756:	d10b      	bne.n	800d770 <__any_on+0x3e>
 800d758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d803      	bhi.n	800d768 <__any_on+0x36>
 800d760:	2000      	movs	r0, #0
 800d762:	bd10      	pop	{r4, pc}
 800d764:	4603      	mov	r3, r0
 800d766:	e7f7      	b.n	800d758 <__any_on+0x26>
 800d768:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d76c:	2900      	cmp	r1, #0
 800d76e:	d0f5      	beq.n	800d75c <__any_on+0x2a>
 800d770:	2001      	movs	r0, #1
 800d772:	e7f6      	b.n	800d762 <__any_on+0x30>

0800d774 <_malloc_usable_size_r>:
 800d774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d778:	1f18      	subs	r0, r3, #4
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bfbc      	itt	lt
 800d77e:	580b      	ldrlt	r3, [r1, r0]
 800d780:	18c0      	addlt	r0, r0, r3
 800d782:	4770      	bx	lr

0800d784 <__ascii_wctomb>:
 800d784:	4603      	mov	r3, r0
 800d786:	4608      	mov	r0, r1
 800d788:	b141      	cbz	r1, 800d79c <__ascii_wctomb+0x18>
 800d78a:	2aff      	cmp	r2, #255	; 0xff
 800d78c:	d904      	bls.n	800d798 <__ascii_wctomb+0x14>
 800d78e:	228a      	movs	r2, #138	; 0x8a
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	601a      	str	r2, [r3, #0]
 800d796:	4770      	bx	lr
 800d798:	2001      	movs	r0, #1
 800d79a:	700a      	strb	r2, [r1, #0]
 800d79c:	4770      	bx	lr

0800d79e <__ssputs_r>:
 800d79e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a2:	461f      	mov	r7, r3
 800d7a4:	688e      	ldr	r6, [r1, #8]
 800d7a6:	4682      	mov	sl, r0
 800d7a8:	42be      	cmp	r6, r7
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	4690      	mov	r8, r2
 800d7ae:	680b      	ldr	r3, [r1, #0]
 800d7b0:	d82c      	bhi.n	800d80c <__ssputs_r+0x6e>
 800d7b2:	898a      	ldrh	r2, [r1, #12]
 800d7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7b8:	d026      	beq.n	800d808 <__ssputs_r+0x6a>
 800d7ba:	6965      	ldr	r5, [r4, #20]
 800d7bc:	6909      	ldr	r1, [r1, #16]
 800d7be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7c2:	eba3 0901 	sub.w	r9, r3, r1
 800d7c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7ca:	1c7b      	adds	r3, r7, #1
 800d7cc:	444b      	add	r3, r9
 800d7ce:	106d      	asrs	r5, r5, #1
 800d7d0:	429d      	cmp	r5, r3
 800d7d2:	bf38      	it	cc
 800d7d4:	461d      	movcc	r5, r3
 800d7d6:	0553      	lsls	r3, r2, #21
 800d7d8:	d527      	bpl.n	800d82a <__ssputs_r+0x8c>
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7fd fde6 	bl	800b3ac <_malloc_r>
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	b360      	cbz	r0, 800d83e <__ssputs_r+0xa0>
 800d7e4:	464a      	mov	r2, r9
 800d7e6:	6921      	ldr	r1, [r4, #16]
 800d7e8:	f7fe ff60 	bl	800c6ac <memcpy>
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7f6:	81a3      	strh	r3, [r4, #12]
 800d7f8:	6126      	str	r6, [r4, #16]
 800d7fa:	444e      	add	r6, r9
 800d7fc:	6026      	str	r6, [r4, #0]
 800d7fe:	463e      	mov	r6, r7
 800d800:	6165      	str	r5, [r4, #20]
 800d802:	eba5 0509 	sub.w	r5, r5, r9
 800d806:	60a5      	str	r5, [r4, #8]
 800d808:	42be      	cmp	r6, r7
 800d80a:	d900      	bls.n	800d80e <__ssputs_r+0x70>
 800d80c:	463e      	mov	r6, r7
 800d80e:	4632      	mov	r2, r6
 800d810:	4641      	mov	r1, r8
 800d812:	6820      	ldr	r0, [r4, #0]
 800d814:	f000 fcfd 	bl	800e212 <memmove>
 800d818:	2000      	movs	r0, #0
 800d81a:	68a3      	ldr	r3, [r4, #8]
 800d81c:	1b9b      	subs	r3, r3, r6
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	4433      	add	r3, r6
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82a:	462a      	mov	r2, r5
 800d82c:	f7fd fe52 	bl	800b4d4 <_realloc_r>
 800d830:	4606      	mov	r6, r0
 800d832:	2800      	cmp	r0, #0
 800d834:	d1e0      	bne.n	800d7f8 <__ssputs_r+0x5a>
 800d836:	4650      	mov	r0, sl
 800d838:	6921      	ldr	r1, [r4, #16]
 800d83a:	f7fe ff4b 	bl	800c6d4 <_free_r>
 800d83e:	230c      	movs	r3, #12
 800d840:	f8ca 3000 	str.w	r3, [sl]
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	f04f 30ff 	mov.w	r0, #4294967295
 800d84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	e7e9      	b.n	800d826 <__ssputs_r+0x88>
	...

0800d854 <_svfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	4698      	mov	r8, r3
 800d85a:	898b      	ldrh	r3, [r1, #12]
 800d85c:	4607      	mov	r7, r0
 800d85e:	061b      	lsls	r3, r3, #24
 800d860:	460d      	mov	r5, r1
 800d862:	4614      	mov	r4, r2
 800d864:	b09d      	sub	sp, #116	; 0x74
 800d866:	d50e      	bpl.n	800d886 <_svfiprintf_r+0x32>
 800d868:	690b      	ldr	r3, [r1, #16]
 800d86a:	b963      	cbnz	r3, 800d886 <_svfiprintf_r+0x32>
 800d86c:	2140      	movs	r1, #64	; 0x40
 800d86e:	f7fd fd9d 	bl	800b3ac <_malloc_r>
 800d872:	6028      	str	r0, [r5, #0]
 800d874:	6128      	str	r0, [r5, #16]
 800d876:	b920      	cbnz	r0, 800d882 <_svfiprintf_r+0x2e>
 800d878:	230c      	movs	r3, #12
 800d87a:	603b      	str	r3, [r7, #0]
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295
 800d880:	e0d0      	b.n	800da24 <_svfiprintf_r+0x1d0>
 800d882:	2340      	movs	r3, #64	; 0x40
 800d884:	616b      	str	r3, [r5, #20]
 800d886:	2300      	movs	r3, #0
 800d888:	9309      	str	r3, [sp, #36]	; 0x24
 800d88a:	2320      	movs	r3, #32
 800d88c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d890:	2330      	movs	r3, #48	; 0x30
 800d892:	f04f 0901 	mov.w	r9, #1
 800d896:	f8cd 800c 	str.w	r8, [sp, #12]
 800d89a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800da3c <_svfiprintf_r+0x1e8>
 800d89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a2:	4623      	mov	r3, r4
 800d8a4:	469a      	mov	sl, r3
 800d8a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8aa:	b10a      	cbz	r2, 800d8b0 <_svfiprintf_r+0x5c>
 800d8ac:	2a25      	cmp	r2, #37	; 0x25
 800d8ae:	d1f9      	bne.n	800d8a4 <_svfiprintf_r+0x50>
 800d8b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d8b4:	d00b      	beq.n	800d8ce <_svfiprintf_r+0x7a>
 800d8b6:	465b      	mov	r3, fp
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f7ff ff6e 	bl	800d79e <__ssputs_r>
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	f000 80a9 	beq.w	800da1a <_svfiprintf_r+0x1c6>
 800d8c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8ca:	445a      	add	r2, fp
 800d8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 80a1 	beq.w	800da1a <_svfiprintf_r+0x1c6>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f04f 32ff 	mov.w	r2, #4294967295
 800d8de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e2:	f10a 0a01 	add.w	sl, sl, #1
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	9307      	str	r3, [sp, #28]
 800d8ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f0:	4654      	mov	r4, sl
 800d8f2:	2205      	movs	r2, #5
 800d8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f8:	4850      	ldr	r0, [pc, #320]	; (800da3c <_svfiprintf_r+0x1e8>)
 800d8fa:	f000 fcc7 	bl	800e28c <memchr>
 800d8fe:	9a04      	ldr	r2, [sp, #16]
 800d900:	b9d8      	cbnz	r0, 800d93a <_svfiprintf_r+0xe6>
 800d902:	06d0      	lsls	r0, r2, #27
 800d904:	bf44      	itt	mi
 800d906:	2320      	movmi	r3, #32
 800d908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d90c:	0711      	lsls	r1, r2, #28
 800d90e:	bf44      	itt	mi
 800d910:	232b      	movmi	r3, #43	; 0x2b
 800d912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d916:	f89a 3000 	ldrb.w	r3, [sl]
 800d91a:	2b2a      	cmp	r3, #42	; 0x2a
 800d91c:	d015      	beq.n	800d94a <_svfiprintf_r+0xf6>
 800d91e:	4654      	mov	r4, sl
 800d920:	2000      	movs	r0, #0
 800d922:	f04f 0c0a 	mov.w	ip, #10
 800d926:	9a07      	ldr	r2, [sp, #28]
 800d928:	4621      	mov	r1, r4
 800d92a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d92e:	3b30      	subs	r3, #48	; 0x30
 800d930:	2b09      	cmp	r3, #9
 800d932:	d94d      	bls.n	800d9d0 <_svfiprintf_r+0x17c>
 800d934:	b1b0      	cbz	r0, 800d964 <_svfiprintf_r+0x110>
 800d936:	9207      	str	r2, [sp, #28]
 800d938:	e014      	b.n	800d964 <_svfiprintf_r+0x110>
 800d93a:	eba0 0308 	sub.w	r3, r0, r8
 800d93e:	fa09 f303 	lsl.w	r3, r9, r3
 800d942:	4313      	orrs	r3, r2
 800d944:	46a2      	mov	sl, r4
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	e7d2      	b.n	800d8f0 <_svfiprintf_r+0x9c>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	1d19      	adds	r1, r3, #4
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	9103      	str	r1, [sp, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	bfbb      	ittet	lt
 800d956:	425b      	neglt	r3, r3
 800d958:	f042 0202 	orrlt.w	r2, r2, #2
 800d95c:	9307      	strge	r3, [sp, #28]
 800d95e:	9307      	strlt	r3, [sp, #28]
 800d960:	bfb8      	it	lt
 800d962:	9204      	strlt	r2, [sp, #16]
 800d964:	7823      	ldrb	r3, [r4, #0]
 800d966:	2b2e      	cmp	r3, #46	; 0x2e
 800d968:	d10c      	bne.n	800d984 <_svfiprintf_r+0x130>
 800d96a:	7863      	ldrb	r3, [r4, #1]
 800d96c:	2b2a      	cmp	r3, #42	; 0x2a
 800d96e:	d134      	bne.n	800d9da <_svfiprintf_r+0x186>
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	3402      	adds	r4, #2
 800d974:	1d1a      	adds	r2, r3, #4
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	9203      	str	r2, [sp, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfb8      	it	lt
 800d97e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800da40 <_svfiprintf_r+0x1ec>
 800d988:	2203      	movs	r2, #3
 800d98a:	4650      	mov	r0, sl
 800d98c:	7821      	ldrb	r1, [r4, #0]
 800d98e:	f000 fc7d 	bl	800e28c <memchr>
 800d992:	b138      	cbz	r0, 800d9a4 <_svfiprintf_r+0x150>
 800d994:	2240      	movs	r2, #64	; 0x40
 800d996:	9b04      	ldr	r3, [sp, #16]
 800d998:	eba0 000a 	sub.w	r0, r0, sl
 800d99c:	4082      	lsls	r2, r0
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	3401      	adds	r4, #1
 800d9a2:	9304      	str	r3, [sp, #16]
 800d9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a8:	2206      	movs	r2, #6
 800d9aa:	4826      	ldr	r0, [pc, #152]	; (800da44 <_svfiprintf_r+0x1f0>)
 800d9ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b0:	f000 fc6c 	bl	800e28c <memchr>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d038      	beq.n	800da2a <_svfiprintf_r+0x1d6>
 800d9b8:	4b23      	ldr	r3, [pc, #140]	; (800da48 <_svfiprintf_r+0x1f4>)
 800d9ba:	bb1b      	cbnz	r3, 800da04 <_svfiprintf_r+0x1b0>
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	3307      	adds	r3, #7
 800d9c0:	f023 0307 	bic.w	r3, r3, #7
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	9303      	str	r3, [sp, #12]
 800d9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ca:	4433      	add	r3, r6
 800d9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9ce:	e768      	b.n	800d8a2 <_svfiprintf_r+0x4e>
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9d8:	e7a6      	b.n	800d928 <_svfiprintf_r+0xd4>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f04f 0c0a 	mov.w	ip, #10
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	3401      	adds	r4, #1
 800d9e4:	9305      	str	r3, [sp, #20]
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ec:	3a30      	subs	r2, #48	; 0x30
 800d9ee:	2a09      	cmp	r2, #9
 800d9f0:	d903      	bls.n	800d9fa <_svfiprintf_r+0x1a6>
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d0c6      	beq.n	800d984 <_svfiprintf_r+0x130>
 800d9f6:	9105      	str	r1, [sp, #20]
 800d9f8:	e7c4      	b.n	800d984 <_svfiprintf_r+0x130>
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800da02:	e7f0      	b.n	800d9e6 <_svfiprintf_r+0x192>
 800da04:	ab03      	add	r3, sp, #12
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	462a      	mov	r2, r5
 800da0a:	4638      	mov	r0, r7
 800da0c:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <_svfiprintf_r+0x1f8>)
 800da0e:	a904      	add	r1, sp, #16
 800da10:	f3af 8000 	nop.w
 800da14:	1c42      	adds	r2, r0, #1
 800da16:	4606      	mov	r6, r0
 800da18:	d1d6      	bne.n	800d9c8 <_svfiprintf_r+0x174>
 800da1a:	89ab      	ldrh	r3, [r5, #12]
 800da1c:	065b      	lsls	r3, r3, #25
 800da1e:	f53f af2d 	bmi.w	800d87c <_svfiprintf_r+0x28>
 800da22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da24:	b01d      	add	sp, #116	; 0x74
 800da26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2a:	ab03      	add	r3, sp, #12
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	462a      	mov	r2, r5
 800da30:	4638      	mov	r0, r7
 800da32:	4b06      	ldr	r3, [pc, #24]	; (800da4c <_svfiprintf_r+0x1f8>)
 800da34:	a904      	add	r1, sp, #16
 800da36:	f000 f9bf 	bl	800ddb8 <_printf_i>
 800da3a:	e7eb      	b.n	800da14 <_svfiprintf_r+0x1c0>
 800da3c:	0800fd1c 	.word	0x0800fd1c
 800da40:	0800fd22 	.word	0x0800fd22
 800da44:	0800fd26 	.word	0x0800fd26
 800da48:	00000000 	.word	0x00000000
 800da4c:	0800d79f 	.word	0x0800d79f

0800da50 <__sfputc_r>:
 800da50:	6893      	ldr	r3, [r2, #8]
 800da52:	b410      	push	{r4}
 800da54:	3b01      	subs	r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	6093      	str	r3, [r2, #8]
 800da5a:	da07      	bge.n	800da6c <__sfputc_r+0x1c>
 800da5c:	6994      	ldr	r4, [r2, #24]
 800da5e:	42a3      	cmp	r3, r4
 800da60:	db01      	blt.n	800da66 <__sfputc_r+0x16>
 800da62:	290a      	cmp	r1, #10
 800da64:	d102      	bne.n	800da6c <__sfputc_r+0x1c>
 800da66:	bc10      	pop	{r4}
 800da68:	f7fe bc99 	b.w	800c39e <__swbuf_r>
 800da6c:	6813      	ldr	r3, [r2, #0]
 800da6e:	1c58      	adds	r0, r3, #1
 800da70:	6010      	str	r0, [r2, #0]
 800da72:	7019      	strb	r1, [r3, #0]
 800da74:	4608      	mov	r0, r1
 800da76:	bc10      	pop	{r4}
 800da78:	4770      	bx	lr

0800da7a <__sfputs_r>:
 800da7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7c:	4606      	mov	r6, r0
 800da7e:	460f      	mov	r7, r1
 800da80:	4614      	mov	r4, r2
 800da82:	18d5      	adds	r5, r2, r3
 800da84:	42ac      	cmp	r4, r5
 800da86:	d101      	bne.n	800da8c <__sfputs_r+0x12>
 800da88:	2000      	movs	r0, #0
 800da8a:	e007      	b.n	800da9c <__sfputs_r+0x22>
 800da8c:	463a      	mov	r2, r7
 800da8e:	4630      	mov	r0, r6
 800da90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da94:	f7ff ffdc 	bl	800da50 <__sfputc_r>
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	d1f3      	bne.n	800da84 <__sfputs_r+0xa>
 800da9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800daa0 <_vfiprintf_r>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	460d      	mov	r5, r1
 800daa6:	4614      	mov	r4, r2
 800daa8:	4698      	mov	r8, r3
 800daaa:	4606      	mov	r6, r0
 800daac:	b09d      	sub	sp, #116	; 0x74
 800daae:	b118      	cbz	r0, 800dab8 <_vfiprintf_r+0x18>
 800dab0:	6a03      	ldr	r3, [r0, #32]
 800dab2:	b90b      	cbnz	r3, 800dab8 <_vfiprintf_r+0x18>
 800dab4:	f7fe fbda 	bl	800c26c <__sinit>
 800dab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800daba:	07d9      	lsls	r1, r3, #31
 800dabc:	d405      	bmi.n	800daca <_vfiprintf_r+0x2a>
 800dabe:	89ab      	ldrh	r3, [r5, #12]
 800dac0:	059a      	lsls	r2, r3, #22
 800dac2:	d402      	bmi.n	800daca <_vfiprintf_r+0x2a>
 800dac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dac6:	f7fe fdef 	bl	800c6a8 <__retarget_lock_acquire_recursive>
 800daca:	89ab      	ldrh	r3, [r5, #12]
 800dacc:	071b      	lsls	r3, r3, #28
 800dace:	d501      	bpl.n	800dad4 <_vfiprintf_r+0x34>
 800dad0:	692b      	ldr	r3, [r5, #16]
 800dad2:	b99b      	cbnz	r3, 800dafc <_vfiprintf_r+0x5c>
 800dad4:	4629      	mov	r1, r5
 800dad6:	4630      	mov	r0, r6
 800dad8:	f7fe fc9e 	bl	800c418 <__swsetup_r>
 800dadc:	b170      	cbz	r0, 800dafc <_vfiprintf_r+0x5c>
 800dade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dae0:	07dc      	lsls	r4, r3, #31
 800dae2:	d504      	bpl.n	800daee <_vfiprintf_r+0x4e>
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	b01d      	add	sp, #116	; 0x74
 800daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daee:	89ab      	ldrh	r3, [r5, #12]
 800daf0:	0598      	lsls	r0, r3, #22
 800daf2:	d4f7      	bmi.n	800dae4 <_vfiprintf_r+0x44>
 800daf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daf6:	f7fe fdd8 	bl	800c6aa <__retarget_lock_release_recursive>
 800dafa:	e7f3      	b.n	800dae4 <_vfiprintf_r+0x44>
 800dafc:	2300      	movs	r3, #0
 800dafe:	9309      	str	r3, [sp, #36]	; 0x24
 800db00:	2320      	movs	r3, #32
 800db02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db06:	2330      	movs	r3, #48	; 0x30
 800db08:	f04f 0901 	mov.w	r9, #1
 800db0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800dcc0 <_vfiprintf_r+0x220>
 800db14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db18:	4623      	mov	r3, r4
 800db1a:	469a      	mov	sl, r3
 800db1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db20:	b10a      	cbz	r2, 800db26 <_vfiprintf_r+0x86>
 800db22:	2a25      	cmp	r2, #37	; 0x25
 800db24:	d1f9      	bne.n	800db1a <_vfiprintf_r+0x7a>
 800db26:	ebba 0b04 	subs.w	fp, sl, r4
 800db2a:	d00b      	beq.n	800db44 <_vfiprintf_r+0xa4>
 800db2c:	465b      	mov	r3, fp
 800db2e:	4622      	mov	r2, r4
 800db30:	4629      	mov	r1, r5
 800db32:	4630      	mov	r0, r6
 800db34:	f7ff ffa1 	bl	800da7a <__sfputs_r>
 800db38:	3001      	adds	r0, #1
 800db3a:	f000 80a9 	beq.w	800dc90 <_vfiprintf_r+0x1f0>
 800db3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db40:	445a      	add	r2, fp
 800db42:	9209      	str	r2, [sp, #36]	; 0x24
 800db44:	f89a 3000 	ldrb.w	r3, [sl]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 80a1 	beq.w	800dc90 <_vfiprintf_r+0x1f0>
 800db4e:	2300      	movs	r3, #0
 800db50:	f04f 32ff 	mov.w	r2, #4294967295
 800db54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db58:	f10a 0a01 	add.w	sl, sl, #1
 800db5c:	9304      	str	r3, [sp, #16]
 800db5e:	9307      	str	r3, [sp, #28]
 800db60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db64:	931a      	str	r3, [sp, #104]	; 0x68
 800db66:	4654      	mov	r4, sl
 800db68:	2205      	movs	r2, #5
 800db6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db6e:	4854      	ldr	r0, [pc, #336]	; (800dcc0 <_vfiprintf_r+0x220>)
 800db70:	f000 fb8c 	bl	800e28c <memchr>
 800db74:	9a04      	ldr	r2, [sp, #16]
 800db76:	b9d8      	cbnz	r0, 800dbb0 <_vfiprintf_r+0x110>
 800db78:	06d1      	lsls	r1, r2, #27
 800db7a:	bf44      	itt	mi
 800db7c:	2320      	movmi	r3, #32
 800db7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db82:	0713      	lsls	r3, r2, #28
 800db84:	bf44      	itt	mi
 800db86:	232b      	movmi	r3, #43	; 0x2b
 800db88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db8c:	f89a 3000 	ldrb.w	r3, [sl]
 800db90:	2b2a      	cmp	r3, #42	; 0x2a
 800db92:	d015      	beq.n	800dbc0 <_vfiprintf_r+0x120>
 800db94:	4654      	mov	r4, sl
 800db96:	2000      	movs	r0, #0
 800db98:	f04f 0c0a 	mov.w	ip, #10
 800db9c:	9a07      	ldr	r2, [sp, #28]
 800db9e:	4621      	mov	r1, r4
 800dba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dba4:	3b30      	subs	r3, #48	; 0x30
 800dba6:	2b09      	cmp	r3, #9
 800dba8:	d94d      	bls.n	800dc46 <_vfiprintf_r+0x1a6>
 800dbaa:	b1b0      	cbz	r0, 800dbda <_vfiprintf_r+0x13a>
 800dbac:	9207      	str	r2, [sp, #28]
 800dbae:	e014      	b.n	800dbda <_vfiprintf_r+0x13a>
 800dbb0:	eba0 0308 	sub.w	r3, r0, r8
 800dbb4:	fa09 f303 	lsl.w	r3, r9, r3
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	46a2      	mov	sl, r4
 800dbbc:	9304      	str	r3, [sp, #16]
 800dbbe:	e7d2      	b.n	800db66 <_vfiprintf_r+0xc6>
 800dbc0:	9b03      	ldr	r3, [sp, #12]
 800dbc2:	1d19      	adds	r1, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	9103      	str	r1, [sp, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	bfbb      	ittet	lt
 800dbcc:	425b      	neglt	r3, r3
 800dbce:	f042 0202 	orrlt.w	r2, r2, #2
 800dbd2:	9307      	strge	r3, [sp, #28]
 800dbd4:	9307      	strlt	r3, [sp, #28]
 800dbd6:	bfb8      	it	lt
 800dbd8:	9204      	strlt	r2, [sp, #16]
 800dbda:	7823      	ldrb	r3, [r4, #0]
 800dbdc:	2b2e      	cmp	r3, #46	; 0x2e
 800dbde:	d10c      	bne.n	800dbfa <_vfiprintf_r+0x15a>
 800dbe0:	7863      	ldrb	r3, [r4, #1]
 800dbe2:	2b2a      	cmp	r3, #42	; 0x2a
 800dbe4:	d134      	bne.n	800dc50 <_vfiprintf_r+0x1b0>
 800dbe6:	9b03      	ldr	r3, [sp, #12]
 800dbe8:	3402      	adds	r4, #2
 800dbea:	1d1a      	adds	r2, r3, #4
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	9203      	str	r2, [sp, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bfb8      	it	lt
 800dbf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbf8:	9305      	str	r3, [sp, #20]
 800dbfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcc4 <_vfiprintf_r+0x224>
 800dbfe:	2203      	movs	r2, #3
 800dc00:	4650      	mov	r0, sl
 800dc02:	7821      	ldrb	r1, [r4, #0]
 800dc04:	f000 fb42 	bl	800e28c <memchr>
 800dc08:	b138      	cbz	r0, 800dc1a <_vfiprintf_r+0x17a>
 800dc0a:	2240      	movs	r2, #64	; 0x40
 800dc0c:	9b04      	ldr	r3, [sp, #16]
 800dc0e:	eba0 000a 	sub.w	r0, r0, sl
 800dc12:	4082      	lsls	r2, r0
 800dc14:	4313      	orrs	r3, r2
 800dc16:	3401      	adds	r4, #1
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1e:	2206      	movs	r2, #6
 800dc20:	4829      	ldr	r0, [pc, #164]	; (800dcc8 <_vfiprintf_r+0x228>)
 800dc22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc26:	f000 fb31 	bl	800e28c <memchr>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d03f      	beq.n	800dcae <_vfiprintf_r+0x20e>
 800dc2e:	4b27      	ldr	r3, [pc, #156]	; (800dccc <_vfiprintf_r+0x22c>)
 800dc30:	bb1b      	cbnz	r3, 800dc7a <_vfiprintf_r+0x1da>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	3307      	adds	r3, #7
 800dc36:	f023 0307 	bic.w	r3, r3, #7
 800dc3a:	3308      	adds	r3, #8
 800dc3c:	9303      	str	r3, [sp, #12]
 800dc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc40:	443b      	add	r3, r7
 800dc42:	9309      	str	r3, [sp, #36]	; 0x24
 800dc44:	e768      	b.n	800db18 <_vfiprintf_r+0x78>
 800dc46:	460c      	mov	r4, r1
 800dc48:	2001      	movs	r0, #1
 800dc4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc4e:	e7a6      	b.n	800db9e <_vfiprintf_r+0xfe>
 800dc50:	2300      	movs	r3, #0
 800dc52:	f04f 0c0a 	mov.w	ip, #10
 800dc56:	4619      	mov	r1, r3
 800dc58:	3401      	adds	r4, #1
 800dc5a:	9305      	str	r3, [sp, #20]
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc62:	3a30      	subs	r2, #48	; 0x30
 800dc64:	2a09      	cmp	r2, #9
 800dc66:	d903      	bls.n	800dc70 <_vfiprintf_r+0x1d0>
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0c6      	beq.n	800dbfa <_vfiprintf_r+0x15a>
 800dc6c:	9105      	str	r1, [sp, #20]
 800dc6e:	e7c4      	b.n	800dbfa <_vfiprintf_r+0x15a>
 800dc70:	4604      	mov	r4, r0
 800dc72:	2301      	movs	r3, #1
 800dc74:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc78:	e7f0      	b.n	800dc5c <_vfiprintf_r+0x1bc>
 800dc7a:	ab03      	add	r3, sp, #12
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4630      	mov	r0, r6
 800dc82:	4b13      	ldr	r3, [pc, #76]	; (800dcd0 <_vfiprintf_r+0x230>)
 800dc84:	a904      	add	r1, sp, #16
 800dc86:	f3af 8000 	nop.w
 800dc8a:	4607      	mov	r7, r0
 800dc8c:	1c78      	adds	r0, r7, #1
 800dc8e:	d1d6      	bne.n	800dc3e <_vfiprintf_r+0x19e>
 800dc90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc92:	07d9      	lsls	r1, r3, #31
 800dc94:	d405      	bmi.n	800dca2 <_vfiprintf_r+0x202>
 800dc96:	89ab      	ldrh	r3, [r5, #12]
 800dc98:	059a      	lsls	r2, r3, #22
 800dc9a:	d402      	bmi.n	800dca2 <_vfiprintf_r+0x202>
 800dc9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc9e:	f7fe fd04 	bl	800c6aa <__retarget_lock_release_recursive>
 800dca2:	89ab      	ldrh	r3, [r5, #12]
 800dca4:	065b      	lsls	r3, r3, #25
 800dca6:	f53f af1d 	bmi.w	800dae4 <_vfiprintf_r+0x44>
 800dcaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcac:	e71c      	b.n	800dae8 <_vfiprintf_r+0x48>
 800dcae:	ab03      	add	r3, sp, #12
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	462a      	mov	r2, r5
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	4b06      	ldr	r3, [pc, #24]	; (800dcd0 <_vfiprintf_r+0x230>)
 800dcb8:	a904      	add	r1, sp, #16
 800dcba:	f000 f87d 	bl	800ddb8 <_printf_i>
 800dcbe:	e7e4      	b.n	800dc8a <_vfiprintf_r+0x1ea>
 800dcc0:	0800fd1c 	.word	0x0800fd1c
 800dcc4:	0800fd22 	.word	0x0800fd22
 800dcc8:	0800fd26 	.word	0x0800fd26
 800dccc:	00000000 	.word	0x00000000
 800dcd0:	0800da7b 	.word	0x0800da7b

0800dcd4 <_printf_common>:
 800dcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd8:	4616      	mov	r6, r2
 800dcda:	4699      	mov	r9, r3
 800dcdc:	688a      	ldr	r2, [r1, #8]
 800dcde:	690b      	ldr	r3, [r1, #16]
 800dce0:	4607      	mov	r7, r0
 800dce2:	4293      	cmp	r3, r2
 800dce4:	bfb8      	it	lt
 800dce6:	4613      	movlt	r3, r2
 800dce8:	6033      	str	r3, [r6, #0]
 800dcea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcee:	460c      	mov	r4, r1
 800dcf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcf4:	b10a      	cbz	r2, 800dcfa <_printf_common+0x26>
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	6033      	str	r3, [r6, #0]
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	0699      	lsls	r1, r3, #26
 800dcfe:	bf42      	ittt	mi
 800dd00:	6833      	ldrmi	r3, [r6, #0]
 800dd02:	3302      	addmi	r3, #2
 800dd04:	6033      	strmi	r3, [r6, #0]
 800dd06:	6825      	ldr	r5, [r4, #0]
 800dd08:	f015 0506 	ands.w	r5, r5, #6
 800dd0c:	d106      	bne.n	800dd1c <_printf_common+0x48>
 800dd0e:	f104 0a19 	add.w	sl, r4, #25
 800dd12:	68e3      	ldr	r3, [r4, #12]
 800dd14:	6832      	ldr	r2, [r6, #0]
 800dd16:	1a9b      	subs	r3, r3, r2
 800dd18:	42ab      	cmp	r3, r5
 800dd1a:	dc2b      	bgt.n	800dd74 <_printf_common+0xa0>
 800dd1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd20:	1e13      	subs	r3, r2, #0
 800dd22:	6822      	ldr	r2, [r4, #0]
 800dd24:	bf18      	it	ne
 800dd26:	2301      	movne	r3, #1
 800dd28:	0692      	lsls	r2, r2, #26
 800dd2a:	d430      	bmi.n	800dd8e <_printf_common+0xba>
 800dd2c:	4649      	mov	r1, r9
 800dd2e:	4638      	mov	r0, r7
 800dd30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd34:	47c0      	blx	r8
 800dd36:	3001      	adds	r0, #1
 800dd38:	d023      	beq.n	800dd82 <_printf_common+0xae>
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	6922      	ldr	r2, [r4, #16]
 800dd3e:	f003 0306 	and.w	r3, r3, #6
 800dd42:	2b04      	cmp	r3, #4
 800dd44:	bf14      	ite	ne
 800dd46:	2500      	movne	r5, #0
 800dd48:	6833      	ldreq	r3, [r6, #0]
 800dd4a:	f04f 0600 	mov.w	r6, #0
 800dd4e:	bf08      	it	eq
 800dd50:	68e5      	ldreq	r5, [r4, #12]
 800dd52:	f104 041a 	add.w	r4, r4, #26
 800dd56:	bf08      	it	eq
 800dd58:	1aed      	subeq	r5, r5, r3
 800dd5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dd5e:	bf08      	it	eq
 800dd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd64:	4293      	cmp	r3, r2
 800dd66:	bfc4      	itt	gt
 800dd68:	1a9b      	subgt	r3, r3, r2
 800dd6a:	18ed      	addgt	r5, r5, r3
 800dd6c:	42b5      	cmp	r5, r6
 800dd6e:	d11a      	bne.n	800dda6 <_printf_common+0xd2>
 800dd70:	2000      	movs	r0, #0
 800dd72:	e008      	b.n	800dd86 <_printf_common+0xb2>
 800dd74:	2301      	movs	r3, #1
 800dd76:	4652      	mov	r2, sl
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4638      	mov	r0, r7
 800dd7c:	47c0      	blx	r8
 800dd7e:	3001      	adds	r0, #1
 800dd80:	d103      	bne.n	800dd8a <_printf_common+0xb6>
 800dd82:	f04f 30ff 	mov.w	r0, #4294967295
 800dd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8a:	3501      	adds	r5, #1
 800dd8c:	e7c1      	b.n	800dd12 <_printf_common+0x3e>
 800dd8e:	2030      	movs	r0, #48	; 0x30
 800dd90:	18e1      	adds	r1, r4, r3
 800dd92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd96:	1c5a      	adds	r2, r3, #1
 800dd98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd9c:	4422      	add	r2, r4
 800dd9e:	3302      	adds	r3, #2
 800dda0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dda4:	e7c2      	b.n	800dd2c <_printf_common+0x58>
 800dda6:	2301      	movs	r3, #1
 800dda8:	4622      	mov	r2, r4
 800ddaa:	4649      	mov	r1, r9
 800ddac:	4638      	mov	r0, r7
 800ddae:	47c0      	blx	r8
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	d0e6      	beq.n	800dd82 <_printf_common+0xae>
 800ddb4:	3601      	adds	r6, #1
 800ddb6:	e7d9      	b.n	800dd6c <_printf_common+0x98>

0800ddb8 <_printf_i>:
 800ddb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddbc:	7e0f      	ldrb	r7, [r1, #24]
 800ddbe:	4691      	mov	r9, r2
 800ddc0:	2f78      	cmp	r7, #120	; 0x78
 800ddc2:	4680      	mov	r8, r0
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	469a      	mov	sl, r3
 800ddc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddce:	d807      	bhi.n	800dde0 <_printf_i+0x28>
 800ddd0:	2f62      	cmp	r7, #98	; 0x62
 800ddd2:	d80a      	bhi.n	800ddea <_printf_i+0x32>
 800ddd4:	2f00      	cmp	r7, #0
 800ddd6:	f000 80d5 	beq.w	800df84 <_printf_i+0x1cc>
 800ddda:	2f58      	cmp	r7, #88	; 0x58
 800dddc:	f000 80c1 	beq.w	800df62 <_printf_i+0x1aa>
 800dde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dde4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dde8:	e03a      	b.n	800de60 <_printf_i+0xa8>
 800ddea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddee:	2b15      	cmp	r3, #21
 800ddf0:	d8f6      	bhi.n	800dde0 <_printf_i+0x28>
 800ddf2:	a101      	add	r1, pc, #4	; (adr r1, 800ddf8 <_printf_i+0x40>)
 800ddf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddf8:	0800de51 	.word	0x0800de51
 800ddfc:	0800de65 	.word	0x0800de65
 800de00:	0800dde1 	.word	0x0800dde1
 800de04:	0800dde1 	.word	0x0800dde1
 800de08:	0800dde1 	.word	0x0800dde1
 800de0c:	0800dde1 	.word	0x0800dde1
 800de10:	0800de65 	.word	0x0800de65
 800de14:	0800dde1 	.word	0x0800dde1
 800de18:	0800dde1 	.word	0x0800dde1
 800de1c:	0800dde1 	.word	0x0800dde1
 800de20:	0800dde1 	.word	0x0800dde1
 800de24:	0800df6b 	.word	0x0800df6b
 800de28:	0800de91 	.word	0x0800de91
 800de2c:	0800df25 	.word	0x0800df25
 800de30:	0800dde1 	.word	0x0800dde1
 800de34:	0800dde1 	.word	0x0800dde1
 800de38:	0800df8d 	.word	0x0800df8d
 800de3c:	0800dde1 	.word	0x0800dde1
 800de40:	0800de91 	.word	0x0800de91
 800de44:	0800dde1 	.word	0x0800dde1
 800de48:	0800dde1 	.word	0x0800dde1
 800de4c:	0800df2d 	.word	0x0800df2d
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	1d1a      	adds	r2, r3, #4
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	602a      	str	r2, [r5, #0]
 800de58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de60:	2301      	movs	r3, #1
 800de62:	e0a0      	b.n	800dfa6 <_printf_i+0x1ee>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	682b      	ldr	r3, [r5, #0]
 800de68:	0607      	lsls	r7, r0, #24
 800de6a:	f103 0104 	add.w	r1, r3, #4
 800de6e:	6029      	str	r1, [r5, #0]
 800de70:	d501      	bpl.n	800de76 <_printf_i+0xbe>
 800de72:	681e      	ldr	r6, [r3, #0]
 800de74:	e003      	b.n	800de7e <_printf_i+0xc6>
 800de76:	0646      	lsls	r6, r0, #25
 800de78:	d5fb      	bpl.n	800de72 <_printf_i+0xba>
 800de7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de7e:	2e00      	cmp	r6, #0
 800de80:	da03      	bge.n	800de8a <_printf_i+0xd2>
 800de82:	232d      	movs	r3, #45	; 0x2d
 800de84:	4276      	negs	r6, r6
 800de86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de8a:	230a      	movs	r3, #10
 800de8c:	4859      	ldr	r0, [pc, #356]	; (800dff4 <_printf_i+0x23c>)
 800de8e:	e012      	b.n	800deb6 <_printf_i+0xfe>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	6820      	ldr	r0, [r4, #0]
 800de94:	1d19      	adds	r1, r3, #4
 800de96:	6029      	str	r1, [r5, #0]
 800de98:	0605      	lsls	r5, r0, #24
 800de9a:	d501      	bpl.n	800dea0 <_printf_i+0xe8>
 800de9c:	681e      	ldr	r6, [r3, #0]
 800de9e:	e002      	b.n	800dea6 <_printf_i+0xee>
 800dea0:	0641      	lsls	r1, r0, #25
 800dea2:	d5fb      	bpl.n	800de9c <_printf_i+0xe4>
 800dea4:	881e      	ldrh	r6, [r3, #0]
 800dea6:	2f6f      	cmp	r7, #111	; 0x6f
 800dea8:	bf0c      	ite	eq
 800deaa:	2308      	moveq	r3, #8
 800deac:	230a      	movne	r3, #10
 800deae:	4851      	ldr	r0, [pc, #324]	; (800dff4 <_printf_i+0x23c>)
 800deb0:	2100      	movs	r1, #0
 800deb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deb6:	6865      	ldr	r5, [r4, #4]
 800deb8:	2d00      	cmp	r5, #0
 800deba:	bfa8      	it	ge
 800debc:	6821      	ldrge	r1, [r4, #0]
 800debe:	60a5      	str	r5, [r4, #8]
 800dec0:	bfa4      	itt	ge
 800dec2:	f021 0104 	bicge.w	r1, r1, #4
 800dec6:	6021      	strge	r1, [r4, #0]
 800dec8:	b90e      	cbnz	r6, 800dece <_printf_i+0x116>
 800deca:	2d00      	cmp	r5, #0
 800decc:	d04b      	beq.n	800df66 <_printf_i+0x1ae>
 800dece:	4615      	mov	r5, r2
 800ded0:	fbb6 f1f3 	udiv	r1, r6, r3
 800ded4:	fb03 6711 	mls	r7, r3, r1, r6
 800ded8:	5dc7      	ldrb	r7, [r0, r7]
 800deda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dede:	4637      	mov	r7, r6
 800dee0:	42bb      	cmp	r3, r7
 800dee2:	460e      	mov	r6, r1
 800dee4:	d9f4      	bls.n	800ded0 <_printf_i+0x118>
 800dee6:	2b08      	cmp	r3, #8
 800dee8:	d10b      	bne.n	800df02 <_printf_i+0x14a>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	07de      	lsls	r6, r3, #31
 800deee:	d508      	bpl.n	800df02 <_printf_i+0x14a>
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	6861      	ldr	r1, [r4, #4]
 800def4:	4299      	cmp	r1, r3
 800def6:	bfde      	ittt	le
 800def8:	2330      	movle	r3, #48	; 0x30
 800defa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800defe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df02:	1b52      	subs	r2, r2, r5
 800df04:	6122      	str	r2, [r4, #16]
 800df06:	464b      	mov	r3, r9
 800df08:	4621      	mov	r1, r4
 800df0a:	4640      	mov	r0, r8
 800df0c:	f8cd a000 	str.w	sl, [sp]
 800df10:	aa03      	add	r2, sp, #12
 800df12:	f7ff fedf 	bl	800dcd4 <_printf_common>
 800df16:	3001      	adds	r0, #1
 800df18:	d14a      	bne.n	800dfb0 <_printf_i+0x1f8>
 800df1a:	f04f 30ff 	mov.w	r0, #4294967295
 800df1e:	b004      	add	sp, #16
 800df20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df24:	6823      	ldr	r3, [r4, #0]
 800df26:	f043 0320 	orr.w	r3, r3, #32
 800df2a:	6023      	str	r3, [r4, #0]
 800df2c:	2778      	movs	r7, #120	; 0x78
 800df2e:	4832      	ldr	r0, [pc, #200]	; (800dff8 <_printf_i+0x240>)
 800df30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	6829      	ldr	r1, [r5, #0]
 800df38:	061f      	lsls	r7, r3, #24
 800df3a:	f851 6b04 	ldr.w	r6, [r1], #4
 800df3e:	d402      	bmi.n	800df46 <_printf_i+0x18e>
 800df40:	065f      	lsls	r7, r3, #25
 800df42:	bf48      	it	mi
 800df44:	b2b6      	uxthmi	r6, r6
 800df46:	07df      	lsls	r7, r3, #31
 800df48:	bf48      	it	mi
 800df4a:	f043 0320 	orrmi.w	r3, r3, #32
 800df4e:	6029      	str	r1, [r5, #0]
 800df50:	bf48      	it	mi
 800df52:	6023      	strmi	r3, [r4, #0]
 800df54:	b91e      	cbnz	r6, 800df5e <_printf_i+0x1a6>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	f023 0320 	bic.w	r3, r3, #32
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	2310      	movs	r3, #16
 800df60:	e7a6      	b.n	800deb0 <_printf_i+0xf8>
 800df62:	4824      	ldr	r0, [pc, #144]	; (800dff4 <_printf_i+0x23c>)
 800df64:	e7e4      	b.n	800df30 <_printf_i+0x178>
 800df66:	4615      	mov	r5, r2
 800df68:	e7bd      	b.n	800dee6 <_printf_i+0x12e>
 800df6a:	682b      	ldr	r3, [r5, #0]
 800df6c:	6826      	ldr	r6, [r4, #0]
 800df6e:	1d18      	adds	r0, r3, #4
 800df70:	6961      	ldr	r1, [r4, #20]
 800df72:	6028      	str	r0, [r5, #0]
 800df74:	0635      	lsls	r5, r6, #24
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	d501      	bpl.n	800df7e <_printf_i+0x1c6>
 800df7a:	6019      	str	r1, [r3, #0]
 800df7c:	e002      	b.n	800df84 <_printf_i+0x1cc>
 800df7e:	0670      	lsls	r0, r6, #25
 800df80:	d5fb      	bpl.n	800df7a <_printf_i+0x1c2>
 800df82:	8019      	strh	r1, [r3, #0]
 800df84:	2300      	movs	r3, #0
 800df86:	4615      	mov	r5, r2
 800df88:	6123      	str	r3, [r4, #16]
 800df8a:	e7bc      	b.n	800df06 <_printf_i+0x14e>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	2100      	movs	r1, #0
 800df90:	1d1a      	adds	r2, r3, #4
 800df92:	602a      	str	r2, [r5, #0]
 800df94:	681d      	ldr	r5, [r3, #0]
 800df96:	6862      	ldr	r2, [r4, #4]
 800df98:	4628      	mov	r0, r5
 800df9a:	f000 f977 	bl	800e28c <memchr>
 800df9e:	b108      	cbz	r0, 800dfa4 <_printf_i+0x1ec>
 800dfa0:	1b40      	subs	r0, r0, r5
 800dfa2:	6060      	str	r0, [r4, #4]
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	6123      	str	r3, [r4, #16]
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfae:	e7aa      	b.n	800df06 <_printf_i+0x14e>
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	4649      	mov	r1, r9
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	6923      	ldr	r3, [r4, #16]
 800dfb8:	47d0      	blx	sl
 800dfba:	3001      	adds	r0, #1
 800dfbc:	d0ad      	beq.n	800df1a <_printf_i+0x162>
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	079b      	lsls	r3, r3, #30
 800dfc2:	d413      	bmi.n	800dfec <_printf_i+0x234>
 800dfc4:	68e0      	ldr	r0, [r4, #12]
 800dfc6:	9b03      	ldr	r3, [sp, #12]
 800dfc8:	4298      	cmp	r0, r3
 800dfca:	bfb8      	it	lt
 800dfcc:	4618      	movlt	r0, r3
 800dfce:	e7a6      	b.n	800df1e <_printf_i+0x166>
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	4632      	mov	r2, r6
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	4640      	mov	r0, r8
 800dfd8:	47d0      	blx	sl
 800dfda:	3001      	adds	r0, #1
 800dfdc:	d09d      	beq.n	800df1a <_printf_i+0x162>
 800dfde:	3501      	adds	r5, #1
 800dfe0:	68e3      	ldr	r3, [r4, #12]
 800dfe2:	9903      	ldr	r1, [sp, #12]
 800dfe4:	1a5b      	subs	r3, r3, r1
 800dfe6:	42ab      	cmp	r3, r5
 800dfe8:	dcf2      	bgt.n	800dfd0 <_printf_i+0x218>
 800dfea:	e7eb      	b.n	800dfc4 <_printf_i+0x20c>
 800dfec:	2500      	movs	r5, #0
 800dfee:	f104 0619 	add.w	r6, r4, #25
 800dff2:	e7f5      	b.n	800dfe0 <_printf_i+0x228>
 800dff4:	0800fd2d 	.word	0x0800fd2d
 800dff8:	0800fd3e 	.word	0x0800fd3e

0800dffc <__sflush_r>:
 800dffc:	898a      	ldrh	r2, [r1, #12]
 800dffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e000:	4605      	mov	r5, r0
 800e002:	0710      	lsls	r0, r2, #28
 800e004:	460c      	mov	r4, r1
 800e006:	d457      	bmi.n	800e0b8 <__sflush_r+0xbc>
 800e008:	684b      	ldr	r3, [r1, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	dc04      	bgt.n	800e018 <__sflush_r+0x1c>
 800e00e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e010:	2b00      	cmp	r3, #0
 800e012:	dc01      	bgt.n	800e018 <__sflush_r+0x1c>
 800e014:	2000      	movs	r0, #0
 800e016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e01a:	2e00      	cmp	r6, #0
 800e01c:	d0fa      	beq.n	800e014 <__sflush_r+0x18>
 800e01e:	2300      	movs	r3, #0
 800e020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e024:	682f      	ldr	r7, [r5, #0]
 800e026:	6a21      	ldr	r1, [r4, #32]
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	d032      	beq.n	800e092 <__sflush_r+0x96>
 800e02c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	075a      	lsls	r2, r3, #29
 800e032:	d505      	bpl.n	800e040 <__sflush_r+0x44>
 800e034:	6863      	ldr	r3, [r4, #4]
 800e036:	1ac0      	subs	r0, r0, r3
 800e038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e03a:	b10b      	cbz	r3, 800e040 <__sflush_r+0x44>
 800e03c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e03e:	1ac0      	subs	r0, r0, r3
 800e040:	2300      	movs	r3, #0
 800e042:	4602      	mov	r2, r0
 800e044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e046:	4628      	mov	r0, r5
 800e048:	6a21      	ldr	r1, [r4, #32]
 800e04a:	47b0      	blx	r6
 800e04c:	1c43      	adds	r3, r0, #1
 800e04e:	89a3      	ldrh	r3, [r4, #12]
 800e050:	d106      	bne.n	800e060 <__sflush_r+0x64>
 800e052:	6829      	ldr	r1, [r5, #0]
 800e054:	291d      	cmp	r1, #29
 800e056:	d82b      	bhi.n	800e0b0 <__sflush_r+0xb4>
 800e058:	4a28      	ldr	r2, [pc, #160]	; (800e0fc <__sflush_r+0x100>)
 800e05a:	410a      	asrs	r2, r1
 800e05c:	07d6      	lsls	r6, r2, #31
 800e05e:	d427      	bmi.n	800e0b0 <__sflush_r+0xb4>
 800e060:	2200      	movs	r2, #0
 800e062:	6062      	str	r2, [r4, #4]
 800e064:	6922      	ldr	r2, [r4, #16]
 800e066:	04d9      	lsls	r1, r3, #19
 800e068:	6022      	str	r2, [r4, #0]
 800e06a:	d504      	bpl.n	800e076 <__sflush_r+0x7a>
 800e06c:	1c42      	adds	r2, r0, #1
 800e06e:	d101      	bne.n	800e074 <__sflush_r+0x78>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	b903      	cbnz	r3, 800e076 <__sflush_r+0x7a>
 800e074:	6560      	str	r0, [r4, #84]	; 0x54
 800e076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e078:	602f      	str	r7, [r5, #0]
 800e07a:	2900      	cmp	r1, #0
 800e07c:	d0ca      	beq.n	800e014 <__sflush_r+0x18>
 800e07e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e082:	4299      	cmp	r1, r3
 800e084:	d002      	beq.n	800e08c <__sflush_r+0x90>
 800e086:	4628      	mov	r0, r5
 800e088:	f7fe fb24 	bl	800c6d4 <_free_r>
 800e08c:	2000      	movs	r0, #0
 800e08e:	6360      	str	r0, [r4, #52]	; 0x34
 800e090:	e7c1      	b.n	800e016 <__sflush_r+0x1a>
 800e092:	2301      	movs	r3, #1
 800e094:	4628      	mov	r0, r5
 800e096:	47b0      	blx	r6
 800e098:	1c41      	adds	r1, r0, #1
 800e09a:	d1c8      	bne.n	800e02e <__sflush_r+0x32>
 800e09c:	682b      	ldr	r3, [r5, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0c5      	beq.n	800e02e <__sflush_r+0x32>
 800e0a2:	2b1d      	cmp	r3, #29
 800e0a4:	d001      	beq.n	800e0aa <__sflush_r+0xae>
 800e0a6:	2b16      	cmp	r3, #22
 800e0a8:	d101      	bne.n	800e0ae <__sflush_r+0xb2>
 800e0aa:	602f      	str	r7, [r5, #0]
 800e0ac:	e7b2      	b.n	800e014 <__sflush_r+0x18>
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b4:	81a3      	strh	r3, [r4, #12]
 800e0b6:	e7ae      	b.n	800e016 <__sflush_r+0x1a>
 800e0b8:	690f      	ldr	r7, [r1, #16]
 800e0ba:	2f00      	cmp	r7, #0
 800e0bc:	d0aa      	beq.n	800e014 <__sflush_r+0x18>
 800e0be:	0793      	lsls	r3, r2, #30
 800e0c0:	bf18      	it	ne
 800e0c2:	2300      	movne	r3, #0
 800e0c4:	680e      	ldr	r6, [r1, #0]
 800e0c6:	bf08      	it	eq
 800e0c8:	694b      	ldreq	r3, [r1, #20]
 800e0ca:	1bf6      	subs	r6, r6, r7
 800e0cc:	600f      	str	r7, [r1, #0]
 800e0ce:	608b      	str	r3, [r1, #8]
 800e0d0:	2e00      	cmp	r6, #0
 800e0d2:	dd9f      	ble.n	800e014 <__sflush_r+0x18>
 800e0d4:	4633      	mov	r3, r6
 800e0d6:	463a      	mov	r2, r7
 800e0d8:	4628      	mov	r0, r5
 800e0da:	6a21      	ldr	r1, [r4, #32]
 800e0dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e0e0:	47e0      	blx	ip
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	dc06      	bgt.n	800e0f4 <__sflush_r+0xf8>
 800e0e6:	89a3      	ldrh	r3, [r4, #12]
 800e0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f0:	81a3      	strh	r3, [r4, #12]
 800e0f2:	e790      	b.n	800e016 <__sflush_r+0x1a>
 800e0f4:	4407      	add	r7, r0
 800e0f6:	1a36      	subs	r6, r6, r0
 800e0f8:	e7ea      	b.n	800e0d0 <__sflush_r+0xd4>
 800e0fa:	bf00      	nop
 800e0fc:	dfbffffe 	.word	0xdfbffffe

0800e100 <_fflush_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	690b      	ldr	r3, [r1, #16]
 800e104:	4605      	mov	r5, r0
 800e106:	460c      	mov	r4, r1
 800e108:	b913      	cbnz	r3, 800e110 <_fflush_r+0x10>
 800e10a:	2500      	movs	r5, #0
 800e10c:	4628      	mov	r0, r5
 800e10e:	bd38      	pop	{r3, r4, r5, pc}
 800e110:	b118      	cbz	r0, 800e11a <_fflush_r+0x1a>
 800e112:	6a03      	ldr	r3, [r0, #32]
 800e114:	b90b      	cbnz	r3, 800e11a <_fflush_r+0x1a>
 800e116:	f7fe f8a9 	bl	800c26c <__sinit>
 800e11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0f3      	beq.n	800e10a <_fflush_r+0xa>
 800e122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e124:	07d0      	lsls	r0, r2, #31
 800e126:	d404      	bmi.n	800e132 <_fflush_r+0x32>
 800e128:	0599      	lsls	r1, r3, #22
 800e12a:	d402      	bmi.n	800e132 <_fflush_r+0x32>
 800e12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e12e:	f7fe fabb 	bl	800c6a8 <__retarget_lock_acquire_recursive>
 800e132:	4628      	mov	r0, r5
 800e134:	4621      	mov	r1, r4
 800e136:	f7ff ff61 	bl	800dffc <__sflush_r>
 800e13a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e13c:	4605      	mov	r5, r0
 800e13e:	07da      	lsls	r2, r3, #31
 800e140:	d4e4      	bmi.n	800e10c <_fflush_r+0xc>
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	059b      	lsls	r3, r3, #22
 800e146:	d4e1      	bmi.n	800e10c <_fflush_r+0xc>
 800e148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14a:	f7fe faae 	bl	800c6aa <__retarget_lock_release_recursive>
 800e14e:	e7dd      	b.n	800e10c <_fflush_r+0xc>

0800e150 <__swhatbuf_r>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	460c      	mov	r4, r1
 800e154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e158:	4615      	mov	r5, r2
 800e15a:	2900      	cmp	r1, #0
 800e15c:	461e      	mov	r6, r3
 800e15e:	b096      	sub	sp, #88	; 0x58
 800e160:	da0c      	bge.n	800e17c <__swhatbuf_r+0x2c>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	2100      	movs	r1, #0
 800e166:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e16a:	bf0c      	ite	eq
 800e16c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e170:	2340      	movne	r3, #64	; 0x40
 800e172:	2000      	movs	r0, #0
 800e174:	6031      	str	r1, [r6, #0]
 800e176:	602b      	str	r3, [r5, #0]
 800e178:	b016      	add	sp, #88	; 0x58
 800e17a:	bd70      	pop	{r4, r5, r6, pc}
 800e17c:	466a      	mov	r2, sp
 800e17e:	f000 f863 	bl	800e248 <_fstat_r>
 800e182:	2800      	cmp	r0, #0
 800e184:	dbed      	blt.n	800e162 <__swhatbuf_r+0x12>
 800e186:	9901      	ldr	r1, [sp, #4]
 800e188:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e18c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e190:	4259      	negs	r1, r3
 800e192:	4159      	adcs	r1, r3
 800e194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e198:	e7eb      	b.n	800e172 <__swhatbuf_r+0x22>

0800e19a <__smakebuf_r>:
 800e19a:	898b      	ldrh	r3, [r1, #12]
 800e19c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e19e:	079d      	lsls	r5, r3, #30
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	d507      	bpl.n	800e1b6 <__smakebuf_r+0x1c>
 800e1a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1aa:	6023      	str	r3, [r4, #0]
 800e1ac:	6123      	str	r3, [r4, #16]
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	6163      	str	r3, [r4, #20]
 800e1b2:	b002      	add	sp, #8
 800e1b4:	bd70      	pop	{r4, r5, r6, pc}
 800e1b6:	466a      	mov	r2, sp
 800e1b8:	ab01      	add	r3, sp, #4
 800e1ba:	f7ff ffc9 	bl	800e150 <__swhatbuf_r>
 800e1be:	9900      	ldr	r1, [sp, #0]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f7fd f8f2 	bl	800b3ac <_malloc_r>
 800e1c8:	b948      	cbnz	r0, 800e1de <__smakebuf_r+0x44>
 800e1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ce:	059a      	lsls	r2, r3, #22
 800e1d0:	d4ef      	bmi.n	800e1b2 <__smakebuf_r+0x18>
 800e1d2:	f023 0303 	bic.w	r3, r3, #3
 800e1d6:	f043 0302 	orr.w	r3, r3, #2
 800e1da:	81a3      	strh	r3, [r4, #12]
 800e1dc:	e7e3      	b.n	800e1a6 <__smakebuf_r+0xc>
 800e1de:	89a3      	ldrh	r3, [r4, #12]
 800e1e0:	6020      	str	r0, [r4, #0]
 800e1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1e6:	81a3      	strh	r3, [r4, #12]
 800e1e8:	9b00      	ldr	r3, [sp, #0]
 800e1ea:	6120      	str	r0, [r4, #16]
 800e1ec:	6163      	str	r3, [r4, #20]
 800e1ee:	9b01      	ldr	r3, [sp, #4]
 800e1f0:	b15b      	cbz	r3, 800e20a <__smakebuf_r+0x70>
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1f8:	f000 f838 	bl	800e26c <_isatty_r>
 800e1fc:	b128      	cbz	r0, 800e20a <__smakebuf_r+0x70>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	f023 0303 	bic.w	r3, r3, #3
 800e204:	f043 0301 	orr.w	r3, r3, #1
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	431d      	orrs	r5, r3
 800e20e:	81a5      	strh	r5, [r4, #12]
 800e210:	e7cf      	b.n	800e1b2 <__smakebuf_r+0x18>

0800e212 <memmove>:
 800e212:	4288      	cmp	r0, r1
 800e214:	b510      	push	{r4, lr}
 800e216:	eb01 0402 	add.w	r4, r1, r2
 800e21a:	d902      	bls.n	800e222 <memmove+0x10>
 800e21c:	4284      	cmp	r4, r0
 800e21e:	4623      	mov	r3, r4
 800e220:	d807      	bhi.n	800e232 <memmove+0x20>
 800e222:	1e43      	subs	r3, r0, #1
 800e224:	42a1      	cmp	r1, r4
 800e226:	d008      	beq.n	800e23a <memmove+0x28>
 800e228:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e22c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e230:	e7f8      	b.n	800e224 <memmove+0x12>
 800e232:	4601      	mov	r1, r0
 800e234:	4402      	add	r2, r0
 800e236:	428a      	cmp	r2, r1
 800e238:	d100      	bne.n	800e23c <memmove+0x2a>
 800e23a:	bd10      	pop	{r4, pc}
 800e23c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e240:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e244:	e7f7      	b.n	800e236 <memmove+0x24>
	...

0800e248 <_fstat_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	2300      	movs	r3, #0
 800e24c:	4d06      	ldr	r5, [pc, #24]	; (800e268 <_fstat_r+0x20>)
 800e24e:	4604      	mov	r4, r0
 800e250:	4608      	mov	r0, r1
 800e252:	4611      	mov	r1, r2
 800e254:	602b      	str	r3, [r5, #0]
 800e256:	f7f6 f942 	bl	80044de <_fstat>
 800e25a:	1c43      	adds	r3, r0, #1
 800e25c:	d102      	bne.n	800e264 <_fstat_r+0x1c>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	b103      	cbz	r3, 800e264 <_fstat_r+0x1c>
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	bd38      	pop	{r3, r4, r5, pc}
 800e266:	bf00      	nop
 800e268:	2000360c 	.word	0x2000360c

0800e26c <_isatty_r>:
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	2300      	movs	r3, #0
 800e270:	4d05      	ldr	r5, [pc, #20]	; (800e288 <_isatty_r+0x1c>)
 800e272:	4604      	mov	r4, r0
 800e274:	4608      	mov	r0, r1
 800e276:	602b      	str	r3, [r5, #0]
 800e278:	f7f6 f940 	bl	80044fc <_isatty>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	d102      	bne.n	800e286 <_isatty_r+0x1a>
 800e280:	682b      	ldr	r3, [r5, #0]
 800e282:	b103      	cbz	r3, 800e286 <_isatty_r+0x1a>
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	2000360c 	.word	0x2000360c

0800e28c <memchr>:
 800e28c:	4603      	mov	r3, r0
 800e28e:	b510      	push	{r4, lr}
 800e290:	b2c9      	uxtb	r1, r1
 800e292:	4402      	add	r2, r0
 800e294:	4293      	cmp	r3, r2
 800e296:	4618      	mov	r0, r3
 800e298:	d101      	bne.n	800e29e <memchr+0x12>
 800e29a:	2000      	movs	r0, #0
 800e29c:	e003      	b.n	800e2a6 <memchr+0x1a>
 800e29e:	7804      	ldrb	r4, [r0, #0]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	428c      	cmp	r4, r1
 800e2a4:	d1f6      	bne.n	800e294 <memchr+0x8>
 800e2a6:	bd10      	pop	{r4, pc}

0800e2a8 <__assert_func>:
 800e2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2aa:	4614      	mov	r4, r2
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <__assert_func+0x2c>)
 800e2b0:	4605      	mov	r5, r0
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68d8      	ldr	r0, [r3, #12]
 800e2b6:	b14c      	cbz	r4, 800e2cc <__assert_func+0x24>
 800e2b8:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <__assert_func+0x30>)
 800e2ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2be:	9100      	str	r1, [sp, #0]
 800e2c0:	462b      	mov	r3, r5
 800e2c2:	4906      	ldr	r1, [pc, #24]	; (800e2dc <__assert_func+0x34>)
 800e2c4:	f000 f822 	bl	800e30c <fiprintf>
 800e2c8:	f000 f832 	bl	800e330 <abort>
 800e2cc:	4b04      	ldr	r3, [pc, #16]	; (800e2e0 <__assert_func+0x38>)
 800e2ce:	461c      	mov	r4, r3
 800e2d0:	e7f3      	b.n	800e2ba <__assert_func+0x12>
 800e2d2:	bf00      	nop
 800e2d4:	200001fc 	.word	0x200001fc
 800e2d8:	0800fd4f 	.word	0x0800fd4f
 800e2dc:	0800fd5c 	.word	0x0800fd5c
 800e2e0:	0800fd8a 	.word	0x0800fd8a

0800e2e4 <_calloc_r>:
 800e2e4:	b570      	push	{r4, r5, r6, lr}
 800e2e6:	fba1 5402 	umull	r5, r4, r1, r2
 800e2ea:	b934      	cbnz	r4, 800e2fa <_calloc_r+0x16>
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	f7fd f85d 	bl	800b3ac <_malloc_r>
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	b928      	cbnz	r0, 800e302 <_calloc_r+0x1e>
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	bd70      	pop	{r4, r5, r6, pc}
 800e2fa:	220c      	movs	r2, #12
 800e2fc:	2600      	movs	r6, #0
 800e2fe:	6002      	str	r2, [r0, #0]
 800e300:	e7f9      	b.n	800e2f6 <_calloc_r+0x12>
 800e302:	462a      	mov	r2, r5
 800e304:	4621      	mov	r1, r4
 800e306:	f7fe f8df 	bl	800c4c8 <memset>
 800e30a:	e7f4      	b.n	800e2f6 <_calloc_r+0x12>

0800e30c <fiprintf>:
 800e30c:	b40e      	push	{r1, r2, r3}
 800e30e:	b503      	push	{r0, r1, lr}
 800e310:	4601      	mov	r1, r0
 800e312:	ab03      	add	r3, sp, #12
 800e314:	4805      	ldr	r0, [pc, #20]	; (800e32c <fiprintf+0x20>)
 800e316:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31a:	6800      	ldr	r0, [r0, #0]
 800e31c:	9301      	str	r3, [sp, #4]
 800e31e:	f7ff fbbf 	bl	800daa0 <_vfiprintf_r>
 800e322:	b002      	add	sp, #8
 800e324:	f85d eb04 	ldr.w	lr, [sp], #4
 800e328:	b003      	add	sp, #12
 800e32a:	4770      	bx	lr
 800e32c:	200001fc 	.word	0x200001fc

0800e330 <abort>:
 800e330:	2006      	movs	r0, #6
 800e332:	b508      	push	{r3, lr}
 800e334:	f000 f82c 	bl	800e390 <raise>
 800e338:	2001      	movs	r0, #1
 800e33a:	f7f6 f89e 	bl	800447a <_exit>

0800e33e <_raise_r>:
 800e33e:	291f      	cmp	r1, #31
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	4604      	mov	r4, r0
 800e344:	460d      	mov	r5, r1
 800e346:	d904      	bls.n	800e352 <_raise_r+0x14>
 800e348:	2316      	movs	r3, #22
 800e34a:	6003      	str	r3, [r0, #0]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e354:	b112      	cbz	r2, 800e35c <_raise_r+0x1e>
 800e356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e35a:	b94b      	cbnz	r3, 800e370 <_raise_r+0x32>
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 f831 	bl	800e3c4 <_getpid_r>
 800e362:	462a      	mov	r2, r5
 800e364:	4601      	mov	r1, r0
 800e366:	4620      	mov	r0, r4
 800e368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e36c:	f000 b818 	b.w	800e3a0 <_kill_r>
 800e370:	2b01      	cmp	r3, #1
 800e372:	d00a      	beq.n	800e38a <_raise_r+0x4c>
 800e374:	1c59      	adds	r1, r3, #1
 800e376:	d103      	bne.n	800e380 <_raise_r+0x42>
 800e378:	2316      	movs	r3, #22
 800e37a:	6003      	str	r3, [r0, #0]
 800e37c:	2001      	movs	r0, #1
 800e37e:	e7e7      	b.n	800e350 <_raise_r+0x12>
 800e380:	2400      	movs	r4, #0
 800e382:	4628      	mov	r0, r5
 800e384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e388:	4798      	blx	r3
 800e38a:	2000      	movs	r0, #0
 800e38c:	e7e0      	b.n	800e350 <_raise_r+0x12>
	...

0800e390 <raise>:
 800e390:	4b02      	ldr	r3, [pc, #8]	; (800e39c <raise+0xc>)
 800e392:	4601      	mov	r1, r0
 800e394:	6818      	ldr	r0, [r3, #0]
 800e396:	f7ff bfd2 	b.w	800e33e <_raise_r>
 800e39a:	bf00      	nop
 800e39c:	200001fc 	.word	0x200001fc

0800e3a0 <_kill_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	4d06      	ldr	r5, [pc, #24]	; (800e3c0 <_kill_r+0x20>)
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	602b      	str	r3, [r5, #0]
 800e3ae:	f7f6 f854 	bl	800445a <_kill>
 800e3b2:	1c43      	adds	r3, r0, #1
 800e3b4:	d102      	bne.n	800e3bc <_kill_r+0x1c>
 800e3b6:	682b      	ldr	r3, [r5, #0]
 800e3b8:	b103      	cbz	r3, 800e3bc <_kill_r+0x1c>
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	bd38      	pop	{r3, r4, r5, pc}
 800e3be:	bf00      	nop
 800e3c0:	2000360c 	.word	0x2000360c

0800e3c4 <_getpid_r>:
 800e3c4:	f7f6 b842 	b.w	800444c <_getpid>

0800e3c8 <cos>:
 800e3c8:	b530      	push	{r4, r5, lr}
 800e3ca:	4a20      	ldr	r2, [pc, #128]	; (800e44c <cos+0x84>)
 800e3cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	b087      	sub	sp, #28
 800e3d4:	dc06      	bgt.n	800e3e4 <cos+0x1c>
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	b007      	add	sp, #28
 800e3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3e0:	f000 b866 	b.w	800e4b0 <__kernel_cos>
 800e3e4:	4a1a      	ldr	r2, [pc, #104]	; (800e450 <cos+0x88>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	dd05      	ble.n	800e3f6 <cos+0x2e>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	f7f1 ff35 	bl	800025c <__aeabi_dsub>
 800e3f2:	b007      	add	sp, #28
 800e3f4:	bd30      	pop	{r4, r5, pc}
 800e3f6:	aa02      	add	r2, sp, #8
 800e3f8:	f000 fbce 	bl	800eb98 <__ieee754_rem_pio2>
 800e3fc:	f000 0003 	and.w	r0, r0, #3
 800e400:	2801      	cmp	r0, #1
 800e402:	d009      	beq.n	800e418 <cos+0x50>
 800e404:	2802      	cmp	r0, #2
 800e406:	d011      	beq.n	800e42c <cos+0x64>
 800e408:	b9b8      	cbnz	r0, 800e43a <cos+0x72>
 800e40a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e412:	f000 f84d 	bl	800e4b0 <__kernel_cos>
 800e416:	e7ec      	b.n	800e3f2 <cos+0x2a>
 800e418:	9000      	str	r0, [sp, #0]
 800e41a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e422:	f000 f905 	bl	800e630 <__kernel_sin>
 800e426:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e42a:	e7e2      	b.n	800e3f2 <cos+0x2a>
 800e42c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e434:	f000 f83c 	bl	800e4b0 <__kernel_cos>
 800e438:	e7f5      	b.n	800e426 <cos+0x5e>
 800e43a:	2301      	movs	r3, #1
 800e43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e446:	f000 f8f3 	bl	800e630 <__kernel_sin>
 800e44a:	e7d2      	b.n	800e3f2 <cos+0x2a>
 800e44c:	3fe921fb 	.word	0x3fe921fb
 800e450:	7fefffff 	.word	0x7fefffff

0800e454 <fabs>:
 800e454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e458:	4619      	mov	r1, r3
 800e45a:	4770      	bx	lr

0800e45c <tan>:
 800e45c:	b530      	push	{r4, r5, lr}
 800e45e:	4a12      	ldr	r2, [pc, #72]	; (800e4a8 <tan+0x4c>)
 800e460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e464:	4293      	cmp	r3, r2
 800e466:	b087      	sub	sp, #28
 800e468:	dc06      	bgt.n	800e478 <tan+0x1c>
 800e46a:	2301      	movs	r3, #1
 800e46c:	2200      	movs	r2, #0
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	2300      	movs	r3, #0
 800e472:	f000 f995 	bl	800e7a0 <__kernel_tan>
 800e476:	e006      	b.n	800e486 <tan+0x2a>
 800e478:	4a0c      	ldr	r2, [pc, #48]	; (800e4ac <tan+0x50>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	dd05      	ble.n	800e48a <tan+0x2e>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	f7f1 feeb 	bl	800025c <__aeabi_dsub>
 800e486:	b007      	add	sp, #28
 800e488:	bd30      	pop	{r4, r5, pc}
 800e48a:	aa02      	add	r2, sp, #8
 800e48c:	f000 fb84 	bl	800eb98 <__ieee754_rem_pio2>
 800e490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e494:	0040      	lsls	r0, r0, #1
 800e496:	f000 0002 	and.w	r0, r0, #2
 800e49a:	f1c0 0001 	rsb	r0, r0, #1
 800e49e:	9000      	str	r0, [sp, #0]
 800e4a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4a4:	e7e5      	b.n	800e472 <tan+0x16>
 800e4a6:	bf00      	nop
 800e4a8:	3fe921fb 	.word	0x3fe921fb
 800e4ac:	7fefffff 	.word	0x7fefffff

0800e4b0 <__kernel_cos>:
 800e4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e4b8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e4bc:	4680      	mov	r8, r0
 800e4be:	460f      	mov	r7, r1
 800e4c0:	e9cd 2300 	strd	r2, r3, [sp]
 800e4c4:	da04      	bge.n	800e4d0 <__kernel_cos+0x20>
 800e4c6:	f7f2 fb1b 	bl	8000b00 <__aeabi_d2iz>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	f000 8086 	beq.w	800e5dc <__kernel_cos+0x12c>
 800e4d0:	4642      	mov	r2, r8
 800e4d2:	463b      	mov	r3, r7
 800e4d4:	4640      	mov	r0, r8
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 f878 	bl	80005cc <__aeabi_dmul>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	4b4e      	ldr	r3, [pc, #312]	; (800e618 <__kernel_cos+0x168>)
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	460d      	mov	r5, r1
 800e4e4:	f7f2 f872 	bl	80005cc <__aeabi_dmul>
 800e4e8:	a33f      	add	r3, pc, #252	; (adr r3, 800e5e8 <__kernel_cos+0x138>)
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	4682      	mov	sl, r0
 800e4f0:	468b      	mov	fp, r1
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	f7f2 f869 	bl	80005cc <__aeabi_dmul>
 800e4fa:	a33d      	add	r3, pc, #244	; (adr r3, 800e5f0 <__kernel_cos+0x140>)
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	f7f1 feae 	bl	8000260 <__adddf3>
 800e504:	4622      	mov	r2, r4
 800e506:	462b      	mov	r3, r5
 800e508:	f7f2 f860 	bl	80005cc <__aeabi_dmul>
 800e50c:	a33a      	add	r3, pc, #232	; (adr r3, 800e5f8 <__kernel_cos+0x148>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	f7f1 fea3 	bl	800025c <__aeabi_dsub>
 800e516:	4622      	mov	r2, r4
 800e518:	462b      	mov	r3, r5
 800e51a:	f7f2 f857 	bl	80005cc <__aeabi_dmul>
 800e51e:	a338      	add	r3, pc, #224	; (adr r3, 800e600 <__kernel_cos+0x150>)
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	f7f1 fe9c 	bl	8000260 <__adddf3>
 800e528:	4622      	mov	r2, r4
 800e52a:	462b      	mov	r3, r5
 800e52c:	f7f2 f84e 	bl	80005cc <__aeabi_dmul>
 800e530:	a335      	add	r3, pc, #212	; (adr r3, 800e608 <__kernel_cos+0x158>)
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	f7f1 fe91 	bl	800025c <__aeabi_dsub>
 800e53a:	4622      	mov	r2, r4
 800e53c:	462b      	mov	r3, r5
 800e53e:	f7f2 f845 	bl	80005cc <__aeabi_dmul>
 800e542:	a333      	add	r3, pc, #204	; (adr r3, 800e610 <__kernel_cos+0x160>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f7f1 fe8a 	bl	8000260 <__adddf3>
 800e54c:	4622      	mov	r2, r4
 800e54e:	462b      	mov	r3, r5
 800e550:	f7f2 f83c 	bl	80005cc <__aeabi_dmul>
 800e554:	4622      	mov	r2, r4
 800e556:	462b      	mov	r3, r5
 800e558:	f7f2 f838 	bl	80005cc <__aeabi_dmul>
 800e55c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e560:	4604      	mov	r4, r0
 800e562:	460d      	mov	r5, r1
 800e564:	4640      	mov	r0, r8
 800e566:	4639      	mov	r1, r7
 800e568:	f7f2 f830 	bl	80005cc <__aeabi_dmul>
 800e56c:	460b      	mov	r3, r1
 800e56e:	4602      	mov	r2, r0
 800e570:	4629      	mov	r1, r5
 800e572:	4620      	mov	r0, r4
 800e574:	f7f1 fe72 	bl	800025c <__aeabi_dsub>
 800e578:	4b28      	ldr	r3, [pc, #160]	; (800e61c <__kernel_cos+0x16c>)
 800e57a:	4680      	mov	r8, r0
 800e57c:	429e      	cmp	r6, r3
 800e57e:	4689      	mov	r9, r1
 800e580:	dc0e      	bgt.n	800e5a0 <__kernel_cos+0xf0>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4650      	mov	r0, sl
 800e588:	4659      	mov	r1, fp
 800e58a:	f7f1 fe67 	bl	800025c <__aeabi_dsub>
 800e58e:	4602      	mov	r2, r0
 800e590:	2000      	movs	r0, #0
 800e592:	460b      	mov	r3, r1
 800e594:	4922      	ldr	r1, [pc, #136]	; (800e620 <__kernel_cos+0x170>)
 800e596:	f7f1 fe61 	bl	800025c <__aeabi_dsub>
 800e59a:	b003      	add	sp, #12
 800e59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a0:	2400      	movs	r4, #0
 800e5a2:	4b20      	ldr	r3, [pc, #128]	; (800e624 <__kernel_cos+0x174>)
 800e5a4:	4622      	mov	r2, r4
 800e5a6:	429e      	cmp	r6, r3
 800e5a8:	bfcc      	ite	gt
 800e5aa:	4d1f      	ldrgt	r5, [pc, #124]	; (800e628 <__kernel_cos+0x178>)
 800e5ac:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e5b0:	462b      	mov	r3, r5
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	491a      	ldr	r1, [pc, #104]	; (800e620 <__kernel_cos+0x170>)
 800e5b6:	f7f1 fe51 	bl	800025c <__aeabi_dsub>
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	4606      	mov	r6, r0
 800e5be:	460f      	mov	r7, r1
 800e5c0:	462b      	mov	r3, r5
 800e5c2:	4650      	mov	r0, sl
 800e5c4:	4659      	mov	r1, fp
 800e5c6:	f7f1 fe49 	bl	800025c <__aeabi_dsub>
 800e5ca:	4642      	mov	r2, r8
 800e5cc:	464b      	mov	r3, r9
 800e5ce:	f7f1 fe45 	bl	800025c <__aeabi_dsub>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	4639      	mov	r1, r7
 800e5da:	e7dc      	b.n	800e596 <__kernel_cos+0xe6>
 800e5dc:	2000      	movs	r0, #0
 800e5de:	4910      	ldr	r1, [pc, #64]	; (800e620 <__kernel_cos+0x170>)
 800e5e0:	e7db      	b.n	800e59a <__kernel_cos+0xea>
 800e5e2:	bf00      	nop
 800e5e4:	f3af 8000 	nop.w
 800e5e8:	be8838d4 	.word	0xbe8838d4
 800e5ec:	bda8fae9 	.word	0xbda8fae9
 800e5f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e5f4:	3e21ee9e 	.word	0x3e21ee9e
 800e5f8:	809c52ad 	.word	0x809c52ad
 800e5fc:	3e927e4f 	.word	0x3e927e4f
 800e600:	19cb1590 	.word	0x19cb1590
 800e604:	3efa01a0 	.word	0x3efa01a0
 800e608:	16c15177 	.word	0x16c15177
 800e60c:	3f56c16c 	.word	0x3f56c16c
 800e610:	5555554c 	.word	0x5555554c
 800e614:	3fa55555 	.word	0x3fa55555
 800e618:	3fe00000 	.word	0x3fe00000
 800e61c:	3fd33332 	.word	0x3fd33332
 800e620:	3ff00000 	.word	0x3ff00000
 800e624:	3fe90000 	.word	0x3fe90000
 800e628:	3fd20000 	.word	0x3fd20000
 800e62c:	00000000 	.word	0x00000000

0800e630 <__kernel_sin>:
 800e630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e634:	b086      	sub	sp, #24
 800e636:	e9cd 2300 	strd	r2, r3, [sp]
 800e63a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e63e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e642:	4682      	mov	sl, r0
 800e644:	460c      	mov	r4, r1
 800e646:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e648:	da03      	bge.n	800e652 <__kernel_sin+0x22>
 800e64a:	f7f2 fa59 	bl	8000b00 <__aeabi_d2iz>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d050      	beq.n	800e6f4 <__kernel_sin+0xc4>
 800e652:	4652      	mov	r2, sl
 800e654:	4623      	mov	r3, r4
 800e656:	4650      	mov	r0, sl
 800e658:	4621      	mov	r1, r4
 800e65a:	f7f1 ffb7 	bl	80005cc <__aeabi_dmul>
 800e65e:	4606      	mov	r6, r0
 800e660:	460f      	mov	r7, r1
 800e662:	4602      	mov	r2, r0
 800e664:	460b      	mov	r3, r1
 800e666:	4650      	mov	r0, sl
 800e668:	4621      	mov	r1, r4
 800e66a:	f7f1 ffaf 	bl	80005cc <__aeabi_dmul>
 800e66e:	a33e      	add	r3, pc, #248	; (adr r3, 800e768 <__kernel_sin+0x138>)
 800e670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e674:	4680      	mov	r8, r0
 800e676:	4689      	mov	r9, r1
 800e678:	4630      	mov	r0, r6
 800e67a:	4639      	mov	r1, r7
 800e67c:	f7f1 ffa6 	bl	80005cc <__aeabi_dmul>
 800e680:	a33b      	add	r3, pc, #236	; (adr r3, 800e770 <__kernel_sin+0x140>)
 800e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e686:	f7f1 fde9 	bl	800025c <__aeabi_dsub>
 800e68a:	4632      	mov	r2, r6
 800e68c:	463b      	mov	r3, r7
 800e68e:	f7f1 ff9d 	bl	80005cc <__aeabi_dmul>
 800e692:	a339      	add	r3, pc, #228	; (adr r3, 800e778 <__kernel_sin+0x148>)
 800e694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e698:	f7f1 fde2 	bl	8000260 <__adddf3>
 800e69c:	4632      	mov	r2, r6
 800e69e:	463b      	mov	r3, r7
 800e6a0:	f7f1 ff94 	bl	80005cc <__aeabi_dmul>
 800e6a4:	a336      	add	r3, pc, #216	; (adr r3, 800e780 <__kernel_sin+0x150>)
 800e6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6aa:	f7f1 fdd7 	bl	800025c <__aeabi_dsub>
 800e6ae:	4632      	mov	r2, r6
 800e6b0:	463b      	mov	r3, r7
 800e6b2:	f7f1 ff8b 	bl	80005cc <__aeabi_dmul>
 800e6b6:	a334      	add	r3, pc, #208	; (adr r3, 800e788 <__kernel_sin+0x158>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	f7f1 fdd0 	bl	8000260 <__adddf3>
 800e6c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6c4:	b9dd      	cbnz	r5, 800e6fe <__kernel_sin+0xce>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	f7f1 ff7d 	bl	80005cc <__aeabi_dmul>
 800e6d2:	a32f      	add	r3, pc, #188	; (adr r3, 800e790 <__kernel_sin+0x160>)
 800e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d8:	f7f1 fdc0 	bl	800025c <__aeabi_dsub>
 800e6dc:	4642      	mov	r2, r8
 800e6de:	464b      	mov	r3, r9
 800e6e0:	f7f1 ff74 	bl	80005cc <__aeabi_dmul>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4650      	mov	r0, sl
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	f7f1 fdb8 	bl	8000260 <__adddf3>
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	4650      	mov	r0, sl
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	b006      	add	sp, #24
 800e6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fe:	2200      	movs	r2, #0
 800e700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e704:	4b24      	ldr	r3, [pc, #144]	; (800e798 <__kernel_sin+0x168>)
 800e706:	f7f1 ff61 	bl	80005cc <__aeabi_dmul>
 800e70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e70e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e712:	4640      	mov	r0, r8
 800e714:	4649      	mov	r1, r9
 800e716:	f7f1 ff59 	bl	80005cc <__aeabi_dmul>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e722:	f7f1 fd9b 	bl	800025c <__aeabi_dsub>
 800e726:	4632      	mov	r2, r6
 800e728:	463b      	mov	r3, r7
 800e72a:	f7f1 ff4f 	bl	80005cc <__aeabi_dmul>
 800e72e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e732:	f7f1 fd93 	bl	800025c <__aeabi_dsub>
 800e736:	a316      	add	r3, pc, #88	; (adr r3, 800e790 <__kernel_sin+0x160>)
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	4606      	mov	r6, r0
 800e73e:	460f      	mov	r7, r1
 800e740:	4640      	mov	r0, r8
 800e742:	4649      	mov	r1, r9
 800e744:	f7f1 ff42 	bl	80005cc <__aeabi_dmul>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	4630      	mov	r0, r6
 800e74e:	4639      	mov	r1, r7
 800e750:	f7f1 fd86 	bl	8000260 <__adddf3>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4650      	mov	r0, sl
 800e75a:	4621      	mov	r1, r4
 800e75c:	f7f1 fd7e 	bl	800025c <__aeabi_dsub>
 800e760:	e7c6      	b.n	800e6f0 <__kernel_sin+0xc0>
 800e762:	bf00      	nop
 800e764:	f3af 8000 	nop.w
 800e768:	5acfd57c 	.word	0x5acfd57c
 800e76c:	3de5d93a 	.word	0x3de5d93a
 800e770:	8a2b9ceb 	.word	0x8a2b9ceb
 800e774:	3e5ae5e6 	.word	0x3e5ae5e6
 800e778:	57b1fe7d 	.word	0x57b1fe7d
 800e77c:	3ec71de3 	.word	0x3ec71de3
 800e780:	19c161d5 	.word	0x19c161d5
 800e784:	3f2a01a0 	.word	0x3f2a01a0
 800e788:	1110f8a6 	.word	0x1110f8a6
 800e78c:	3f811111 	.word	0x3f811111
 800e790:	55555549 	.word	0x55555549
 800e794:	3fc55555 	.word	0x3fc55555
 800e798:	3fe00000 	.word	0x3fe00000
 800e79c:	00000000 	.word	0x00000000

0800e7a0 <__kernel_tan>:
 800e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a4:	b08b      	sub	sp, #44	; 0x2c
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	4bd9      	ldr	r3, [pc, #868]	; (800eb10 <__kernel_tan+0x370>)
 800e7aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e7ae:	429e      	cmp	r6, r3
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	460d      	mov	r5, r1
 800e7b4:	4682      	mov	sl, r0
 800e7b6:	468b      	mov	fp, r1
 800e7b8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e7ba:	9202      	str	r2, [sp, #8]
 800e7bc:	9107      	str	r1, [sp, #28]
 800e7be:	dc58      	bgt.n	800e872 <__kernel_tan+0xd2>
 800e7c0:	f7f2 f99e 	bl	8000b00 <__aeabi_d2iz>
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d178      	bne.n	800e8bc <__kernel_tan+0x11c>
 800e7ca:	1c7b      	adds	r3, r7, #1
 800e7cc:	4323      	orrs	r3, r4
 800e7ce:	4333      	orrs	r3, r6
 800e7d0:	d110      	bne.n	800e7f4 <__kernel_tan+0x54>
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	4659      	mov	r1, fp
 800e7d6:	f7ff fe3d 	bl	800e454 <fabs>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	2000      	movs	r0, #0
 800e7e0:	49cc      	ldr	r1, [pc, #816]	; (800eb14 <__kernel_tan+0x374>)
 800e7e2:	f7f2 f81d 	bl	8000820 <__aeabi_ddiv>
 800e7e6:	4682      	mov	sl, r0
 800e7e8:	468b      	mov	fp, r1
 800e7ea:	4650      	mov	r0, sl
 800e7ec:	4659      	mov	r1, fp
 800e7ee:	b00b      	add	sp, #44	; 0x2c
 800e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	2f01      	cmp	r7, #1
 800e7f6:	d0f8      	beq.n	800e7ea <__kernel_tan+0x4a>
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	4659      	mov	r1, fp
 800e7fc:	9a02      	ldr	r2, [sp, #8]
 800e7fe:	9b00      	ldr	r3, [sp, #0]
 800e800:	f7f1 fd2e 	bl	8000260 <__adddf3>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	460f      	mov	r7, r1
 800e80a:	2000      	movs	r0, #0
 800e80c:	49c2      	ldr	r1, [pc, #776]	; (800eb18 <__kernel_tan+0x378>)
 800e80e:	f7f2 f807 	bl	8000820 <__aeabi_ddiv>
 800e812:	462e      	mov	r6, r5
 800e814:	4689      	mov	r9, r1
 800e816:	4652      	mov	r2, sl
 800e818:	465b      	mov	r3, fp
 800e81a:	4680      	mov	r8, r0
 800e81c:	462c      	mov	r4, r5
 800e81e:	4630      	mov	r0, r6
 800e820:	460d      	mov	r5, r1
 800e822:	4639      	mov	r1, r7
 800e824:	f7f1 fd1a 	bl	800025c <__aeabi_dsub>
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	9802      	ldr	r0, [sp, #8]
 800e82e:	9900      	ldr	r1, [sp, #0]
 800e830:	f7f1 fd14 	bl	800025c <__aeabi_dsub>
 800e834:	4632      	mov	r2, r6
 800e836:	464b      	mov	r3, r9
 800e838:	f7f1 fec8 	bl	80005cc <__aeabi_dmul>
 800e83c:	4632      	mov	r2, r6
 800e83e:	4682      	mov	sl, r0
 800e840:	468b      	mov	fp, r1
 800e842:	464b      	mov	r3, r9
 800e844:	4630      	mov	r0, r6
 800e846:	4639      	mov	r1, r7
 800e848:	f7f1 fec0 	bl	80005cc <__aeabi_dmul>
 800e84c:	2200      	movs	r2, #0
 800e84e:	4bb1      	ldr	r3, [pc, #708]	; (800eb14 <__kernel_tan+0x374>)
 800e850:	f7f1 fd06 	bl	8000260 <__adddf3>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4650      	mov	r0, sl
 800e85a:	4659      	mov	r1, fp
 800e85c:	f7f1 fd00 	bl	8000260 <__adddf3>
 800e860:	4642      	mov	r2, r8
 800e862:	464b      	mov	r3, r9
 800e864:	f7f1 feb2 	bl	80005cc <__aeabi_dmul>
 800e868:	4622      	mov	r2, r4
 800e86a:	462b      	mov	r3, r5
 800e86c:	f7f1 fcf8 	bl	8000260 <__adddf3>
 800e870:	e7b9      	b.n	800e7e6 <__kernel_tan+0x46>
 800e872:	4baa      	ldr	r3, [pc, #680]	; (800eb1c <__kernel_tan+0x37c>)
 800e874:	429e      	cmp	r6, r3
 800e876:	dd21      	ble.n	800e8bc <__kernel_tan+0x11c>
 800e878:	2900      	cmp	r1, #0
 800e87a:	da06      	bge.n	800e88a <__kernel_tan+0xea>
 800e87c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e880:	469b      	mov	fp, r3
 800e882:	9b00      	ldr	r3, [sp, #0]
 800e884:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	4652      	mov	r2, sl
 800e88c:	a182      	add	r1, pc, #520	; (adr r1, 800ea98 <__kernel_tan+0x2f8>)
 800e88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e892:	465b      	mov	r3, fp
 800e894:	f7f1 fce2 	bl	800025c <__aeabi_dsub>
 800e898:	4604      	mov	r4, r0
 800e89a:	460d      	mov	r5, r1
 800e89c:	a180      	add	r1, pc, #512	; (adr r1, 800eaa0 <__kernel_tan+0x300>)
 800e89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8a2:	9a02      	ldr	r2, [sp, #8]
 800e8a4:	9b00      	ldr	r3, [sp, #0]
 800e8a6:	f7f1 fcd9 	bl	800025c <__aeabi_dsub>
 800e8aa:	462b      	mov	r3, r5
 800e8ac:	4622      	mov	r2, r4
 800e8ae:	f7f1 fcd7 	bl	8000260 <__adddf3>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	4682      	mov	sl, r0
 800e8b6:	468b      	mov	fp, r1
 800e8b8:	9302      	str	r3, [sp, #8]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	4652      	mov	r2, sl
 800e8be:	465b      	mov	r3, fp
 800e8c0:	4650      	mov	r0, sl
 800e8c2:	4659      	mov	r1, fp
 800e8c4:	f7f1 fe82 	bl	80005cc <__aeabi_dmul>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	4689      	mov	r9, r1
 800e8d0:	f7f1 fe7c 	bl	80005cc <__aeabi_dmul>
 800e8d4:	4642      	mov	r2, r8
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	464b      	mov	r3, r9
 800e8dc:	4650      	mov	r0, sl
 800e8de:	4659      	mov	r1, fp
 800e8e0:	f7f1 fe74 	bl	80005cc <__aeabi_dmul>
 800e8e4:	a370      	add	r3, pc, #448	; (adr r3, 800eaa8 <__kernel_tan+0x308>)
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f7f1 fe6b 	bl	80005cc <__aeabi_dmul>
 800e8f6:	a36e      	add	r3, pc, #440	; (adr r3, 800eab0 <__kernel_tan+0x310>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	f7f1 fcb0 	bl	8000260 <__adddf3>
 800e900:	4622      	mov	r2, r4
 800e902:	462b      	mov	r3, r5
 800e904:	f7f1 fe62 	bl	80005cc <__aeabi_dmul>
 800e908:	a36b      	add	r3, pc, #428	; (adr r3, 800eab8 <__kernel_tan+0x318>)
 800e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90e:	f7f1 fca7 	bl	8000260 <__adddf3>
 800e912:	4622      	mov	r2, r4
 800e914:	462b      	mov	r3, r5
 800e916:	f7f1 fe59 	bl	80005cc <__aeabi_dmul>
 800e91a:	a369      	add	r3, pc, #420	; (adr r3, 800eac0 <__kernel_tan+0x320>)
 800e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e920:	f7f1 fc9e 	bl	8000260 <__adddf3>
 800e924:	4622      	mov	r2, r4
 800e926:	462b      	mov	r3, r5
 800e928:	f7f1 fe50 	bl	80005cc <__aeabi_dmul>
 800e92c:	a366      	add	r3, pc, #408	; (adr r3, 800eac8 <__kernel_tan+0x328>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	f7f1 fc95 	bl	8000260 <__adddf3>
 800e936:	4622      	mov	r2, r4
 800e938:	462b      	mov	r3, r5
 800e93a:	f7f1 fe47 	bl	80005cc <__aeabi_dmul>
 800e93e:	a364      	add	r3, pc, #400	; (adr r3, 800ead0 <__kernel_tan+0x330>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	f7f1 fc8c 	bl	8000260 <__adddf3>
 800e948:	4642      	mov	r2, r8
 800e94a:	464b      	mov	r3, r9
 800e94c:	f7f1 fe3e 	bl	80005cc <__aeabi_dmul>
 800e950:	a361      	add	r3, pc, #388	; (adr r3, 800ead8 <__kernel_tan+0x338>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f1 fe35 	bl	80005cc <__aeabi_dmul>
 800e962:	a35f      	add	r3, pc, #380	; (adr r3, 800eae0 <__kernel_tan+0x340>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fc7a 	bl	8000260 <__adddf3>
 800e96c:	4622      	mov	r2, r4
 800e96e:	462b      	mov	r3, r5
 800e970:	f7f1 fe2c 	bl	80005cc <__aeabi_dmul>
 800e974:	a35c      	add	r3, pc, #368	; (adr r3, 800eae8 <__kernel_tan+0x348>)
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	f7f1 fc71 	bl	8000260 <__adddf3>
 800e97e:	4622      	mov	r2, r4
 800e980:	462b      	mov	r3, r5
 800e982:	f7f1 fe23 	bl	80005cc <__aeabi_dmul>
 800e986:	a35a      	add	r3, pc, #360	; (adr r3, 800eaf0 <__kernel_tan+0x350>)
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	f7f1 fc68 	bl	8000260 <__adddf3>
 800e990:	4622      	mov	r2, r4
 800e992:	462b      	mov	r3, r5
 800e994:	f7f1 fe1a 	bl	80005cc <__aeabi_dmul>
 800e998:	a357      	add	r3, pc, #348	; (adr r3, 800eaf8 <__kernel_tan+0x358>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fc5f 	bl	8000260 <__adddf3>
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	f7f1 fe11 	bl	80005cc <__aeabi_dmul>
 800e9aa:	a355      	add	r3, pc, #340	; (adr r3, 800eb00 <__kernel_tan+0x360>)
 800e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b0:	f7f1 fc56 	bl	8000260 <__adddf3>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e9bc:	f7f1 fc50 	bl	8000260 <__adddf3>
 800e9c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9c4:	f7f1 fe02 	bl	80005cc <__aeabi_dmul>
 800e9c8:	9a02      	ldr	r2, [sp, #8]
 800e9ca:	9b00      	ldr	r3, [sp, #0]
 800e9cc:	f7f1 fc48 	bl	8000260 <__adddf3>
 800e9d0:	4642      	mov	r2, r8
 800e9d2:	464b      	mov	r3, r9
 800e9d4:	f7f1 fdfa 	bl	80005cc <__aeabi_dmul>
 800e9d8:	9a02      	ldr	r2, [sp, #8]
 800e9da:	9b00      	ldr	r3, [sp, #0]
 800e9dc:	f7f1 fc40 	bl	8000260 <__adddf3>
 800e9e0:	a349      	add	r3, pc, #292	; (adr r3, 800eb08 <__kernel_tan+0x368>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	460d      	mov	r5, r1
 800e9ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9ee:	f7f1 fded 	bl	80005cc <__aeabi_dmul>
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	462b      	mov	r3, r5
 800e9f6:	f7f1 fc33 	bl	8000260 <__adddf3>
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	e9cd 0100 	strd	r0, r1, [sp]
 800ea00:	4602      	mov	r2, r0
 800ea02:	4659      	mov	r1, fp
 800ea04:	4650      	mov	r0, sl
 800ea06:	f7f1 fc2b 	bl	8000260 <__adddf3>
 800ea0a:	4b44      	ldr	r3, [pc, #272]	; (800eb1c <__kernel_tan+0x37c>)
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	429e      	cmp	r6, r3
 800ea10:	460d      	mov	r5, r1
 800ea12:	f340 8085 	ble.w	800eb20 <__kernel_tan+0x380>
 800ea16:	4638      	mov	r0, r7
 800ea18:	f7f1 fd6e 	bl	80004f8 <__aeabi_i2d>
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	4680      	mov	r8, r0
 800ea20:	4689      	mov	r9, r1
 800ea22:	462b      	mov	r3, r5
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	f7f1 fdd0 	bl	80005cc <__aeabi_dmul>
 800ea2c:	4642      	mov	r2, r8
 800ea2e:	4606      	mov	r6, r0
 800ea30:	460f      	mov	r7, r1
 800ea32:	464b      	mov	r3, r9
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	f7f1 fc12 	bl	8000260 <__adddf3>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4630      	mov	r0, r6
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f1 feec 	bl	8000820 <__aeabi_ddiv>
 800ea48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4c:	f7f1 fc06 	bl	800025c <__aeabi_dsub>
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	4650      	mov	r0, sl
 800ea56:	4659      	mov	r1, fp
 800ea58:	f7f1 fc00 	bl	800025c <__aeabi_dsub>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	f7f1 fbfe 	bl	8000260 <__adddf3>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4640      	mov	r0, r8
 800ea6a:	4649      	mov	r1, r9
 800ea6c:	f7f1 fbf6 	bl	800025c <__aeabi_dsub>
 800ea70:	9b07      	ldr	r3, [sp, #28]
 800ea72:	4604      	mov	r4, r0
 800ea74:	179b      	asrs	r3, r3, #30
 800ea76:	f003 0302 	and.w	r3, r3, #2
 800ea7a:	f1c3 0001 	rsb	r0, r3, #1
 800ea7e:	460d      	mov	r5, r1
 800ea80:	f7f1 fd3a 	bl	80004f8 <__aeabi_i2d>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4620      	mov	r0, r4
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	f7f1 fd9e 	bl	80005cc <__aeabi_dmul>
 800ea90:	e6a9      	b.n	800e7e6 <__kernel_tan+0x46>
 800ea92:	bf00      	nop
 800ea94:	f3af 8000 	nop.w
 800ea98:	54442d18 	.word	0x54442d18
 800ea9c:	3fe921fb 	.word	0x3fe921fb
 800eaa0:	33145c07 	.word	0x33145c07
 800eaa4:	3c81a626 	.word	0x3c81a626
 800eaa8:	74bf7ad4 	.word	0x74bf7ad4
 800eaac:	3efb2a70 	.word	0x3efb2a70
 800eab0:	32f0a7e9 	.word	0x32f0a7e9
 800eab4:	3f12b80f 	.word	0x3f12b80f
 800eab8:	1a8d1068 	.word	0x1a8d1068
 800eabc:	3f3026f7 	.word	0x3f3026f7
 800eac0:	fee08315 	.word	0xfee08315
 800eac4:	3f57dbc8 	.word	0x3f57dbc8
 800eac8:	e96e8493 	.word	0xe96e8493
 800eacc:	3f8226e3 	.word	0x3f8226e3
 800ead0:	1bb341fe 	.word	0x1bb341fe
 800ead4:	3faba1ba 	.word	0x3faba1ba
 800ead8:	db605373 	.word	0xdb605373
 800eadc:	bef375cb 	.word	0xbef375cb
 800eae0:	a03792a6 	.word	0xa03792a6
 800eae4:	3f147e88 	.word	0x3f147e88
 800eae8:	f2f26501 	.word	0xf2f26501
 800eaec:	3f4344d8 	.word	0x3f4344d8
 800eaf0:	c9560328 	.word	0xc9560328
 800eaf4:	3f6d6d22 	.word	0x3f6d6d22
 800eaf8:	8406d637 	.word	0x8406d637
 800eafc:	3f9664f4 	.word	0x3f9664f4
 800eb00:	1110fe7a 	.word	0x1110fe7a
 800eb04:	3fc11111 	.word	0x3fc11111
 800eb08:	55555563 	.word	0x55555563
 800eb0c:	3fd55555 	.word	0x3fd55555
 800eb10:	3e2fffff 	.word	0x3e2fffff
 800eb14:	3ff00000 	.word	0x3ff00000
 800eb18:	bff00000 	.word	0xbff00000
 800eb1c:	3fe59427 	.word	0x3fe59427
 800eb20:	2f01      	cmp	r7, #1
 800eb22:	d031      	beq.n	800eb88 <__kernel_tan+0x3e8>
 800eb24:	460f      	mov	r7, r1
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	4918      	ldr	r1, [pc, #96]	; (800eb90 <__kernel_tan+0x3f0>)
 800eb2e:	f7f1 fe77 	bl	8000820 <__aeabi_ddiv>
 800eb32:	2600      	movs	r6, #0
 800eb34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eb3c:	4652      	mov	r2, sl
 800eb3e:	465b      	mov	r3, fp
 800eb40:	4630      	mov	r0, r6
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 fb8a 	bl	800025c <__aeabi_dsub>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb50:	f7f1 fb84 	bl	800025c <__aeabi_dsub>
 800eb54:	4632      	mov	r2, r6
 800eb56:	462b      	mov	r3, r5
 800eb58:	f7f1 fd38 	bl	80005cc <__aeabi_dmul>
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	4682      	mov	sl, r0
 800eb60:	468b      	mov	fp, r1
 800eb62:	462b      	mov	r3, r5
 800eb64:	4630      	mov	r0, r6
 800eb66:	4639      	mov	r1, r7
 800eb68:	f7f1 fd30 	bl	80005cc <__aeabi_dmul>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	4b09      	ldr	r3, [pc, #36]	; (800eb94 <__kernel_tan+0x3f4>)
 800eb70:	f7f1 fb76 	bl	8000260 <__adddf3>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4650      	mov	r0, sl
 800eb7a:	4659      	mov	r1, fp
 800eb7c:	f7f1 fb70 	bl	8000260 <__adddf3>
 800eb80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb84:	4634      	mov	r4, r6
 800eb86:	e66d      	b.n	800e864 <__kernel_tan+0xc4>
 800eb88:	4682      	mov	sl, r0
 800eb8a:	468b      	mov	fp, r1
 800eb8c:	e62d      	b.n	800e7ea <__kernel_tan+0x4a>
 800eb8e:	bf00      	nop
 800eb90:	bff00000 	.word	0xbff00000
 800eb94:	3ff00000 	.word	0x3ff00000

0800eb98 <__ieee754_rem_pio2>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	4614      	mov	r4, r2
 800eb9e:	4ac2      	ldr	r2, [pc, #776]	; (800eea8 <__ieee754_rem_pio2+0x310>)
 800eba0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800eba4:	b08d      	sub	sp, #52	; 0x34
 800eba6:	4592      	cmp	sl, r2
 800eba8:	9104      	str	r1, [sp, #16]
 800ebaa:	dc07      	bgt.n	800ebbc <__ieee754_rem_pio2+0x24>
 800ebac:	2200      	movs	r2, #0
 800ebae:	2300      	movs	r3, #0
 800ebb0:	e9c4 0100 	strd	r0, r1, [r4]
 800ebb4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ebb8:	2500      	movs	r5, #0
 800ebba:	e024      	b.n	800ec06 <__ieee754_rem_pio2+0x6e>
 800ebbc:	4abb      	ldr	r2, [pc, #748]	; (800eeac <__ieee754_rem_pio2+0x314>)
 800ebbe:	4592      	cmp	sl, r2
 800ebc0:	dc72      	bgt.n	800eca8 <__ieee754_rem_pio2+0x110>
 800ebc2:	9b04      	ldr	r3, [sp, #16]
 800ebc4:	4dba      	ldr	r5, [pc, #744]	; (800eeb0 <__ieee754_rem_pio2+0x318>)
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	a3a9      	add	r3, pc, #676	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x2d8>)
 800ebca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebce:	dd36      	ble.n	800ec3e <__ieee754_rem_pio2+0xa6>
 800ebd0:	f7f1 fb44 	bl	800025c <__aeabi_dsub>
 800ebd4:	45aa      	cmp	sl, r5
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	460f      	mov	r7, r1
 800ebda:	d018      	beq.n	800ec0e <__ieee754_rem_pio2+0x76>
 800ebdc:	a3a6      	add	r3, pc, #664	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x2e0>)
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	f7f1 fb3b 	bl	800025c <__aeabi_dsub>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4630      	mov	r0, r6
 800ebec:	e9c4 2300 	strd	r2, r3, [r4]
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	f7f1 fb33 	bl	800025c <__aeabi_dsub>
 800ebf6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x2e0>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f7f1 fb2e 	bl	800025c <__aeabi_dsub>
 800ec00:	2501      	movs	r5, #1
 800ec02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec06:	4628      	mov	r0, r5
 800ec08:	b00d      	add	sp, #52	; 0x34
 800ec0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0e:	a39c      	add	r3, pc, #624	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x2e8>)
 800ec10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec14:	f7f1 fb22 	bl	800025c <__aeabi_dsub>
 800ec18:	a39b      	add	r3, pc, #620	; (adr r3, 800ee88 <__ieee754_rem_pio2+0x2f0>)
 800ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1e:	4606      	mov	r6, r0
 800ec20:	460f      	mov	r7, r1
 800ec22:	f7f1 fb1b 	bl	800025c <__aeabi_dsub>
 800ec26:	4602      	mov	r2, r0
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ec30:	4639      	mov	r1, r7
 800ec32:	f7f1 fb13 	bl	800025c <__aeabi_dsub>
 800ec36:	a394      	add	r3, pc, #592	; (adr r3, 800ee88 <__ieee754_rem_pio2+0x2f0>)
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	e7de      	b.n	800ebfc <__ieee754_rem_pio2+0x64>
 800ec3e:	f7f1 fb0f 	bl	8000260 <__adddf3>
 800ec42:	45aa      	cmp	sl, r5
 800ec44:	4606      	mov	r6, r0
 800ec46:	460f      	mov	r7, r1
 800ec48:	d016      	beq.n	800ec78 <__ieee754_rem_pio2+0xe0>
 800ec4a:	a38b      	add	r3, pc, #556	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x2e0>)
 800ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec50:	f7f1 fb06 	bl	8000260 <__adddf3>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4630      	mov	r0, r6
 800ec5a:	e9c4 2300 	strd	r2, r3, [r4]
 800ec5e:	4639      	mov	r1, r7
 800ec60:	f7f1 fafc 	bl	800025c <__aeabi_dsub>
 800ec64:	a384      	add	r3, pc, #528	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x2e0>)
 800ec66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6a:	f7f1 faf9 	bl	8000260 <__adddf3>
 800ec6e:	f04f 35ff 	mov.w	r5, #4294967295
 800ec72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec76:	e7c6      	b.n	800ec06 <__ieee754_rem_pio2+0x6e>
 800ec78:	a381      	add	r3, pc, #516	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x2e8>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 faef 	bl	8000260 <__adddf3>
 800ec82:	a381      	add	r3, pc, #516	; (adr r3, 800ee88 <__ieee754_rem_pio2+0x2f0>)
 800ec84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec88:	4606      	mov	r6, r0
 800ec8a:	460f      	mov	r7, r1
 800ec8c:	f7f1 fae8 	bl	8000260 <__adddf3>
 800ec90:	4602      	mov	r2, r0
 800ec92:	460b      	mov	r3, r1
 800ec94:	4630      	mov	r0, r6
 800ec96:	e9c4 2300 	strd	r2, r3, [r4]
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	f7f1 fade 	bl	800025c <__aeabi_dsub>
 800eca0:	a379      	add	r3, pc, #484	; (adr r3, 800ee88 <__ieee754_rem_pio2+0x2f0>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	e7e0      	b.n	800ec6a <__ieee754_rem_pio2+0xd2>
 800eca8:	4a82      	ldr	r2, [pc, #520]	; (800eeb4 <__ieee754_rem_pio2+0x31c>)
 800ecaa:	4592      	cmp	sl, r2
 800ecac:	f300 80d4 	bgt.w	800ee58 <__ieee754_rem_pio2+0x2c0>
 800ecb0:	f7ff fbd0 	bl	800e454 <fabs>
 800ecb4:	a376      	add	r3, pc, #472	; (adr r3, 800ee90 <__ieee754_rem_pio2+0x2f8>)
 800ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecba:	4606      	mov	r6, r0
 800ecbc:	460f      	mov	r7, r1
 800ecbe:	f7f1 fc85 	bl	80005cc <__aeabi_dmul>
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	4b7c      	ldr	r3, [pc, #496]	; (800eeb8 <__ieee754_rem_pio2+0x320>)
 800ecc6:	f7f1 facb 	bl	8000260 <__adddf3>
 800ecca:	f7f1 ff19 	bl	8000b00 <__aeabi_d2iz>
 800ecce:	4605      	mov	r5, r0
 800ecd0:	f7f1 fc12 	bl	80004f8 <__aeabi_i2d>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecdc:	a364      	add	r3, pc, #400	; (adr r3, 800ee70 <__ieee754_rem_pio2+0x2d8>)
 800ecde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece2:	f7f1 fc73 	bl	80005cc <__aeabi_dmul>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	4630      	mov	r0, r6
 800ecec:	4639      	mov	r1, r7
 800ecee:	f7f1 fab5 	bl	800025c <__aeabi_dsub>
 800ecf2:	a361      	add	r3, pc, #388	; (adr r3, 800ee78 <__ieee754_rem_pio2+0x2e0>)
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	4680      	mov	r8, r0
 800ecfa:	4689      	mov	r9, r1
 800ecfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed00:	f7f1 fc64 	bl	80005cc <__aeabi_dmul>
 800ed04:	2d1f      	cmp	r5, #31
 800ed06:	4606      	mov	r6, r0
 800ed08:	460f      	mov	r7, r1
 800ed0a:	dc0e      	bgt.n	800ed2a <__ieee754_rem_pio2+0x192>
 800ed0c:	4b6b      	ldr	r3, [pc, #428]	; (800eebc <__ieee754_rem_pio2+0x324>)
 800ed0e:	1e6a      	subs	r2, r5, #1
 800ed10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed14:	4553      	cmp	r3, sl
 800ed16:	d008      	beq.n	800ed2a <__ieee754_rem_pio2+0x192>
 800ed18:	4632      	mov	r2, r6
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	4640      	mov	r0, r8
 800ed1e:	4649      	mov	r1, r9
 800ed20:	f7f1 fa9c 	bl	800025c <__aeabi_dsub>
 800ed24:	e9c4 0100 	strd	r0, r1, [r4]
 800ed28:	e012      	b.n	800ed50 <__ieee754_rem_pio2+0x1b8>
 800ed2a:	463b      	mov	r3, r7
 800ed2c:	4632      	mov	r2, r6
 800ed2e:	4640      	mov	r0, r8
 800ed30:	4649      	mov	r1, r9
 800ed32:	f7f1 fa93 	bl	800025c <__aeabi_dsub>
 800ed36:	ea4f 532a 	mov.w	r3, sl, asr #20
 800ed3a:	9305      	str	r3, [sp, #20]
 800ed3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed40:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800ed44:	2b10      	cmp	r3, #16
 800ed46:	dc1f      	bgt.n	800ed88 <__ieee754_rem_pio2+0x1f0>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	e9c4 2300 	strd	r2, r3, [r4]
 800ed50:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ed54:	4640      	mov	r0, r8
 800ed56:	4653      	mov	r3, sl
 800ed58:	4649      	mov	r1, r9
 800ed5a:	f7f1 fa7f 	bl	800025c <__aeabi_dsub>
 800ed5e:	4632      	mov	r2, r6
 800ed60:	463b      	mov	r3, r7
 800ed62:	f7f1 fa7b 	bl	800025c <__aeabi_dsub>
 800ed66:	460b      	mov	r3, r1
 800ed68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed6c:	9904      	ldr	r1, [sp, #16]
 800ed6e:	4602      	mov	r2, r0
 800ed70:	2900      	cmp	r1, #0
 800ed72:	f6bf af48 	bge.w	800ec06 <__ieee754_rem_pio2+0x6e>
 800ed76:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800ed7a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ed7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ed82:	60e3      	str	r3, [r4, #12]
 800ed84:	426d      	negs	r5, r5
 800ed86:	e73e      	b.n	800ec06 <__ieee754_rem_pio2+0x6e>
 800ed88:	a33d      	add	r3, pc, #244	; (adr r3, 800ee80 <__ieee754_rem_pio2+0x2e8>)
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed92:	f7f1 fc1b 	bl	80005cc <__aeabi_dmul>
 800ed96:	4606      	mov	r6, r0
 800ed98:	460f      	mov	r7, r1
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4640      	mov	r0, r8
 800eda0:	4649      	mov	r1, r9
 800eda2:	f7f1 fa5b 	bl	800025c <__aeabi_dsub>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	4682      	mov	sl, r0
 800edac:	468b      	mov	fp, r1
 800edae:	4640      	mov	r0, r8
 800edb0:	4649      	mov	r1, r9
 800edb2:	f7f1 fa53 	bl	800025c <__aeabi_dsub>
 800edb6:	4632      	mov	r2, r6
 800edb8:	463b      	mov	r3, r7
 800edba:	f7f1 fa4f 	bl	800025c <__aeabi_dsub>
 800edbe:	a332      	add	r3, pc, #200	; (adr r3, 800ee88 <__ieee754_rem_pio2+0x2f0>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edcc:	f7f1 fbfe 	bl	80005cc <__aeabi_dmul>
 800edd0:	4632      	mov	r2, r6
 800edd2:	463b      	mov	r3, r7
 800edd4:	f7f1 fa42 	bl	800025c <__aeabi_dsub>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4606      	mov	r6, r0
 800edde:	460f      	mov	r7, r1
 800ede0:	4650      	mov	r0, sl
 800ede2:	4659      	mov	r1, fp
 800ede4:	f7f1 fa3a 	bl	800025c <__aeabi_dsub>
 800ede8:	9a05      	ldr	r2, [sp, #20]
 800edea:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	2b31      	cmp	r3, #49	; 0x31
 800edf2:	dc06      	bgt.n	800ee02 <__ieee754_rem_pio2+0x26a>
 800edf4:	4602      	mov	r2, r0
 800edf6:	460b      	mov	r3, r1
 800edf8:	46d0      	mov	r8, sl
 800edfa:	46d9      	mov	r9, fp
 800edfc:	e9c4 2300 	strd	r2, r3, [r4]
 800ee00:	e7a6      	b.n	800ed50 <__ieee754_rem_pio2+0x1b8>
 800ee02:	a325      	add	r3, pc, #148	; (adr r3, 800ee98 <__ieee754_rem_pio2+0x300>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee0c:	f7f1 fbde 	bl	80005cc <__aeabi_dmul>
 800ee10:	4606      	mov	r6, r0
 800ee12:	460f      	mov	r7, r1
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	4650      	mov	r0, sl
 800ee1a:	4659      	mov	r1, fp
 800ee1c:	f7f1 fa1e 	bl	800025c <__aeabi_dsub>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4680      	mov	r8, r0
 800ee26:	4689      	mov	r9, r1
 800ee28:	4650      	mov	r0, sl
 800ee2a:	4659      	mov	r1, fp
 800ee2c:	f7f1 fa16 	bl	800025c <__aeabi_dsub>
 800ee30:	4632      	mov	r2, r6
 800ee32:	463b      	mov	r3, r7
 800ee34:	f7f1 fa12 	bl	800025c <__aeabi_dsub>
 800ee38:	a319      	add	r3, pc, #100	; (adr r3, 800eea0 <__ieee754_rem_pio2+0x308>)
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	4606      	mov	r6, r0
 800ee40:	460f      	mov	r7, r1
 800ee42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee46:	f7f1 fbc1 	bl	80005cc <__aeabi_dmul>
 800ee4a:	4632      	mov	r2, r6
 800ee4c:	463b      	mov	r3, r7
 800ee4e:	f7f1 fa05 	bl	800025c <__aeabi_dsub>
 800ee52:	4606      	mov	r6, r0
 800ee54:	460f      	mov	r7, r1
 800ee56:	e75f      	b.n	800ed18 <__ieee754_rem_pio2+0x180>
 800ee58:	4a19      	ldr	r2, [pc, #100]	; (800eec0 <__ieee754_rem_pio2+0x328>)
 800ee5a:	4592      	cmp	sl, r2
 800ee5c:	dd32      	ble.n	800eec4 <__ieee754_rem_pio2+0x32c>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	f7f1 f9fb 	bl	800025c <__aeabi_dsub>
 800ee66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee6a:	e9c4 0100 	strd	r0, r1, [r4]
 800ee6e:	e6a3      	b.n	800ebb8 <__ieee754_rem_pio2+0x20>
 800ee70:	54400000 	.word	0x54400000
 800ee74:	3ff921fb 	.word	0x3ff921fb
 800ee78:	1a626331 	.word	0x1a626331
 800ee7c:	3dd0b461 	.word	0x3dd0b461
 800ee80:	1a600000 	.word	0x1a600000
 800ee84:	3dd0b461 	.word	0x3dd0b461
 800ee88:	2e037073 	.word	0x2e037073
 800ee8c:	3ba3198a 	.word	0x3ba3198a
 800ee90:	6dc9c883 	.word	0x6dc9c883
 800ee94:	3fe45f30 	.word	0x3fe45f30
 800ee98:	2e000000 	.word	0x2e000000
 800ee9c:	3ba3198a 	.word	0x3ba3198a
 800eea0:	252049c1 	.word	0x252049c1
 800eea4:	397b839a 	.word	0x397b839a
 800eea8:	3fe921fb 	.word	0x3fe921fb
 800eeac:	4002d97b 	.word	0x4002d97b
 800eeb0:	3ff921fb 	.word	0x3ff921fb
 800eeb4:	413921fb 	.word	0x413921fb
 800eeb8:	3fe00000 	.word	0x3fe00000
 800eebc:	0800fd8c 	.word	0x0800fd8c
 800eec0:	7fefffff 	.word	0x7fefffff
 800eec4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800eec8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800eecc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800eed0:	460f      	mov	r7, r1
 800eed2:	4606      	mov	r6, r0
 800eed4:	f7f1 fe14 	bl	8000b00 <__aeabi_d2iz>
 800eed8:	f7f1 fb0e 	bl	80004f8 <__aeabi_i2d>
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	4630      	mov	r0, r6
 800eee2:	4639      	mov	r1, r7
 800eee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eee8:	f7f1 f9b8 	bl	800025c <__aeabi_dsub>
 800eeec:	2200      	movs	r2, #0
 800eeee:	4b22      	ldr	r3, [pc, #136]	; (800ef78 <__ieee754_rem_pio2+0x3e0>)
 800eef0:	f7f1 fb6c 	bl	80005cc <__aeabi_dmul>
 800eef4:	460f      	mov	r7, r1
 800eef6:	4606      	mov	r6, r0
 800eef8:	f7f1 fe02 	bl	8000b00 <__aeabi_d2iz>
 800eefc:	f7f1 fafc 	bl	80004f8 <__aeabi_i2d>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4630      	mov	r0, r6
 800ef06:	4639      	mov	r1, r7
 800ef08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ef0c:	f7f1 f9a6 	bl	800025c <__aeabi_dsub>
 800ef10:	2200      	movs	r2, #0
 800ef12:	4b19      	ldr	r3, [pc, #100]	; (800ef78 <__ieee754_rem_pio2+0x3e0>)
 800ef14:	f7f1 fb5a 	bl	80005cc <__aeabi_dmul>
 800ef18:	f04f 0803 	mov.w	r8, #3
 800ef1c:	2600      	movs	r6, #0
 800ef1e:	2700      	movs	r7, #0
 800ef20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ef24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ef28:	4632      	mov	r2, r6
 800ef2a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ef2e:	463b      	mov	r3, r7
 800ef30:	46c2      	mov	sl, r8
 800ef32:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef36:	f7f1 fdb1 	bl	8000a9c <__aeabi_dcmpeq>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d1f4      	bne.n	800ef28 <__ieee754_rem_pio2+0x390>
 800ef3e:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <__ieee754_rem_pio2+0x3e4>)
 800ef40:	462a      	mov	r2, r5
 800ef42:	9301      	str	r3, [sp, #4]
 800ef44:	2302      	movs	r3, #2
 800ef46:	4621      	mov	r1, r4
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	a806      	add	r0, sp, #24
 800ef4c:	4653      	mov	r3, sl
 800ef4e:	f000 f817 	bl	800ef80 <__kernel_rem_pio2>
 800ef52:	9b04      	ldr	r3, [sp, #16]
 800ef54:	4605      	mov	r5, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f6bf ae55 	bge.w	800ec06 <__ieee754_rem_pio2+0x6e>
 800ef5c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ef60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef64:	e9c4 2300 	strd	r2, r3, [r4]
 800ef68:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ef6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef70:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ef74:	e706      	b.n	800ed84 <__ieee754_rem_pio2+0x1ec>
 800ef76:	bf00      	nop
 800ef78:	41700000 	.word	0x41700000
 800ef7c:	0800fe0c 	.word	0x0800fe0c

0800ef80 <__kernel_rem_pio2>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ef88:	9308      	str	r3, [sp, #32]
 800ef8a:	9106      	str	r1, [sp, #24]
 800ef8c:	4bb6      	ldr	r3, [pc, #728]	; (800f268 <__kernel_rem_pio2+0x2e8>)
 800ef8e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ef90:	f112 0f14 	cmn.w	r2, #20
 800ef94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef98:	bfa8      	it	ge
 800ef9a:	1ed4      	subge	r4, r2, #3
 800ef9c:	9302      	str	r3, [sp, #8]
 800ef9e:	9b08      	ldr	r3, [sp, #32]
 800efa0:	bfb8      	it	lt
 800efa2:	2400      	movlt	r4, #0
 800efa4:	f103 33ff 	add.w	r3, r3, #4294967295
 800efa8:	9307      	str	r3, [sp, #28]
 800efaa:	bfa4      	itt	ge
 800efac:	2318      	movge	r3, #24
 800efae:	fb94 f4f3 	sdivge	r4, r4, r3
 800efb2:	f06f 0317 	mvn.w	r3, #23
 800efb6:	fb04 3303 	mla	r3, r4, r3, r3
 800efba:	eb03 0b02 	add.w	fp, r3, r2
 800efbe:	9a07      	ldr	r2, [sp, #28]
 800efc0:	9b02      	ldr	r3, [sp, #8]
 800efc2:	1aa7      	subs	r7, r4, r2
 800efc4:	eb03 0802 	add.w	r8, r3, r2
 800efc8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800efca:	2500      	movs	r5, #0
 800efcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800efd0:	2200      	movs	r2, #0
 800efd2:	2300      	movs	r3, #0
 800efd4:	9009      	str	r0, [sp, #36]	; 0x24
 800efd6:	ae20      	add	r6, sp, #128	; 0x80
 800efd8:	4545      	cmp	r5, r8
 800efda:	dd14      	ble.n	800f006 <__kernel_rem_pio2+0x86>
 800efdc:	f04f 0800 	mov.w	r8, #0
 800efe0:	9a08      	ldr	r2, [sp, #32]
 800efe2:	ab20      	add	r3, sp, #128	; 0x80
 800efe4:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800efe8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800efec:	9b02      	ldr	r3, [sp, #8]
 800efee:	4598      	cmp	r8, r3
 800eff0:	dc35      	bgt.n	800f05e <__kernel_rem_pio2+0xde>
 800eff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff4:	2200      	movs	r2, #0
 800eff6:	f1a3 0908 	sub.w	r9, r3, #8
 800effa:	2300      	movs	r3, #0
 800effc:	462f      	mov	r7, r5
 800effe:	2600      	movs	r6, #0
 800f000:	e9cd 2300 	strd	r2, r3, [sp]
 800f004:	e01f      	b.n	800f046 <__kernel_rem_pio2+0xc6>
 800f006:	42ef      	cmn	r7, r5
 800f008:	d40b      	bmi.n	800f022 <__kernel_rem_pio2+0xa2>
 800f00a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f00e:	e9cd 2300 	strd	r2, r3, [sp]
 800f012:	f7f1 fa71 	bl	80004f8 <__aeabi_i2d>
 800f016:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f01a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f01e:	3501      	adds	r5, #1
 800f020:	e7da      	b.n	800efd8 <__kernel_rem_pio2+0x58>
 800f022:	4610      	mov	r0, r2
 800f024:	4619      	mov	r1, r3
 800f026:	e7f8      	b.n	800f01a <__kernel_rem_pio2+0x9a>
 800f028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f02c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800f030:	f7f1 facc 	bl	80005cc <__aeabi_dmul>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f03c:	f7f1 f910 	bl	8000260 <__adddf3>
 800f040:	e9cd 0100 	strd	r0, r1, [sp]
 800f044:	3601      	adds	r6, #1
 800f046:	9b07      	ldr	r3, [sp, #28]
 800f048:	3f08      	subs	r7, #8
 800f04a:	429e      	cmp	r6, r3
 800f04c:	ddec      	ble.n	800f028 <__kernel_rem_pio2+0xa8>
 800f04e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f052:	f108 0801 	add.w	r8, r8, #1
 800f056:	e8ea 2302 	strd	r2, r3, [sl], #8
 800f05a:	3508      	adds	r5, #8
 800f05c:	e7c6      	b.n	800efec <__kernel_rem_pio2+0x6c>
 800f05e:	9b02      	ldr	r3, [sp, #8]
 800f060:	aa0c      	add	r2, sp, #48	; 0x30
 800f062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f066:	930b      	str	r3, [sp, #44]	; 0x2c
 800f068:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800f06a:	9e02      	ldr	r6, [sp, #8]
 800f06c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f070:	930a      	str	r3, [sp, #40]	; 0x28
 800f072:	ab98      	add	r3, sp, #608	; 0x260
 800f074:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f078:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800f07c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f07e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800f082:	46d0      	mov	r8, sl
 800f084:	46b1      	mov	r9, r6
 800f086:	af0c      	add	r7, sp, #48	; 0x30
 800f088:	9700      	str	r7, [sp, #0]
 800f08a:	f1b9 0f00 	cmp.w	r9, #0
 800f08e:	f1a8 0808 	sub.w	r8, r8, #8
 800f092:	dc70      	bgt.n	800f176 <__kernel_rem_pio2+0x1f6>
 800f094:	465a      	mov	r2, fp
 800f096:	4620      	mov	r0, r4
 800f098:	4629      	mov	r1, r5
 800f09a:	f000 fab1 	bl	800f600 <scalbn>
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	460d      	mov	r5, r1
 800f0a8:	f7f1 fa90 	bl	80005cc <__aeabi_dmul>
 800f0ac:	f000 fb24 	bl	800f6f8 <floor>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4b6e      	ldr	r3, [pc, #440]	; (800f26c <__kernel_rem_pio2+0x2ec>)
 800f0b4:	f7f1 fa8a 	bl	80005cc <__aeabi_dmul>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4629      	mov	r1, r5
 800f0c0:	f7f1 f8cc 	bl	800025c <__aeabi_dsub>
 800f0c4:	460d      	mov	r5, r1
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	f7f1 fd1a 	bl	8000b00 <__aeabi_d2iz>
 800f0cc:	9004      	str	r0, [sp, #16]
 800f0ce:	f7f1 fa13 	bl	80004f8 <__aeabi_i2d>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	4629      	mov	r1, r5
 800f0da:	f7f1 f8bf 	bl	800025c <__aeabi_dsub>
 800f0de:	f1bb 0f00 	cmp.w	fp, #0
 800f0e2:	4680      	mov	r8, r0
 800f0e4:	4689      	mov	r9, r1
 800f0e6:	dd6f      	ble.n	800f1c8 <__kernel_rem_pio2+0x248>
 800f0e8:	1e71      	subs	r1, r6, #1
 800f0ea:	ab0c      	add	r3, sp, #48	; 0x30
 800f0ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0f0:	9c04      	ldr	r4, [sp, #16]
 800f0f2:	f1cb 0018 	rsb	r0, fp, #24
 800f0f6:	fa43 f200 	asr.w	r2, r3, r0
 800f0fa:	4414      	add	r4, r2
 800f0fc:	4082      	lsls	r2, r0
 800f0fe:	1a9b      	subs	r3, r3, r2
 800f100:	aa0c      	add	r2, sp, #48	; 0x30
 800f102:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f106:	f1cb 0217 	rsb	r2, fp, #23
 800f10a:	9404      	str	r4, [sp, #16]
 800f10c:	4113      	asrs	r3, r2
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	9b00      	ldr	r3, [sp, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	dd66      	ble.n	800f1e4 <__kernel_rem_pio2+0x264>
 800f116:	2200      	movs	r2, #0
 800f118:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f11c:	4614      	mov	r4, r2
 800f11e:	9b04      	ldr	r3, [sp, #16]
 800f120:	3301      	adds	r3, #1
 800f122:	9304      	str	r3, [sp, #16]
 800f124:	4296      	cmp	r6, r2
 800f126:	f300 80ad 	bgt.w	800f284 <__kernel_rem_pio2+0x304>
 800f12a:	f1bb 0f00 	cmp.w	fp, #0
 800f12e:	dd07      	ble.n	800f140 <__kernel_rem_pio2+0x1c0>
 800f130:	f1bb 0f01 	cmp.w	fp, #1
 800f134:	f000 80b5 	beq.w	800f2a2 <__kernel_rem_pio2+0x322>
 800f138:	f1bb 0f02 	cmp.w	fp, #2
 800f13c:	f000 80bb 	beq.w	800f2b6 <__kernel_rem_pio2+0x336>
 800f140:	9b00      	ldr	r3, [sp, #0]
 800f142:	2b02      	cmp	r3, #2
 800f144:	d14e      	bne.n	800f1e4 <__kernel_rem_pio2+0x264>
 800f146:	4642      	mov	r2, r8
 800f148:	464b      	mov	r3, r9
 800f14a:	2000      	movs	r0, #0
 800f14c:	4948      	ldr	r1, [pc, #288]	; (800f270 <__kernel_rem_pio2+0x2f0>)
 800f14e:	f7f1 f885 	bl	800025c <__aeabi_dsub>
 800f152:	4680      	mov	r8, r0
 800f154:	4689      	mov	r9, r1
 800f156:	2c00      	cmp	r4, #0
 800f158:	d044      	beq.n	800f1e4 <__kernel_rem_pio2+0x264>
 800f15a:	465a      	mov	r2, fp
 800f15c:	2000      	movs	r0, #0
 800f15e:	4944      	ldr	r1, [pc, #272]	; (800f270 <__kernel_rem_pio2+0x2f0>)
 800f160:	f000 fa4e 	bl	800f600 <scalbn>
 800f164:	4602      	mov	r2, r0
 800f166:	460b      	mov	r3, r1
 800f168:	4640      	mov	r0, r8
 800f16a:	4649      	mov	r1, r9
 800f16c:	f7f1 f876 	bl	800025c <__aeabi_dsub>
 800f170:	4680      	mov	r8, r0
 800f172:	4689      	mov	r9, r1
 800f174:	e036      	b.n	800f1e4 <__kernel_rem_pio2+0x264>
 800f176:	2200      	movs	r2, #0
 800f178:	4b3e      	ldr	r3, [pc, #248]	; (800f274 <__kernel_rem_pio2+0x2f4>)
 800f17a:	4620      	mov	r0, r4
 800f17c:	4629      	mov	r1, r5
 800f17e:	f7f1 fa25 	bl	80005cc <__aeabi_dmul>
 800f182:	f7f1 fcbd 	bl	8000b00 <__aeabi_d2iz>
 800f186:	f7f1 f9b7 	bl	80004f8 <__aeabi_i2d>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f192:	2200      	movs	r2, #0
 800f194:	4b38      	ldr	r3, [pc, #224]	; (800f278 <__kernel_rem_pio2+0x2f8>)
 800f196:	f7f1 fa19 	bl	80005cc <__aeabi_dmul>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 f85b 	bl	800025c <__aeabi_dsub>
 800f1a6:	f7f1 fcab 	bl	8000b00 <__aeabi_d2iz>
 800f1aa:	9b00      	ldr	r3, [sp, #0]
 800f1ac:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1b0:	f843 0b04 	str.w	r0, [r3], #4
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f1be:	f7f1 f84f 	bl	8000260 <__adddf3>
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	460d      	mov	r5, r1
 800f1c6:	e760      	b.n	800f08a <__kernel_rem_pio2+0x10a>
 800f1c8:	d105      	bne.n	800f1d6 <__kernel_rem_pio2+0x256>
 800f1ca:	1e73      	subs	r3, r6, #1
 800f1cc:	aa0c      	add	r2, sp, #48	; 0x30
 800f1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d2:	15db      	asrs	r3, r3, #23
 800f1d4:	e79b      	b.n	800f10e <__kernel_rem_pio2+0x18e>
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	4b28      	ldr	r3, [pc, #160]	; (800f27c <__kernel_rem_pio2+0x2fc>)
 800f1da:	f7f1 fc7d 	bl	8000ad8 <__aeabi_dcmpge>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d13e      	bne.n	800f260 <__kernel_rem_pio2+0x2e0>
 800f1e2:	9000      	str	r0, [sp, #0]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	f7f1 fc56 	bl	8000a9c <__aeabi_dcmpeq>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	f000 80b2 	beq.w	800f35a <__kernel_rem_pio2+0x3da>
 800f1f6:	1e74      	subs	r4, r6, #1
 800f1f8:	4623      	mov	r3, r4
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	9902      	ldr	r1, [sp, #8]
 800f1fe:	428b      	cmp	r3, r1
 800f200:	da60      	bge.n	800f2c4 <__kernel_rem_pio2+0x344>
 800f202:	2a00      	cmp	r2, #0
 800f204:	d075      	beq.n	800f2f2 <__kernel_rem_pio2+0x372>
 800f206:	ab0c      	add	r3, sp, #48	; 0x30
 800f208:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f20c:	f1ab 0b18 	sub.w	fp, fp, #24
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 80a0 	beq.w	800f356 <__kernel_rem_pio2+0x3d6>
 800f216:	465a      	mov	r2, fp
 800f218:	2000      	movs	r0, #0
 800f21a:	4915      	ldr	r1, [pc, #84]	; (800f270 <__kernel_rem_pio2+0x2f0>)
 800f21c:	f000 f9f0 	bl	800f600 <scalbn>
 800f220:	46a2      	mov	sl, r4
 800f222:	4606      	mov	r6, r0
 800f224:	460f      	mov	r7, r1
 800f226:	f04f 0800 	mov.w	r8, #0
 800f22a:	ab70      	add	r3, sp, #448	; 0x1c0
 800f22c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800f274 <__kernel_rem_pio2+0x2f4>
 800f230:	00e5      	lsls	r5, r4, #3
 800f232:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800f236:	f1ba 0f00 	cmp.w	sl, #0
 800f23a:	f280 80c4 	bge.w	800f3c6 <__kernel_rem_pio2+0x446>
 800f23e:	4626      	mov	r6, r4
 800f240:	2e00      	cmp	r6, #0
 800f242:	f2c0 80f6 	blt.w	800f432 <__kernel_rem_pio2+0x4b2>
 800f246:	4b0e      	ldr	r3, [pc, #56]	; (800f280 <__kernel_rem_pio2+0x300>)
 800f248:	f04f 0a00 	mov.w	sl, #0
 800f24c:	9307      	str	r3, [sp, #28]
 800f24e:	ab70      	add	r3, sp, #448	; 0x1c0
 800f250:	f04f 0b00 	mov.w	fp, #0
 800f254:	f04f 0800 	mov.w	r8, #0
 800f258:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f25c:	1ba7      	subs	r7, r4, r6
 800f25e:	e0dc      	b.n	800f41a <__kernel_rem_pio2+0x49a>
 800f260:	2302      	movs	r3, #2
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	e757      	b.n	800f116 <__kernel_rem_pio2+0x196>
 800f266:	bf00      	nop
 800f268:	0800ff58 	.word	0x0800ff58
 800f26c:	40200000 	.word	0x40200000
 800f270:	3ff00000 	.word	0x3ff00000
 800f274:	3e700000 	.word	0x3e700000
 800f278:	41700000 	.word	0x41700000
 800f27c:	3fe00000 	.word	0x3fe00000
 800f280:	0800ff18 	.word	0x0800ff18
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	b944      	cbnz	r4, 800f29a <__kernel_rem_pio2+0x31a>
 800f288:	b11b      	cbz	r3, 800f292 <__kernel_rem_pio2+0x312>
 800f28a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f28e:	603b      	str	r3, [r7, #0]
 800f290:	2301      	movs	r3, #1
 800f292:	461c      	mov	r4, r3
 800f294:	3201      	adds	r2, #1
 800f296:	3704      	adds	r7, #4
 800f298:	e744      	b.n	800f124 <__kernel_rem_pio2+0x1a4>
 800f29a:	1acb      	subs	r3, r1, r3
 800f29c:	603b      	str	r3, [r7, #0]
 800f29e:	4623      	mov	r3, r4
 800f2a0:	e7f7      	b.n	800f292 <__kernel_rem_pio2+0x312>
 800f2a2:	1e72      	subs	r2, r6, #1
 800f2a4:	ab0c      	add	r3, sp, #48	; 0x30
 800f2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2ae:	a90c      	add	r1, sp, #48	; 0x30
 800f2b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f2b4:	e744      	b.n	800f140 <__kernel_rem_pio2+0x1c0>
 800f2b6:	1e72      	subs	r2, r6, #1
 800f2b8:	ab0c      	add	r3, sp, #48	; 0x30
 800f2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2be:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f2c2:	e7f4      	b.n	800f2ae <__kernel_rem_pio2+0x32e>
 800f2c4:	a90c      	add	r1, sp, #48	; 0x30
 800f2c6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	e795      	b.n	800f1fc <__kernel_rem_pio2+0x27c>
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f2d6:	2900      	cmp	r1, #0
 800f2d8:	d0fa      	beq.n	800f2d0 <__kernel_rem_pio2+0x350>
 800f2da:	9a08      	ldr	r2, [sp, #32]
 800f2dc:	a920      	add	r1, sp, #128	; 0x80
 800f2de:	18b2      	adds	r2, r6, r2
 800f2e0:	f106 0801 	add.w	r8, r6, #1
 800f2e4:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f2e8:	18f4      	adds	r4, r6, r3
 800f2ea:	4544      	cmp	r4, r8
 800f2ec:	da04      	bge.n	800f2f8 <__kernel_rem_pio2+0x378>
 800f2ee:	4626      	mov	r6, r4
 800f2f0:	e6bf      	b.n	800f072 <__kernel_rem_pio2+0xf2>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2f6:	e7ec      	b.n	800f2d2 <__kernel_rem_pio2+0x352>
 800f2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fa:	f04f 0900 	mov.w	r9, #0
 800f2fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f302:	f7f1 f8f9 	bl	80004f8 <__aeabi_i2d>
 800f306:	2600      	movs	r6, #0
 800f308:	2700      	movs	r7, #0
 800f30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f30c:	e9c5 0100 	strd	r0, r1, [r5]
 800f310:	3b08      	subs	r3, #8
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	9504      	str	r5, [sp, #16]
 800f316:	9b07      	ldr	r3, [sp, #28]
 800f318:	4599      	cmp	r9, r3
 800f31a:	dd05      	ble.n	800f328 <__kernel_rem_pio2+0x3a8>
 800f31c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800f320:	f108 0801 	add.w	r8, r8, #1
 800f324:	3508      	adds	r5, #8
 800f326:	e7e0      	b.n	800f2ea <__kernel_rem_pio2+0x36a>
 800f328:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f32c:	9900      	ldr	r1, [sp, #0]
 800f32e:	f109 0901 	add.w	r9, r9, #1
 800f332:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800f336:	9100      	str	r1, [sp, #0]
 800f338:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800f33c:	f8cd c010 	str.w	ip, [sp, #16]
 800f340:	f7f1 f944 	bl	80005cc <__aeabi_dmul>
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	4630      	mov	r0, r6
 800f34a:	4639      	mov	r1, r7
 800f34c:	f7f0 ff88 	bl	8000260 <__adddf3>
 800f350:	4606      	mov	r6, r0
 800f352:	460f      	mov	r7, r1
 800f354:	e7df      	b.n	800f316 <__kernel_rem_pio2+0x396>
 800f356:	3c01      	subs	r4, #1
 800f358:	e755      	b.n	800f206 <__kernel_rem_pio2+0x286>
 800f35a:	f1cb 0200 	rsb	r2, fp, #0
 800f35e:	4640      	mov	r0, r8
 800f360:	4649      	mov	r1, r9
 800f362:	f000 f94d 	bl	800f600 <scalbn>
 800f366:	2200      	movs	r2, #0
 800f368:	4ba3      	ldr	r3, [pc, #652]	; (800f5f8 <__kernel_rem_pio2+0x678>)
 800f36a:	4604      	mov	r4, r0
 800f36c:	460d      	mov	r5, r1
 800f36e:	f7f1 fbb3 	bl	8000ad8 <__aeabi_dcmpge>
 800f372:	b1f8      	cbz	r0, 800f3b4 <__kernel_rem_pio2+0x434>
 800f374:	2200      	movs	r2, #0
 800f376:	4ba1      	ldr	r3, [pc, #644]	; (800f5fc <__kernel_rem_pio2+0x67c>)
 800f378:	4620      	mov	r0, r4
 800f37a:	4629      	mov	r1, r5
 800f37c:	f7f1 f926 	bl	80005cc <__aeabi_dmul>
 800f380:	f7f1 fbbe 	bl	8000b00 <__aeabi_d2iz>
 800f384:	4607      	mov	r7, r0
 800f386:	f7f1 f8b7 	bl	80004f8 <__aeabi_i2d>
 800f38a:	2200      	movs	r2, #0
 800f38c:	4b9a      	ldr	r3, [pc, #616]	; (800f5f8 <__kernel_rem_pio2+0x678>)
 800f38e:	f7f1 f91d 	bl	80005cc <__aeabi_dmul>
 800f392:	460b      	mov	r3, r1
 800f394:	4602      	mov	r2, r0
 800f396:	4629      	mov	r1, r5
 800f398:	4620      	mov	r0, r4
 800f39a:	f7f0 ff5f 	bl	800025c <__aeabi_dsub>
 800f39e:	f7f1 fbaf 	bl	8000b00 <__aeabi_d2iz>
 800f3a2:	1c74      	adds	r4, r6, #1
 800f3a4:	ab0c      	add	r3, sp, #48	; 0x30
 800f3a6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800f3aa:	f10b 0b18 	add.w	fp, fp, #24
 800f3ae:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800f3b2:	e730      	b.n	800f216 <__kernel_rem_pio2+0x296>
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	f7f1 fba2 	bl	8000b00 <__aeabi_d2iz>
 800f3bc:	ab0c      	add	r3, sp, #48	; 0x30
 800f3be:	4634      	mov	r4, r6
 800f3c0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800f3c4:	e727      	b.n	800f216 <__kernel_rem_pio2+0x296>
 800f3c6:	ab0c      	add	r3, sp, #48	; 0x30
 800f3c8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f3cc:	f7f1 f894 	bl	80004f8 <__aeabi_i2d>
 800f3d0:	4632      	mov	r2, r6
 800f3d2:	463b      	mov	r3, r7
 800f3d4:	f7f1 f8fa 	bl	80005cc <__aeabi_dmul>
 800f3d8:	4642      	mov	r2, r8
 800f3da:	e86b 0102 	strd	r0, r1, [fp], #-8
 800f3de:	464b      	mov	r3, r9
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	f7f1 f8f2 	bl	80005cc <__aeabi_dmul>
 800f3e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	460f      	mov	r7, r1
 800f3f0:	e721      	b.n	800f236 <__kernel_rem_pio2+0x2b6>
 800f3f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f3f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f3fa:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800f3fe:	f8cd c01c 	str.w	ip, [sp, #28]
 800f402:	f7f1 f8e3 	bl	80005cc <__aeabi_dmul>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	4650      	mov	r0, sl
 800f40c:	4659      	mov	r1, fp
 800f40e:	f7f0 ff27 	bl	8000260 <__adddf3>
 800f412:	4682      	mov	sl, r0
 800f414:	468b      	mov	fp, r1
 800f416:	f108 0801 	add.w	r8, r8, #1
 800f41a:	9b02      	ldr	r3, [sp, #8]
 800f41c:	4598      	cmp	r8, r3
 800f41e:	dc01      	bgt.n	800f424 <__kernel_rem_pio2+0x4a4>
 800f420:	45b8      	cmp	r8, r7
 800f422:	dde6      	ble.n	800f3f2 <__kernel_rem_pio2+0x472>
 800f424:	ab48      	add	r3, sp, #288	; 0x120
 800f426:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f42a:	e9c7 ab00 	strd	sl, fp, [r7]
 800f42e:	3e01      	subs	r6, #1
 800f430:	e706      	b.n	800f240 <__kernel_rem_pio2+0x2c0>
 800f432:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f434:	2b02      	cmp	r3, #2
 800f436:	dc09      	bgt.n	800f44c <__kernel_rem_pio2+0x4cc>
 800f438:	2b00      	cmp	r3, #0
 800f43a:	dc32      	bgt.n	800f4a2 <__kernel_rem_pio2+0x522>
 800f43c:	d058      	beq.n	800f4f0 <__kernel_rem_pio2+0x570>
 800f43e:	9b04      	ldr	r3, [sp, #16]
 800f440:	f003 0007 	and.w	r0, r3, #7
 800f444:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d1f5      	bne.n	800f43e <__kernel_rem_pio2+0x4be>
 800f452:	ab48      	add	r3, sp, #288	; 0x120
 800f454:	441d      	add	r5, r3
 800f456:	46aa      	mov	sl, r5
 800f458:	46a3      	mov	fp, r4
 800f45a:	f1bb 0f00 	cmp.w	fp, #0
 800f45e:	dc74      	bgt.n	800f54a <__kernel_rem_pio2+0x5ca>
 800f460:	46aa      	mov	sl, r5
 800f462:	46a3      	mov	fp, r4
 800f464:	f1bb 0f01 	cmp.w	fp, #1
 800f468:	f300 808e 	bgt.w	800f588 <__kernel_rem_pio2+0x608>
 800f46c:	2700      	movs	r7, #0
 800f46e:	463e      	mov	r6, r7
 800f470:	2c01      	cmp	r4, #1
 800f472:	f300 80a8 	bgt.w	800f5c6 <__kernel_rem_pio2+0x646>
 800f476:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800f47a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800f47e:	9b00      	ldr	r3, [sp, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	f040 80aa 	bne.w	800f5da <__kernel_rem_pio2+0x65a>
 800f486:	4603      	mov	r3, r0
 800f488:	462a      	mov	r2, r5
 800f48a:	9806      	ldr	r0, [sp, #24]
 800f48c:	e9c0 2300 	strd	r2, r3, [r0]
 800f490:	4622      	mov	r2, r4
 800f492:	460b      	mov	r3, r1
 800f494:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f498:	463a      	mov	r2, r7
 800f49a:	4633      	mov	r3, r6
 800f49c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f4a0:	e7cd      	b.n	800f43e <__kernel_rem_pio2+0x4be>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	46a0      	mov	r8, r4
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	ab48      	add	r3, sp, #288	; 0x120
 800f4aa:	441d      	add	r5, r3
 800f4ac:	f1b8 0f00 	cmp.w	r8, #0
 800f4b0:	da38      	bge.n	800f524 <__kernel_rem_pio2+0x5a4>
 800f4b2:	9b00      	ldr	r3, [sp, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d03c      	beq.n	800f532 <__kernel_rem_pio2+0x5b2>
 800f4b8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800f4bc:	4602      	mov	r2, r0
 800f4be:	462b      	mov	r3, r5
 800f4c0:	9d06      	ldr	r5, [sp, #24]
 800f4c2:	2601      	movs	r6, #1
 800f4c4:	e9c5 2300 	strd	r2, r3, [r5]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f4ce:	f7f0 fec5 	bl	800025c <__aeabi_dsub>
 800f4d2:	4684      	mov	ip, r0
 800f4d4:	460f      	mov	r7, r1
 800f4d6:	ad48      	add	r5, sp, #288	; 0x120
 800f4d8:	42b4      	cmp	r4, r6
 800f4da:	da2c      	bge.n	800f536 <__kernel_rem_pio2+0x5b6>
 800f4dc:	9b00      	ldr	r3, [sp, #0]
 800f4de:	b10b      	cbz	r3, 800f4e4 <__kernel_rem_pio2+0x564>
 800f4e0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800f4e4:	4662      	mov	r2, ip
 800f4e6:	463b      	mov	r3, r7
 800f4e8:	9906      	ldr	r1, [sp, #24]
 800f4ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f4ee:	e7a6      	b.n	800f43e <__kernel_rem_pio2+0x4be>
 800f4f0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800f4f2:	ab48      	add	r3, sp, #288	; 0x120
 800f4f4:	4637      	mov	r7, r6
 800f4f6:	441d      	add	r5, r3
 800f4f8:	2c00      	cmp	r4, #0
 800f4fa:	da09      	bge.n	800f510 <__kernel_rem_pio2+0x590>
 800f4fc:	9b00      	ldr	r3, [sp, #0]
 800f4fe:	b10b      	cbz	r3, 800f504 <__kernel_rem_pio2+0x584>
 800f500:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800f504:	4632      	mov	r2, r6
 800f506:	463b      	mov	r3, r7
 800f508:	9906      	ldr	r1, [sp, #24]
 800f50a:	e9c1 2300 	strd	r2, r3, [r1]
 800f50e:	e796      	b.n	800f43e <__kernel_rem_pio2+0x4be>
 800f510:	4630      	mov	r0, r6
 800f512:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f516:	4639      	mov	r1, r7
 800f518:	f7f0 fea2 	bl	8000260 <__adddf3>
 800f51c:	3c01      	subs	r4, #1
 800f51e:	4606      	mov	r6, r0
 800f520:	460f      	mov	r7, r1
 800f522:	e7e9      	b.n	800f4f8 <__kernel_rem_pio2+0x578>
 800f524:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f528:	f7f0 fe9a 	bl	8000260 <__adddf3>
 800f52c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f530:	e7bc      	b.n	800f4ac <__kernel_rem_pio2+0x52c>
 800f532:	460d      	mov	r5, r1
 800f534:	e7c2      	b.n	800f4bc <__kernel_rem_pio2+0x53c>
 800f536:	4660      	mov	r0, ip
 800f538:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800f53c:	4639      	mov	r1, r7
 800f53e:	f7f0 fe8f 	bl	8000260 <__adddf3>
 800f542:	3601      	adds	r6, #1
 800f544:	4684      	mov	ip, r0
 800f546:	460f      	mov	r7, r1
 800f548:	e7c6      	b.n	800f4d8 <__kernel_rem_pio2+0x558>
 800f54a:	e9da 6700 	ldrd	r6, r7, [sl]
 800f54e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800f552:	4632      	mov	r2, r6
 800f554:	463b      	mov	r3, r7
 800f556:	4640      	mov	r0, r8
 800f558:	4649      	mov	r1, r9
 800f55a:	f7f0 fe81 	bl	8000260 <__adddf3>
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f566:	4640      	mov	r0, r8
 800f568:	4649      	mov	r1, r9
 800f56a:	f7f0 fe77 	bl	800025c <__aeabi_dsub>
 800f56e:	4632      	mov	r2, r6
 800f570:	463b      	mov	r3, r7
 800f572:	f7f0 fe75 	bl	8000260 <__adddf3>
 800f576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f57a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f57e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f582:	e9ca 2300 	strd	r2, r3, [sl]
 800f586:	e768      	b.n	800f45a <__kernel_rem_pio2+0x4da>
 800f588:	e9da 8900 	ldrd	r8, r9, [sl]
 800f58c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800f590:	4642      	mov	r2, r8
 800f592:	464b      	mov	r3, r9
 800f594:	4630      	mov	r0, r6
 800f596:	4639      	mov	r1, r7
 800f598:	f7f0 fe62 	bl	8000260 <__adddf3>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	4639      	mov	r1, r7
 800f5a8:	f7f0 fe58 	bl	800025c <__aeabi_dsub>
 800f5ac:	4642      	mov	r2, r8
 800f5ae:	464b      	mov	r3, r9
 800f5b0:	f7f0 fe56 	bl	8000260 <__adddf3>
 800f5b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5b8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f5bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5c0:	e9ca 2300 	strd	r2, r3, [sl]
 800f5c4:	e74e      	b.n	800f464 <__kernel_rem_pio2+0x4e4>
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	f7f0 fe47 	bl	8000260 <__adddf3>
 800f5d2:	3c01      	subs	r4, #1
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	460e      	mov	r6, r1
 800f5d8:	e74a      	b.n	800f470 <__kernel_rem_pio2+0x4f0>
 800f5da:	9b06      	ldr	r3, [sp, #24]
 800f5dc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f5e0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f5e4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800f5e8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800f5ec:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800f5f0:	601d      	str	r5, [r3, #0]
 800f5f2:	615e      	str	r6, [r3, #20]
 800f5f4:	e723      	b.n	800f43e <__kernel_rem_pio2+0x4be>
 800f5f6:	bf00      	nop
 800f5f8:	41700000 	.word	0x41700000
 800f5fc:	3e700000 	.word	0x3e700000

0800f600 <scalbn>:
 800f600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f602:	4616      	mov	r6, r2
 800f604:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f608:	4604      	mov	r4, r0
 800f60a:	460d      	mov	r5, r1
 800f60c:	460b      	mov	r3, r1
 800f60e:	b992      	cbnz	r2, 800f636 <scalbn+0x36>
 800f610:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f614:	4303      	orrs	r3, r0
 800f616:	d03c      	beq.n	800f692 <scalbn+0x92>
 800f618:	4b31      	ldr	r3, [pc, #196]	; (800f6e0 <scalbn+0xe0>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	f7f0 ffd6 	bl	80005cc <__aeabi_dmul>
 800f620:	4b30      	ldr	r3, [pc, #192]	; (800f6e4 <scalbn+0xe4>)
 800f622:	4604      	mov	r4, r0
 800f624:	429e      	cmp	r6, r3
 800f626:	460d      	mov	r5, r1
 800f628:	da0f      	bge.n	800f64a <scalbn+0x4a>
 800f62a:	a329      	add	r3, pc, #164	; (adr r3, 800f6d0 <scalbn+0xd0>)
 800f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f630:	f7f0 ffcc 	bl	80005cc <__aeabi_dmul>
 800f634:	e006      	b.n	800f644 <scalbn+0x44>
 800f636:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800f63a:	42ba      	cmp	r2, r7
 800f63c:	d109      	bne.n	800f652 <scalbn+0x52>
 800f63e:	4602      	mov	r2, r0
 800f640:	f7f0 fe0e 	bl	8000260 <__adddf3>
 800f644:	4604      	mov	r4, r0
 800f646:	460d      	mov	r5, r1
 800f648:	e023      	b.n	800f692 <scalbn+0x92>
 800f64a:	460b      	mov	r3, r1
 800f64c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f650:	3a36      	subs	r2, #54	; 0x36
 800f652:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f656:	428e      	cmp	r6, r1
 800f658:	dd0e      	ble.n	800f678 <scalbn+0x78>
 800f65a:	a31f      	add	r3, pc, #124	; (adr r3, 800f6d8 <scalbn+0xd8>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f664:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f668:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f66c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f670:	481d      	ldr	r0, [pc, #116]	; (800f6e8 <scalbn+0xe8>)
 800f672:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f676:	e7db      	b.n	800f630 <scalbn+0x30>
 800f678:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f67c:	4432      	add	r2, r6
 800f67e:	428a      	cmp	r2, r1
 800f680:	dceb      	bgt.n	800f65a <scalbn+0x5a>
 800f682:	2a00      	cmp	r2, #0
 800f684:	dd08      	ble.n	800f698 <scalbn+0x98>
 800f686:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f68a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f68e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f692:	4620      	mov	r0, r4
 800f694:	4629      	mov	r1, r5
 800f696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f698:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f69c:	da0c      	bge.n	800f6b8 <scalbn+0xb8>
 800f69e:	a30c      	add	r3, pc, #48	; (adr r3, 800f6d0 <scalbn+0xd0>)
 800f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f6a8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800f6ac:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f6b0:	480e      	ldr	r0, [pc, #56]	; (800f6ec <scalbn+0xec>)
 800f6b2:	f041 011f 	orr.w	r1, r1, #31
 800f6b6:	e7bb      	b.n	800f630 <scalbn+0x30>
 800f6b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6bc:	3236      	adds	r2, #54	; 0x36
 800f6be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <scalbn+0xf0>)
 800f6ce:	e7af      	b.n	800f630 <scalbn+0x30>
 800f6d0:	c2f8f359 	.word	0xc2f8f359
 800f6d4:	01a56e1f 	.word	0x01a56e1f
 800f6d8:	8800759c 	.word	0x8800759c
 800f6dc:	7e37e43c 	.word	0x7e37e43c
 800f6e0:	43500000 	.word	0x43500000
 800f6e4:	ffff3cb0 	.word	0xffff3cb0
 800f6e8:	8800759c 	.word	0x8800759c
 800f6ec:	c2f8f359 	.word	0xc2f8f359
 800f6f0:	3c900000 	.word	0x3c900000
 800f6f4:	00000000 	.word	0x00000000

0800f6f8 <floor>:
 800f6f8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f700:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f704:	2e13      	cmp	r6, #19
 800f706:	460b      	mov	r3, r1
 800f708:	4607      	mov	r7, r0
 800f70a:	460c      	mov	r4, r1
 800f70c:	4605      	mov	r5, r0
 800f70e:	dc32      	bgt.n	800f776 <floor+0x7e>
 800f710:	2e00      	cmp	r6, #0
 800f712:	da14      	bge.n	800f73e <floor+0x46>
 800f714:	a334      	add	r3, pc, #208	; (adr r3, 800f7e8 <floor+0xf0>)
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f7f0 fda1 	bl	8000260 <__adddf3>
 800f71e:	2200      	movs	r2, #0
 800f720:	2300      	movs	r3, #0
 800f722:	f7f1 f9e3 	bl	8000aec <__aeabi_dcmpgt>
 800f726:	b138      	cbz	r0, 800f738 <floor+0x40>
 800f728:	2c00      	cmp	r4, #0
 800f72a:	da56      	bge.n	800f7da <floor+0xe2>
 800f72c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f730:	4325      	orrs	r5, r4
 800f732:	d055      	beq.n	800f7e0 <floor+0xe8>
 800f734:	2500      	movs	r5, #0
 800f736:	4c2e      	ldr	r4, [pc, #184]	; (800f7f0 <floor+0xf8>)
 800f738:	4623      	mov	r3, r4
 800f73a:	462f      	mov	r7, r5
 800f73c:	e025      	b.n	800f78a <floor+0x92>
 800f73e:	4a2d      	ldr	r2, [pc, #180]	; (800f7f4 <floor+0xfc>)
 800f740:	fa42 f806 	asr.w	r8, r2, r6
 800f744:	ea01 0208 	and.w	r2, r1, r8
 800f748:	4302      	orrs	r2, r0
 800f74a:	d01e      	beq.n	800f78a <floor+0x92>
 800f74c:	a326      	add	r3, pc, #152	; (adr r3, 800f7e8 <floor+0xf0>)
 800f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f752:	f7f0 fd85 	bl	8000260 <__adddf3>
 800f756:	2200      	movs	r2, #0
 800f758:	2300      	movs	r3, #0
 800f75a:	f7f1 f9c7 	bl	8000aec <__aeabi_dcmpgt>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0ea      	beq.n	800f738 <floor+0x40>
 800f762:	2c00      	cmp	r4, #0
 800f764:	bfbe      	ittt	lt
 800f766:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f76a:	4133      	asrlt	r3, r6
 800f76c:	18e4      	addlt	r4, r4, r3
 800f76e:	2500      	movs	r5, #0
 800f770:	ea24 0408 	bic.w	r4, r4, r8
 800f774:	e7e0      	b.n	800f738 <floor+0x40>
 800f776:	2e33      	cmp	r6, #51	; 0x33
 800f778:	dd0b      	ble.n	800f792 <floor+0x9a>
 800f77a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f77e:	d104      	bne.n	800f78a <floor+0x92>
 800f780:	4602      	mov	r2, r0
 800f782:	f7f0 fd6d 	bl	8000260 <__adddf3>
 800f786:	4607      	mov	r7, r0
 800f788:	460b      	mov	r3, r1
 800f78a:	4638      	mov	r0, r7
 800f78c:	4619      	mov	r1, r3
 800f78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f792:	f04f 38ff 	mov.w	r8, #4294967295
 800f796:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f79a:	fa28 f802 	lsr.w	r8, r8, r2
 800f79e:	ea10 0f08 	tst.w	r0, r8
 800f7a2:	d0f2      	beq.n	800f78a <floor+0x92>
 800f7a4:	a310      	add	r3, pc, #64	; (adr r3, 800f7e8 <floor+0xf0>)
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	f7f0 fd59 	bl	8000260 <__adddf3>
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	f7f1 f99b 	bl	8000aec <__aeabi_dcmpgt>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d0be      	beq.n	800f738 <floor+0x40>
 800f7ba:	2c00      	cmp	r4, #0
 800f7bc:	da0a      	bge.n	800f7d4 <floor+0xdc>
 800f7be:	2e14      	cmp	r6, #20
 800f7c0:	d101      	bne.n	800f7c6 <floor+0xce>
 800f7c2:	3401      	adds	r4, #1
 800f7c4:	e006      	b.n	800f7d4 <floor+0xdc>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f7cc:	40b3      	lsls	r3, r6
 800f7ce:	441d      	add	r5, r3
 800f7d0:	42af      	cmp	r7, r5
 800f7d2:	d8f6      	bhi.n	800f7c2 <floor+0xca>
 800f7d4:	ea25 0508 	bic.w	r5, r5, r8
 800f7d8:	e7ae      	b.n	800f738 <floor+0x40>
 800f7da:	2500      	movs	r5, #0
 800f7dc:	462c      	mov	r4, r5
 800f7de:	e7ab      	b.n	800f738 <floor+0x40>
 800f7e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f7e4:	e7a8      	b.n	800f738 <floor+0x40>
 800f7e6:	bf00      	nop
 800f7e8:	8800759c 	.word	0x8800759c
 800f7ec:	7e37e43c 	.word	0x7e37e43c
 800f7f0:	bff00000 	.word	0xbff00000
 800f7f4:	000fffff 	.word	0x000fffff

0800f7f8 <_init>:
 800f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fa:	bf00      	nop
 800f7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7fe:	bc08      	pop	{r3}
 800f800:	469e      	mov	lr, r3
 800f802:	4770      	bx	lr

0800f804 <_fini>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	bf00      	nop
 800f808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80a:	bc08      	pop	{r3}
 800f80c:	469e      	mov	lr, r3
 800f80e:	4770      	bx	lr
